<html xmlns:v="urn:schemas-microsoft-com:vml"
    xmlns:o="urn:schemas-microsoft-com:office:office"
    xmlns:w="urn:schemas-microsoft-com:office:word"
    xmlns="http://www.w3.org/TR/REC-html40">
    <head><meta http-equiv=Content-Type content="text/html; charset=utf-8">
    <style type="text/css">
        table  
        {  
            border-collapse: collapse;
            border: none;  
            width: 100%;  
        }  
        td,tr  
        {  
            border: solid #CCC 1px;
            padding:3px;
            font-size:9pt;
        } 
        .codestyle{
            word-break: break-all;
            mso-highlight:rgb(252, 252, 252);
            padding-left: 5px; background-color: rgb(252, 252, 252); border: 1px solid rgb(225, 225, 232);
        }
        img {
            width:100;
        }
    </style>
    <meta name=ProgId content=Word.Document>
    <meta name=Generator content="Microsoft Word 11">
    <meta name=Originator content="Microsoft Word 11">
    <xml><w:WordDocument><w:View>Print</w:View></xml></head>
    <body><h1>1、一、鸿雁网关设备发现说明</h1><div style="margin-left:0px;"><h2>1.1、版本</h2><div style="margin-left:0px;"><h2>版权声明</h2>
<p>本文件所包含的所有信息均为杭州鸿雁智能科技有限公司（以下简称“鸿雁”或“本公司”）版权所有。未经本公司书面许可，不得向本公司雇员、代理商、合作方或授权许可方以外的任何第三方泄露本文档内容，不得以任何形式擅自复制或传播本文档。若使用者违反本版权保护的约定，本公司有权追究使用者由此产生的法律责任。 免责声明
本公司将竭尽所能确保所提供信息的完整性与准确性，但对所发布之档不提供任何明确或隐含的赔偿或担保，并保留因产品更新或更正错误时修订本文档且无需通知的权利。 </p>
<h2>联系我们</h2>
<p>杭州鸿雁智能科技有限公司 地址：浙江省杭州市余杭区五常大道 138 号鸿雁工业园区 </p></div><h2>1.2、UDP 网关发现指令 </h2><div style="margin-left:0px;"><h1>UDP 网关发现指令</h1>
<h2><strong>1.客户端发送指令</strong></h2>
<p>客户端发送 UDP 广播，端口 8000（网关监听端口），发送 JSON 数据如下：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{ 
 "Command":"RequestTcp" 
} 
</code></pre></table>
<hr />
<h2><strong>2. 网关端回复指令(网关端为UDP server)</strong></h2>
<p>接收到网关发现指令后，向指令发送方（客户端）回复如下 JSON 数据：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{ 
"Command":"Response", 
"IP":"XXX.XXX.XXX.XXX",     //网关 WAN 口 IP 地址 
"Port":"7000",              //TCP 连接端口 
"Model":"IHA1211YD",       //网关类型 
"Ver":"1.1.0",             //版本号 
"Mac":"1234567887654321",  // 网关 COO mac 16 位 
"CooVer”:”Sep 8 2018”      // 网关 COO 版本 
} </code></pre></table>
<p>客户端根据接收到的IP和Port，TCP方式连接网关。</p></div><h2>1.3、TCP 连接心跳指令 </h2><div style="margin-left:0px;"><p><strong>注：</strong></p>
<ul>
<li>客户端通过 UDP 广播接收到网关 server IP 和 监听端口 Port 后，通过 TCP
连接网关。此后客户端需要定期通过 TCP 向网关发送心跳指令。</li>
<li>心跳指令字符串和心跳指令反馈字符串，TCP 发送时均需在字符串头加 0x02,
字符串尾加 0x03，作为一条指令或状态的完整判断。
例如：
char sendStrig[8]={0};
sendString[0]=0x02;
sprintf(sendString[1],"%s","Hello");
sendString[6]=0x03;</li>
</ul>
<hr />
<p><strong>1.客户端心跳指令</strong>
客户端连接上网关之后，周期向网关发送心跳指令，发送周期为60s，指令如下：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
"Command":"TcpBeatHeart",
"Period":"60"
}</code></pre></table>
<p><strong>2.网关端心跳指令反馈</strong>
网关在接收到客户端发送的心跳指令后，回复发送方如下 JSON 数据：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
"Command":"BeatHeartResponse"
}
</code></pre></table></div><h2>1.4、TCP控制指令和设备上报指令 </h2><div style="margin-left:0px;"><p><strong>注： </strong>
1、客户端通过TCP与鸿雁主机连接后，后续与鸿雁网关的交互，均通过TCP。
2、具体的网关及Zigbee子设备控制指令和设备上报状态,请参看《鸿雁网关对接开发技术说明》
3、控制指令的下发和设备上报的状态，TCP 发送和接收时均需在字符串头加 0x02, 字符串尾加 0x03，作为一条指令或状态的完整判断。客户端在接收上报时应根据0x02和0x03做好拼包。
例如：
char sendStrig[8]={0};
sendString[0]=0x02;
sprintf(sendString[1],"%s","Hello");
sendString[6]=0x03;</p></div></div><h1>2、二、鸿雁网关对接开发技术说明</h1><div style="margin-left:0px;"><h2>2.1、声明</h2><div style="margin-left:20px;"><h3>2.1.1、版本</h3><div style="margin-left:0px;"><h1><strong>版本记录</strong></h1>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>更改日期</th>
<th>版本</th>
<th>编制、更改内容</th>
<th>拟制人</th>
</tr>
</thead>
<tbody>
<tr>
<td>2018/03/13</td>
<td>1.0.0</td>
<td>初稿</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/04/17</td>
<td>1.0.1</td>
<td>添加2.2.4节获取网关COO的MAC； 添加2.3.6节网关COO的MAC上报</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/05/13</td>
<td>1.0.2</td>
<td>添加附录1 libhydevicemanagesdk.so 使用说明</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/05/14</td>
<td>1.0.3</td>
<td>1、2.1节，参数Type中，删除查询设备属性指令:"Query" 2、修改2.2 标题为公共控制和查询指令 3、添加2.2.5. 获取子设备当前所有属性或状态指令 4、添加2.2.6. 查询设备所有属性指令 5、添加2.2.7. 查询设备单个或部分属性指令</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/05/16</td>
<td>1.0.4</td>
<td>1、将原3.2.6 10A智能插座+USB\~3.2.8 DLT调光开关,移至3.2.8\~3.2.10； 2、3.2.2 添加总控开关参数Switch_All； 3、3.2.8添加总控开关参数SwitchMultiple_All； 4、添加3.2.6 辅控窗帘开关； 5、添加2.2.7 开合帘电机； 6、添加3.2.11 新风控制器 7、添加3.2.12 温控器(电地暖/水地暖) 8、添加3.2.13 门磁 9、添加3.2.14 水浸探测器 10、添加3.2.15红外感应器(壁挂式) 11、添加3.2.16烟雾报警器 12、添加3.2.17 气体探测器 13、添加3.2.18 PM2.5温湿度传感器(桌面式) 14、添加3.2.19VOC温湿度PM2.5传感器(墙装式)</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/05/17</td>
<td>1.0.5</td>
<td>1、修改3.1标题为设备基本属性及说明，添加基本属性3.1.1 2、添加3.2.20 遥控器(紧急按钮) 3、添加3.2.21声光报警器 4、添加3.2.22智能云锁 5、添加3.2.23 温控器中央空调（一路空调温控器） 6、先修改了附录1中demo</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/05/24</td>
<td>1.0.6</td>
<td>添加2.2.8恢复出厂设置指令； 添加2.3.7恢复出厂设置上报； 添加3.1.2 网关属性PermitJoining；</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/05/25</td>
<td>1.0.7</td>
<td>1、3.2.10 修改参数“Luminace”为“Luminance”; 2、2.1节 Type 添加“CooINFO”； 3、添加2.2.9节，查询网关COO网络信息指令； 4、 添加2.3.8节，COO网络信息上报； 5、3.1.2节添加参数上报示例</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/05/31</td>
<td>1.0.8</td>
<td>1、设备ModelId与设备类型对照表-添加照度传感器； 2、添加3.2.24 照度传感器</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/06/05</td>
<td>1.0.9</td>
<td>1、添加2.2.10查询指定设备网络信息； 2、添加2.2.11查询指定设备的子节点； 3、2.3.9添加邻居信息上报； 4、2.3.10添加子节点信息上报； 5、2.1 添加类型Type:NeighborInfo 和ChildrenInfo</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/06/06</td>
<td>1.0.10</td>
<td>1、添加3.2.26红外幕帘探测器（U86版）</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/06/27</td>
<td>1.0.11</td>
<td>1、添加3.2.27环境传感器(桌面式)； 2、添加3.2.28(墙面式)；</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/07/10</td>
<td>1.0.12</td>
<td>1、添加1、2、3位轻触多控开关的翻转指令</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/08/07</td>
<td>1.0.13</td>
<td>1、添加3.2.29多路空调协议转换器</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/09/12</td>
<td>1.0.14</td>
<td>1、添加3.2.30Zigbee调光调色灯具 2、添加3.2.31 Zigbee调光调色开关 3、添加3.2.32 人体感应传感器 3、添加4 ZHA标准辅控开关操作指令及上报 4、添加5 管理分组</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/09/13</td>
<td>1.0.15</td>
<td>1、3.2.22 取消参数LockAlarm=2;</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/09/14</td>
<td>1.1.0</td>
<td>1、添加6组播指令</td>
<td></td>
</tr>
<tr>
<td>2018/09/17</td>
<td>1.1.1</td>
<td>1、调整原6组播指令序号为》7组播指令； 2、添加6管理场景指令 3、添加2.2.12 查询网关COO版本信息； 4、添加2.3.11 COO版本信息上报；</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/09/19</td>
<td>1.1.2</td>
<td>1、添加Q\&A;</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/09/21</td>
<td>1.1.3</td>
<td>1、修改3.2.31Zigbee调光调色开关使用方法-修改下发分组号为开关的地址后4位；</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/09/25</td>
<td>1.1.4</td>
<td>1、添加8.空调温控器面板与485多路空调协议转换器的绑定</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/09/26</td>
<td>1.1.5</td>
<td>1、添加附录1 图片版场景开关的场景图片编号说明</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/10/15</td>
<td>1.1.6</td>
<td>1、添加2.3.12 未知设备入网信息上报</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/11/06</td>
<td>1.1.7</td>
<td>1、添加3.2.33 PM25传感器U86版； 2、添加3.2.34 1路后沿相控调光模块(旁装式)； 3、添加3.2.35 1路0-10V调光模块(旁装式) 4、添加3.2.36 1路5A开关模块02(旁装式) 5、添加3.2.37 1路LED亮度色温调节驱动器(旁装式)(PWM)</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/11/07</td>
<td>1.1.8</td>
<td>1、添加2.2.13开启/关闭子设备状态参数重复上报指令</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/11/09</td>
<td>1.1.9</td>
<td>1、添加第10节 网关签名指令； 2、添加3.2.38 直流电机控制模块（旁装式HY0075） 3、修改3.2.5 窗帘工作模式名称CurrentMode为RunMode</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/11/13</td>
<td>1.1.10</td>
<td>1、3.2.38节增加风雨传感器功能参数; 2、添加2.2.13查询MCU版本号信息(需要设备支持)</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/11/14</td>
<td>1.2.0</td>
<td>1、添加3.2.39人体红外传感器(HY0027)； 2、添加3.2.40烟雾传感器传感器(HY0024)； 3、添加3.2.41甲烷气体探测器(HY0022)</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/11/15</td>
<td>1.2.1</td>
<td>1、添加3.2.42 门磁传感器HY0093; 2、添加3.2.43 非计量10A插座0a25a1; 3、添加3.2.44 非计量16A插座0a25a2;</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/11/16</td>
<td>1.2.2</td>
<td>1、添加2.2.14查询librexgatewaysdk.so 版本号; 2、添加2.3.13 librexgatewaysdk.so 版本号上报</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/11/19</td>
<td>1.2.3</td>
<td>1、添加3.2.45 开合帘电机（威士达） 2、添加3.2.46 DLT液晶调光器； 3、修改附录2 鸿雁智能主机快速开发SDK使用说明</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/11/26</td>
<td>1.2.4</td>
<td>1、修改3.2.38标题为：24V直流窗帘电机控制模块； 2、修改3.2.38 “使能风雨传感器”参数名为WindRainSensor 3、添加3.2.47 12V直流窗帘电机控制模块</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/11/27</td>
<td>1.2.5</td>
<td>1、修改3.2.38 开合度参数CurtainPosition :0对应全关，100对应全开</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/11/28</td>
<td>1.2.6</td>
<td>1、添加3.2.48节双向红外幕帘</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/12/18</td>
<td>1.2.7</td>
<td>1、添加3.2.49 单路电动窗帘驱动器; 2、修改4.2参数：DstEndpointId为DstEndpoint 3、修改4.4参数：SrctEndpoint、DstEndpoint为SrctEndpointId、DstEndpointId</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/12/21</td>
<td>1.2.8</td>
<td>1、添加3.2.50 双路窗帘开关； 2、3.2.43 非计量10A插座，添加童锁开关参数； 2、3.2.44 非计量16A插座，添加童锁开关参数；</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/12/21</td>
<td>1.2.9</td>
<td>1、修改6管理场景 ，增加参数Endpoiint</td>
<td>陶龙</td>
</tr>
<tr>
<td>2018/12/29</td>
<td>1.2.10</td>
<td>1、添加3.2.51紧急按钮</td>
<td>陶龙</td>
</tr>
<tr>
<td>2019/01/21</td>
<td>1.2.11</td>
<td>1、添加CO/燃气传感器</td>
<td>陶龙</td>
</tr>
<tr>
<td>2019/01/23</td>
<td>1.2.12</td>
<td>1、添加3.2.53 天际系列：三位开关</td>
<td>陶龙</td>
</tr>
<tr>
<td>2019/02/19</td>
<td>1.2.12</td>
<td>1、修改3.2.51 紧急按钮：按键值可查询</td>
<td>陶龙</td>
</tr>
<tr>
<td>2019/02/23</td>
<td>1.2.13</td>
<td>1、增加3.2.54、3.2.55天际系列1、2位开关</td>
<td>陶龙</td>
</tr>
<tr>
<td>2019/03/04</td>
<td>1.3.0</td>
<td>1、添加3.2.56 天际系列 10A、16A计量插座； 2、添加3.2.57 天际系列 10A USB计量插座；</td>
<td>陶龙</td>
</tr>
<tr>
<td>2019/03/11</td>
<td>1.3.1</td>
<td>1、删除3.2.56 天际系列 10A、16A计量插座、3.2.57 天际系列 10A USB计量插座的 过压保护、过流保护参数的控制功能，仅保留上报； 2、 修改3.2.56 天际系列 10A、16A计量插座、3.2.57 天际系列 10A USB计量插座的 电量清零操作，仅允许下发参数值1；</td>
<td>陶龙</td>
</tr>
<tr>
<td>2019/03/12</td>
<td>1.3.2</td>
<td>1、添加3.2.59 空调地暖一体面板</td>
<td>陶龙</td>
</tr>
<tr>
<td>2019/3/13</td>
<td>1.3.3</td>
<td>添加第11章本地场景相关指令</td>
<td>隋仲秋</td>
</tr>
<tr>
<td>2019/3/15</td>
<td>1.3.4</td>
<td>添加删除所有场景、删除所有动作、删除所有条件、删除所有面板绑定</td>
<td>隋仲秋</td>
</tr>
<tr>
<td>2019/3/19</td>
<td>1.3.5</td>
<td>当场景动作是激活场景时，添加了场景使能配置项</td>
<td>隋仲秋</td>
</tr>
<tr>
<td>2019/03/19</td>
<td>1.3.6</td>
<td>1、修改3.2.59 空调地暖一体面板参数 将CurrentTemp修改为CurrentTemperature_1; 将WindSpeed修改为WindSpeed_1; 将WorkMode修改为WorkMode_1;</td>
<td>陶龙</td>
</tr>
<tr>
<td>2019/3/22</td>
<td>1.3.7</td>
<td>1、修改附录2中，关于本地场景接口的调用顺序</td>
<td>陶龙</td>
</tr>
<tr>
<td>2019/3/27</td>
<td>1.3.8</td>
<td>1、添加2.2.16 透传自定义数据下发说明; 2、添加2.3.14 透传自定义数据上报说明</td>
<td>陶龙</td>
</tr>
<tr>
<td>2019/4/2</td>
<td>1.3.9</td>
<td>1、11.2节 修改 场景绑定协议； 2、修改3.2.50 节，第1路、第2路窗帘操作属性为可上报的事件； 3、修改3.2.59节，窗帘操作属性为可上报的事件；</td>
<td>隋仲秋 陶龙</td>
</tr>
<tr>
<td>2019/4/12</td>
<td>1.4.0</td>
<td>1、3.2.13 门磁感应器, 3.2.14水浸探测器，3.2.15红外感应器,3.2.16烟雾报警器,3.2.20遥控器（紧急按钮）参数表，统一添加<em>低电量报警参数；</em> 2、3.2.21 声光报警器，添加防撬报警参数； 3、添加Q&A C本地场景指令如何使用</td>
<td>陶龙 隋仲秋</td>
</tr>
<tr>
<td>2019/07/04</td>
<td>1.4.1</td>
<td>1、3.2.56，3.3.57 修改电量记录清零指令上报规则，下发1后，先上报1，再上报为0； 2、添加3.2.62 16A智能插座（计量/红外）</td>
<td>陶龙</td>
</tr>
<tr>
<td>2019/07/12</td>
<td>1.4.2</td>
<td>1、添加3.2.63 水浸探测器B款</td>
<td>陶龙</td>
</tr>
<tr>
<td>2019/07/15</td>
<td>1.4.3</td>
<td>1、添加3.2.64 双路窗帘控制模块（HY1029） 2、添加3.2.65 双路窗帘控制模块（HY1028）</td>
<td>陶龙</td>
</tr>
<tr>
<td>2019/07/30</td>
<td>1.4.4</td>
<td>1、添加3.2.66,3.2.67.3.2.68 123位智能开关模块 ; 2、添加3.2.69, 3.2.70 单/双键无线开关</td>
<td>陶龙</td>
</tr>
<tr>
<td>2019/8/15</td>
<td>1.4.5</td>
<td>1、添加3.2.71 温湿度气压传感器</td>
<td>陶龙</td>
</tr>
<tr>
<td>2019/9/6</td>
<td>1.4.6</td>
<td>1、修改第5节，管理分组指令； 2、修改第7节，组播指令； 3、修改3.2.5，添加窗帘开关位置参数； 4、添加3.2.72，高频插卡取电、低频插卡取电</td>
<td>陶龙</td>
</tr>
<tr>
<td>2019/10/09</td>
<td>1.4.7</td>
<td>1、添加2.2.17 设置/查询子设备名称； 2、2.3.5 设备列表上报添加 设备名称Name; 3、上报信息均添加 “GatewayId”字段，</td>
<td>陶龙</td>
</tr>
<tr>
<td>2019/10/29</td>
<td>1.4.8</td>
<td>1、作废本地场景面板绑定相关指令。 2、本地场景动作，添加“函数回调”类型。 3、时间条件，添加触发类型、触发周期功能。 4、事件条件，添加触发类型，持续时间功能。</td>
<td>隋仲秋</td>
</tr>
<tr>
<td>2019/11/05</td>
<td>1.4.9</td>
<td>添加3.2.74 智镜/全面屏/触控屏 HY0134</td>
<td>陶龙</td>
</tr>
</tbody>
</table>
<hr />
<h2>版权声明</h2>
<p>&nbsp; &nbsp; &nbsp; &nbsp;本文件所包含的所有信息均为杭州鸿雁智能科技有限公司（以下简称“鸿雁”或“本公司”）版权所有。未经本公司书面许可，不得向本公司雇员、代理商、合作方或授权许可方以外的任何第三方泄露本文档内容，不得以任何形式擅自复制或传播本文档。若使用者违反本版权保护的约定，本公司有权追究使用者由此产生的法律责任。</p>
<h2>免责声明</h2>
<p>&nbsp; &nbsp; &nbsp; &nbsp;本公司将竭尽所能确保所提供信息的完整性与准确性，但对所发布之档不提供任何明确或隐含的赔偿或担保，并保留因产品更新或更正错误时修订本文档且无需通知的权利。</p>
<h2>联系我们</h2>
<p>杭州鸿雁智能科技有限公司
地址：浙江省杭州市余杭区五常大道138号鸿雁工业园区</p></div></div><h2>2.2、2.1 设备ModelId与设备类型对照表</h2><div style="margin-left:20px;"><h3>2.2.1、设备ModelId与设备类型对照表</h3><div style="margin-left:0px;"><ul>
<li>下表为Zigbee子设备的设备类型唯一码ModelId与实际设备名称对照表。开发者可根据上报的ModelId判断设备类型。</li>
</ul>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th><strong>序号</strong></th>
<th><strong>ModelId</strong></th>
<th><strong>设备类型</strong></th>
<th><strong>对应产品型号</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>500c32 HY0030</td>
<td>一位轻触多控智能开关</td>
<td>U86K11ND6-ZD(AL) U86K11ND6-ZD(HA)</td>
</tr>
<tr>
<td>2</td>
<td>500c33 HY0031</td>
<td>两位轻触多控智能开关</td>
<td>U86K21ND6-ZD(AL) U86K21ND6-ZD(HA)</td>
</tr>
<tr>
<td>3</td>
<td>500c35 HY0032</td>
<td>三位轻触多控智能开关</td>
<td>U86K31ND6-ZD(AL) U86K31ND6-ZD(HA)</td>
</tr>
<tr>
<td>4</td>
<td>5f0cf1</td>
<td>一位轻触辅控智能开关（阿里版）</td>
<td>U86K1ND-ZD(AL)</td>
</tr>
<tr>
<td>5</td>
<td>5f0cf3</td>
<td>两位轻触辅控智能开关（阿里版）</td>
<td>U86K2ND-ZD(AL)</td>
</tr>
<tr>
<td>6</td>
<td>5f0cf2</td>
<td>三位轻触辅控智能开关（阿里版）</td>
<td>U86K3ND-ZD(AL)</td>
</tr>
<tr>
<td>7</td>
<td>040c3a HY0039</td>
<td>窗帘开关</td>
<td>U86KCL150-ZD(AL)</td>
</tr>
<tr>
<td>8</td>
<td>5f0d13</td>
<td>辅控窗帘开关（阿里版）</td>
<td>U86KCLN-ZD(AL)</td>
</tr>
<tr>
<td>9</td>
<td>5f0c3b</td>
<td>液晶场景开关（阿里版）</td>
<td></td>
</tr>
<tr>
<td>10</td>
<td>0a0c3c HY0042</td>
<td>10A智能插座+USB</td>
<td>U86Z223A10-ZJU(AL) U86Z223A10-ZJU(HA)</td>
</tr>
<tr>
<td>11</td>
<td>0a0c55 HY0043</td>
<td>16A智能插座</td>
<td>U86Z13A16-ZJH(AL) U86Z13A16-ZJH(HA)</td>
</tr>
<tr>
<td>12</td>
<td>090cd5</td>
<td>DLT调光调色开关</td>
<td>必须配合鸿雁灯具使用 U86KTGS150-ZX(AL) U86KTGS150-ZX(HA)</td>
</tr>
<tr>
<td>13</td>
<td>330dd8</td>
<td>门磁感应器</td>
<td>HO-09F(AL)</td>
</tr>
<tr>
<td>14</td>
<td>1a0e0e</td>
<td>红外感应器(电池版)</td>
<td>LH-990F(AL)</td>
</tr>
<tr>
<td>15</td>
<td>120e0f</td>
<td>气体探测器</td>
<td>LH-89F(AL)</td>
</tr>
<tr>
<td>16</td>
<td>670e10</td>
<td>烟雾探测器</td>
<td>LH-99F(AL)</td>
</tr>
<tr>
<td>17</td>
<td>5d0e11</td>
<td>水浸探测器</td>
<td>LH-69F(AL)</td>
</tr>
<tr>
<td>18</td>
<td>4a0e0d</td>
<td>遥控器(紧急按钮)</td>
<td>LH-B910(AL)</td>
</tr>
<tr>
<td>19</td>
<td>5c0e1e RH3042</td>
<td>红外幕帘探测器(U86版)</td>
<td>LH-915DZB(AL) LH-915DZB(HA)</td>
</tr>
<tr>
<td>20</td>
<td>5b0e12</td>
<td>声光报警器</td>
<td>HC-109ZB(AL)</td>
</tr>
<tr>
<td>21</td>
<td>01112b</td>
<td>PM2.5温湿度传感器(桌面式)</td>
<td>PMT100(AL)</td>
</tr>
<tr>
<td>22</td>
<td>5c1375</td>
<td>红外幕帘探测器(电池)</td>
<td>HS1MS-C(AL)</td>
</tr>
<tr>
<td>23</td>
<td>0212c3 HY0080</td>
<td>空调温控器</td>
<td>U86KWF-ZPSJ(AL) U86KWF-ZPKT(AL) U86KWF-ZPKT(HA)</td>
</tr>
<tr>
<td>24</td>
<td>021333</td>
<td>空调转换器(一对6，多通道的温控器)</td>
<td></td>
</tr>
<tr>
<td>25</td>
<td>0218b7</td>
<td>485多路空调协议转换器</td>
<td>PMODH-5209</td>
</tr>
<tr>
<td>26</td>
<td>5e0edb HY0081</td>
<td>温控器水地暖</td>
<td>U86KWF-ZPDN(AL)</td>
</tr>
<tr>
<td>27</td>
<td>5e0edc HY0081</td>
<td>温控器电地暖</td>
<td>U86KWF3000-ZP(AL)</td>
</tr>
<tr>
<td>28</td>
<td>280eda HY0082</td>
<td>新风控制器</td>
<td>U86KF-ZP(AL) U86KF-ZP</td>
</tr>
<tr>
<td>29</td>
<td>041580 DY0001</td>
<td>开合帘电机</td>
<td>IHW1213(AL)</td>
</tr>
<tr>
<td>30</td>
<td>5f1367</td>
<td>九场景遥控器</td>
<td>IHB9210(AL)</td>
</tr>
<tr>
<td>31</td>
<td>14136c</td>
<td>智能门锁</td>
<td>IHM1203(AL)</td>
</tr>
<tr>
<td>32</td>
<td>801a07</td>
<td>照度传感器</td>
<td>IHG8210AL</td>
</tr>
<tr>
<td>33</td>
<td>012608</td>
<td>环境传感器(桌面式)</td>
<td></td>
</tr>
<tr>
<td>34</td>
<td>012609</td>
<td>环境传感器(面板式)</td>
<td></td>
</tr>
<tr>
<td>35</td>
<td>HY0036</td>
<td>一位轻触辅控智能开关(ZHA标准版)</td>
<td>U86K1ND-ZD(HA)</td>
</tr>
<tr>
<td>36</td>
<td>HY0037</td>
<td>二位轻触辅控智能开关(ZHA标准版)</td>
<td>U86K2ND-ZD(HA)</td>
</tr>
<tr>
<td>37</td>
<td>HY0038</td>
<td>三位轻触辅控智能开关(ZHA标准版)</td>
<td>U86K3ND-ZD(HA)</td>
</tr>
<tr>
<td>38</td>
<td>HY0040</td>
<td>辅控窗帘开关(ZHA标准版)</td>
<td>U86KCLN-ZD(HA)</td>
</tr>
<tr>
<td>39</td>
<td>YG0001 HY1004 HY1005</td>
<td>Zigbee调光调色灯具</td>
<td>两个设备必须配合使用</td>
</tr>
<tr>
<td>40</td>
<td>HY100  HY0091</td>
<td>Zigbee调光调色开关</td>
<td></td>
</tr>
<tr>
<td>41</td>
<td>1a14f4</td>
<td>人体感应传感器（86墙面型）</td>
<td>U86CGQ-ZHY(AL) U86CGQ-ZHY</td>
</tr>
<tr>
<td>42</td>
<td>HY0100</td>
<td>Zigbee无线中继器</td>
<td>IHA5211AL</td>
</tr>
<tr>
<td>43</td>
<td>012860</td>
<td>PM25传感器U86版</td>
<td></td>
</tr>
<tr>
<td>44</td>
<td>090f79 或者 HY0070</td>
<td>1路后沿相控调光模块(旁装式)</td>
<td>IHC2234(AL)</td>
</tr>
<tr>
<td>45</td>
<td>090f7a或者 HY0071</td>
<td>1路0-10V调光模块(旁装式)</td>
<td>IHC2235(AL)</td>
</tr>
<tr>
<td>46</td>
<td>500f78或者 HY0072</td>
<td>1路5A开关模块02(旁装式)</td>
<td>IHC1234(AL)</td>
</tr>
<tr>
<td>47</td>
<td>090f77或者 HY0073</td>
<td>1路LED亮度色温调节驱动器(旁装式)(PWM)</td>
<td>IHC2233(AL)</td>
</tr>
<tr>
<td>50</td>
<td>HY0075</td>
<td>直流电机控制模块（旁装式）</td>
<td>IHC2251AL</td>
</tr>
<tr>
<td>51</td>
<td>HY0027</td>
<td>人体红外传感器</td>
<td></td>
</tr>
<tr>
<td>52</td>
<td>HY0024</td>
<td>烟雾传感器</td>
<td></td>
</tr>
<tr>
<td>53</td>
<td>HY0022</td>
<td>甲烷气体探测器</td>
<td></td>
</tr>
<tr>
<td>54</td>
<td>HY0093</td>
<td>门磁传感器</td>
<td></td>
</tr>
<tr>
<td>55</td>
<td>0a25a1</td>
<td>非计量10A插座</td>
<td>U86Z223A10-Z(AL)</td>
</tr>
<tr>
<td>56</td>
<td>0a25a2</td>
<td>非计量16A插座</td>
<td>U86Z13A16-Z(AL)</td>
</tr>
<tr>
<td>57</td>
<td>041580</td>
<td>开合帘电机(威仕达)</td>
<td>IHW1215(AL)</td>
</tr>
<tr>
<td>58</td>
<td>09223f HY0051</td>
<td>DLT液晶调光器</td>
<td>U86KTGS150-ZXP(AL) U86KTGS150-ZXP(HA)</td>
</tr>
<tr>
<td>59</td>
<td>HY0023</td>
<td>双向红外幕帘</td>
<td></td>
</tr>
<tr>
<td>60</td>
<td>0419a8或者 HY0074</td>
<td>单路电动窗帘驱动器(旁装式)</td>
<td>IHC2227AL</td>
</tr>
<tr>
<td>61</td>
<td>HY0099</td>
<td>双路窗帘开关</td>
<td>U86KCL2150-ZD</td>
</tr>
<tr>
<td>62</td>
<td>HY0026或者 79159d</td>
<td>紧急按钮（U86）</td>
<td>U86KJB-ZD(AL)</td>
</tr>
<tr>
<td>63</td>
<td>HY0045</td>
<td>CO/燃气传感器</td>
<td></td>
</tr>
<tr>
<td>64</td>
<td>HY0097</td>
<td>天际系列三位开关</td>
<td></td>
</tr>
<tr>
<td>65</td>
<td>HY0095</td>
<td>天际系列二位开关</td>
<td></td>
</tr>
<tr>
<td>66</td>
<td>HY0094</td>
<td>天际系列一位开关</td>
<td></td>
</tr>
<tr>
<td>67</td>
<td>HY0104</td>
<td>天际系列10A计量插座</td>
<td></td>
</tr>
<tr>
<td>68</td>
<td>HY0105</td>
<td>天际系列10A USB计量插座</td>
<td></td>
</tr>
<tr>
<td>69</td>
<td>HY0106</td>
<td>天际系列16A计量插座</td>
<td></td>
</tr>
<tr>
<td>70</td>
<td>HY0098</td>
<td>天际系列 窗帘开关</td>
<td></td>
</tr>
<tr>
<td>71</td>
<td>HY0113</td>
<td>空调地暖一体面板</td>
<td></td>
</tr>
<tr>
<td>72</td>
<td>HY0102</td>
<td>天际系列二位双控开关</td>
<td></td>
</tr>
<tr>
<td>73</td>
<td>HY0130</td>
<td>红外转发器</td>
<td></td>
</tr>
<tr>
<td>74</td>
<td>HY0133</td>
<td>16A智能插座（红外/计量）</td>
<td></td>
</tr>
<tr>
<td>75</td>
<td>HY0124</td>
<td>水浸探测器B款</td>
<td></td>
</tr>
<tr>
<td>76</td>
<td>HY1028</td>
<td>IHA5213双路窗帘模块(雾化功能）</td>
<td></td>
</tr>
<tr>
<td>77</td>
<td>HY1029</td>
<td>IHA5212双路窗帘模块(位置功能）</td>
<td></td>
</tr>
<tr>
<td>78</td>
<td>HY0121</td>
<td>1位智能开关模块</td>
<td></td>
</tr>
<tr>
<td>79</td>
<td>HY0122</td>
<td>2位智能开关模块</td>
<td></td>
</tr>
<tr>
<td>80</td>
<td>HY0107</td>
<td>3位智能开关模块</td>
<td></td>
</tr>
<tr>
<td>81</td>
<td>HY0125</td>
<td>单键无线开关</td>
<td></td>
</tr>
<tr>
<td>82</td>
<td>HY0126</td>
<td>双键无线开关</td>
<td></td>
</tr>
<tr>
<td>83</td>
<td>HY0123</td>
<td>温湿度气压传感器</td>
<td></td>
</tr>
<tr>
<td>84</td>
<td>HY0132</td>
<td>低频插卡取电设备</td>
<td></td>
</tr>
<tr>
<td>85</td>
<td>HY0136</td>
<td>高频插卡取电设备</td>
<td></td>
</tr>
<tr>
<td>86</td>
<td>HY0127</td>
<td>无线按钮</td>
<td></td>
</tr>
<tr>
<td>87</td>
<td>HY0134</td>
<td>智镜/全面屏/触控屏</td>
<td></td>
</tr>
</tbody>
</table></div></div><h2>2.3、2.2 控制指令和设备上报指令</h2><div style="margin-left:20px;"><h2>2.3.1、2.2.1 基本格式</h2><div style="margin-left:0px;"><h3>2.3.1.1、基本格式</h3><div style="margin-left:30px;"><ul>
<li>统一采用JSON格式，对象名称采用单词首字母大写的统一格式</li>
</ul>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"； 上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>下发"Dispatch"：</strong>  设备控制："Ctrl"；允许设备入网："Add"；<br />设备删除："Delete"；<br />查询设备属性："Attribute"；<br />查询设备全部属性:"DevAttri";<br />获取设备列表："DevList";<br />查询邻居信息："NeighborInfo";<br />子节点信息："ChildrenInfo"；<br />恢复出厂设置:"ReFactory"；<br />允许重复上报参数:"RepeatReport"；<br />设置签名指令:"SetSig"；<br /> 查询签名指令:"GetSig"；<br />修改/查询子设备名称：SubName <br /><strong>上报"Report"：</strong> <br />设备注册上报："Register"；<br />设备注销上报："UnRegister"；<br /> 设备在线状态上报, "OnOff"；<br />设备属性上报："Attribute"；<br />设备全部属性上报："DevAttri";<br />设备列表上报："DevList"；<br />设备事件上报："Event"；<br />恢复出厂设置上报："ReFactory"；<br />COO网络信息上报："CooInfo"；<br /> 邻居信息上报："NeighborInfo";<br />子节点信息上报："ChildrenInfo"；<br />设置签名结果上报: "SetSig"；<br />查询签名结果上报: "GetSig"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>鸿雁网关的mac</td>
<td>字符串"%s", 长度16</td>
<td><strong>Command=Report时有效，仅用于上报</strong></td>
</tr>
<tr>
<td>Data ：</td>
<td>数据表</td>
<td>数据类型</td>
<td></td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>注:网关ID为: <strong>"0000000000000000"</strong></td>
</tr>
<tr>
<td>Data. ModelId</td>
<td>子设备 ModelId</td>
<td>字符串"%s", 长度6</td>
<td>1、改参数，启用范围： 设备注册上报：Register <br /> 设备属性上报："Attribute"；<br /> 查询设备全部属性:"DevAttri";<br /> 设备事件上报："Event"；<br /> 设备在线状态上报:"OnOff"；<br />2、若为网关则为”000000”</td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性名称</td>
<td>字符串"%s",</td>
<td>具体查看设备TRD表格</td>
</tr>
<tr>
<td>Data.Value</td>
<td>属性值</td>
<td>字符串"%s",</td>
<td>具体查看设备TRD表格</td>
</tr>
</tbody>
</table>
<hr />
<p>下发控制指令JSON字符串示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<hr />
<p>查询设备全部属性JSON字符串示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch ",
    "FrameNumber":"00",
    "Type":"DevAttri",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"All"
        }
    ]
}
</code></pre></table>
<hr />
<p>上报状态JSON字符串示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
           "ModelId": "8298294"
            "Key":"Switch",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<hr /></div></div><h2>2.3.2、2.2.2公共控制和查询指令</h2><div style="margin-left:0px;"><h3>2.3.2.1、2.2.2.1允许设备入网指令(网关指令)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备属性上报："Add"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>网关ID：16个0</td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性名称</td>
<td></td>
<td>"Time"</td>
</tr>
<tr>
<td>Data.Value</td>
<td>属性值</td>
<td>字符串"%s"</td>
<td><strong>范围0\~255:<br /> 0:不允许入网;<br />10~254：允许入网秒数，单位秒;<br />255：允许永久入网</strong></td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>允许设备入网指令(网关指令)Json数据示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Add",
    "Data":[
            {
             "DeviceId":"0000000000000000",//网关地址16个0
             "Key":"Time",
             "Value":"255"                //允许永久入网
            }
          ]
}
</code></pre></table>
<p>注：建议入网时间设定为120秒,超时后网关会自动关闭入网窗口，防止未允许设备加入网络。</p></div><h3>2.3.2.2、2.2.2.2获取设备列表(网关指令)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>"DevList"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>终端Zigbee子设备ID</td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性值</td>
<td>字符串"%s"</td>
<td><strong>"DeviceList"</strong></td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>获取设备列表JSON数据示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command": "Dispatch",
    "FrameNumber":"00",
    "Type":"DevList",
    "Data":[
        {
            "DeviceId":"0000000000000000",//网关ID:16个0
            "Key":"DeviceList"
        }
]
}
</code></pre></table></div><h3>2.3.2.3、2.2.2.3注销设备指令 (网关指令)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备属性上报："Delete"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>终端Zigbee设备ID</td>
</tr>
</tbody>
</table>
<hr />
<p>注销/删除设备JSON数据示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Delete",
    "Data":[
             {
                "DeviceId":"123456787654321"//子设备ID
             }
         ]
}
</code></pre></table>
<p><strong>注：</strong>
1、该指令下发后，子设备注册信息将从网关数据库删除，网关不再上报该子设备状态信息；
2、子设备接收到注销指令后，退出zigbee网关；
3、电池类子设备若处于休眠状态，可能无法退出zigbee网络，用户可通过触发子设备配网按键退网。</p></div><h3>2.3.2.4、2.2.2.4 获取网关COO的MAC指令 (网关指令)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备属性上报："Query"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>网关ID:16个0 ：“0000000000000000”</td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性名称</td>
<td>字符串"%s",</td>
<td>"CooMac"</td>
</tr>
</tbody>
</table>
<hr />
<p>获取网关COO的MAC  JSON数据示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Attribute",
    "Data":[
            {
            "DeviceId":"0000000000000000",
            "Key":"CooMac"
            }
          ]
}
</code></pre></table></div><h3>2.3.2.5、2.2.2.5获取设备当前所有属性或状态指令（子设备控制指令）</h3><div style="margin-left:30px;"><p>注：
1、获取子设备属性或状态指令，该指令将通过ZigBee通道下发给对应查询的子设备，具体属性或状态值将通过"Type":"Attribute"，异步上报。
2、若被查询设备有多个属性值，则<strong>每个属性值将单独上报</strong>；
3、当网关不允许状态重复上报时（参看 <em>控制指令和设备上报指令-公共控制和查询指令-开启/关闭子设备状态参数重复上报指令</em> ），若设备上报的状态与网关内存中保存的状态一致，该状态将不会上报，必须再次调用查询内存指令获取（参看<em> 控制指令和设备上报指令-公共控制和查询指令-查询设备所有属性指令</em> 和 <em>控制指令和设备上报指令-公共控制和查询指令-查询设备单个或部分属性指令</em> ）设备状态</p>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"Ctrl"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>仅支持子设备</td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性名称</td>
<td>字符串"%s",</td>
<td><strong>"GetStatus"</strong></td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>获取子设备当前所有属性或状态指令  JSON数据示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
           {
             "DeviceId":"1234567887654321",
              "Key":"GetStatus",
            }
          ]
}
</code></pre></table>
<p>属性上报JSON格式示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">若查询的为二位轻触多控开关，两路开关的状态将分为两条上报：
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
            {
              "DeviceId":"123456787654310",
              "ModelId":"500c33",
              "Key":"Switch_1",
              "Value":"1"
            }
          ]
}

{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
           {
            "DeviceId":"123456787654310",
            "ModelId":"500c33",
            "Key":"Switch_2",
            "Value":"2"
           }
          ]
}
</code></pre></table></div><h3>2.3.2.6、2.2.2.6查询设备所有属性指令</h3><div style="margin-left:30px;"><p><strong>注：</strong>
1、查询子设备所有属性指令， 该指令仅查询网关中存储的已入网子设备的属性值，属于网关内存查询。
2、若被查询设备有多个属性值，则设备的全部属性上报将通过<strong>一条JSON</strong>返回，此时"Type":"DevAttri"。
3、子设备会周期五分钟的上报属性或状态值。网关启动后，若立刻通过该接口查询子设备的属性，上报的属性值可能仍为默认值0。后续子设备会通过周期上报更新网关中存储的属性或状态值。</p>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>"<strong>DevAttri</strong>"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>1、支持网关属性查询， ID为16个0： “0000000000000000” <br />2、支持子设备所有属性查询；</td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性名称</td>
<td>字符串"%s",</td>
<td><strong>"All"</strong></td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>查询子设备所有属性指令  JSON数据示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":" DevAttri ",
    "Data":[
             {
               "DeviceId":"1234567887654321",
               "Key":"All"
             }
           ]
}
</code></pre></table>
<p>属性上报JSON格式示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">若查询的为二位轻触多控开关，两路开关的状态将分为两条上报：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909"
    "Type":" DevAttri ",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"500c33",
            "Key":"Switch_1",
            "Value":"1"
        }
        {
            "DeviceId":"123456787654310",
            "ModelId":"500c33",
            "Key":"Switch_2",
            "Value":"1"
        }

]
}
</code></pre></table>
<p>查询网关的所有属性：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":" DevAttri ",
    "Data":[
        {
            "DeviceId":"0000000000000000",
          "Key":"All",
             }
]
}
</code></pre></table>
<p>网关所有属性上报：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Report",
    "FrameNumber":"00",
    "Type":" DevAttri ",
    "Data":[
        {
            "DeviceId":"0000000000000000",
         "ModelId":"000000"
          "Key":"PermitJoining",//网关入网状态，1-当前允许入网，0不允许入网
            "Value":"1"
             }
        {
            "DeviceId":"0000000000000000",
         "ModelId":"000000"
            "Key":" FirmwareVersion",  //网关固件版本，默认为1.0.0
            "Value":"1.0.0"
             }
        {
            "DeviceId":"0000000000000000",
            "ModelId":"000000"
            "Key":"SoftVersion",  //hydevicemanagesdk.so版本
            "Value":"1.0.0"
             }
]
}
</code></pre></table></div><h3>2.3.2.7、2.2.2.7查询设备单个或部分属性指令</h3><div style="margin-left:30px;"><p><strong>注：</strong>
1、查询子设备单个或部分属性指令， 该指令仅查询网关中存储的已入网子设备的属性值，属于网关内存查询。
2、若被查询设备有多个属性值，则设备的属性上报将通过<strong>一条JSON</strong>返回，此时"Type":"Attribute"
3、网关启动后，若立刻通过该接口查询子设备的属性，上报的属性值可能仍为默认值0，后续子设备会通过周期上报更新网关中存储的属性或状态值。220V供电子设备会周期五分钟的上报属性或状态值，电池类设备周期半小时上报。</p>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"Attribute";</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>DataDeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>网关ID:16个0 ：“0000000000000000”</td>
</tr>
<tr>
<td>DataKey</td>
<td>属性名称</td>
<td>字符串"%s",</td>
<td>具体设备对应属性名称，参看 <em>子设备属性</em> 一节</td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>查询设备单个属性，示例JSON：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":" Attribute ",
    "Data":[
        {
            "DeviceId":"1234567887654321",
          "Key":"Switch_1",
             }
]
}
</code></pre></table>
<p>查询设备单个属性的上报，示例JSON：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" Attribute ",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"500c33",
            "Key":"Switch_1",
            "Value":"1"
        }
]
}
</code></pre></table>
<p>查询设备部分属性，示例JSON：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">查询三位轻触多控开关的第一路和第三路开关状态：

{
    "Command":"Dispath",
    "FrameNumber":"00",
    "Type":" Attribute ",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_1",
        }
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_2",
        }

]
}

三位轻触多控开关的第一路和第三路开关状态上报：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute ",
    "Data":[
           {
              "DeviceId":"123456787654310",
              "ModelId":"500c33",
              "Key":"Switch_1",
              "Value":"1"
          }
          {
              "DeviceId":"123456787654310",
              "ModelId":"500c33",
              "Key":"Switch_2",
              "Value":"1"
           }
         ]
}
</code></pre></table></div><h3>2.3.2.8、2.2.2.8 恢复出厂设置指令</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"ReFactory"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[ ]</td>
</tr>
</tbody>
</table>
<hr />
<p>恢复出场设置Json数据格式：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"ReFactory",
    "Data":[]
}
</code></pre></table></div><h3>2.3.2.9、2.2.2.9 查询网关COO网络信息指令（网关控制指令，查询信息异步返回）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>" </strong>Ctrl<strong>"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>网关ID:16个0 ：“0000000000000000”</td>
</tr>
<tr>
<td>Key</td>
<td>属性名称</td>
<td>字符串"%s",</td>
<td><strong>"GetCooInfo"</strong></td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>查询网关COO网络信息指令Json格式：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[{
            "DeviceId":"0000000000000000",
            "Key":"GetCooInfo"
           }]
}
</code></pre></table></div><h3>2.3.2.10、2.2.2.10 查询指定设备的邻居信息 </h3><div style="margin-left:30px;"><p><strong>注：</strong>查询信息异步上报</p>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"NeighborInfo"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>查询指定设备的邻居信息Json数据格式：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"NeighborInfo",
    "Data":[{
            "DeviceId":"1234567887654321"
           }]
}
</code></pre></table></div><h3>2.3.2.11、2.2.2.11查询指定设备的子节点信息</h3><div style="margin-left:30px;"><p><strong>注</strong>：查询信息异步上报</p>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报: "Dispatch"</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"ChildrenInfo"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>DataDeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>查询指定设备的子节点信息Json格式：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"ChildrenInfo",
    "Data":[{
            "DeviceId":"1234567887654321"
           }]
}
</code></pre></table></div><h3>2.3.2.12、2.2.2.12 查询网关COO版本信息</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"Attribute"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>网关ID:16个0</td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性名称</td>
<td>字符串"%s",</td>
<td><strong>"CooVer"</strong></td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>查询网关COO版本信息Json格式：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Attribute",
    "Data":[{
            "DeviceId":"0000000000000000",
            "Key":"CooVer"
           }]
}
</code></pre></table></div><h3>2.3.2.13、2.2.2.13 开启/关闭子设备状态参数重复上报指令</h3><div style="margin-left:30px;"><p><strong>注</strong>：
<strong>开启</strong>：当子设备上报的参数值与网关内存中保存的参数值一致时，<strong>允许</strong>重复上报；
<strong>关闭</strong>：当子设备上报的参数值与网关内存中保存的参数值一致时，<strong>不允许</strong>重复上报。（不涉及安防类报警事件）</p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备注册："Ctrl"</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>0000000000000000</td>
</tr>
<tr>
<td>Data.Key</td>
<td></td>
<td>字符串"%s",</td>
<td><strong>RepeatReport</strong></td>
</tr>
<tr>
<td>Data.Value</td>
<td></td>
<td>字符串"%s"</td>
<td>1：开启； 0：关闭(默认)；</td>
</tr>
</tbody>
</table>
<hr />
<p>开启/关闭子设备状态参数重复上报指令Json格式：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[{
            "DeviceId":"0000000000000000",
            "Key":"RepeatReport",
            "Value":"1"
          }]
}
</code></pre></table></div><h3>2.3.2.14、2.2.2.14 查询MCU版本号信息(需要设备支持，控制指令，异步返回)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"Ctrl"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性名称</td>
<td>字符串"%s",</td>
<td><strong>"GetMCUVersion"</strong></td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>查询MCU版本号信息(需要设备支持，控制指令，异步返回)Json格式:</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[{
            "DeviceId":"1234567887654321",
            "Key":"GetMCUVersion"
          }]
}
</code></pre></table></div><h3>2.3.2.15、2.2.2.15 查询librexgatewaysdk.so 版本号</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"Attribute"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>16个0</td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性名称</td>
<td>字符串"%s",</td>
<td><strong>"RexSDKVer"</strong></td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>查询librexgatewaysdk.so 版本号Json格式：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Attribute",
    "Data":[ {
            "DeviceId":"0000000000000000",
            "Key":"RexSDKVer"
           }]
}</code></pre></table></div><h3>2.3.2.16、2.2.2.16 透传自定义数据下发（针对红外转发设备或定制类设备）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"CustomData"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
<tr>
<td>Data.Endpoint</td>
<td>第几路</td>
<td>字符串"%s",</td>
<td>默认为"1",</td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性名称</td>
<td>字符串"%s",</td>
<td><strong>"</strong>CustomData <strong>"</strong>,</td>
</tr>
<tr>
<td>Data.Value</td>
<td>透传自定义数据</td>
<td>字符串"%s",</td>
<td>将自定义数据<strong>Base64</strong>转码后填入此处； 转码前字节最大<strong>不能超过64</strong>字节；</td>
</tr>
</tbody>
</table>
<hr />
<p>透传自定义数据下发（针对红外转发设备或定制类设备）Json格式：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
   "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"CustomData",
    "Data":[{
            "DeviceId":"1234567887654321",
            "Endpoint":"1"
            "Key":"CustomData",
            "Value":"abksdgaldkgagr" //  已经转码后的数据
           }]
}
</code></pre></table></div><h3>2.3.2.17、2.2.2.17 设置/查询子设备名称</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch" <br />上报："Report"</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关MAC</td>
<td>字符串"%s"</td>
<td>长度16</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"SubName"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>16个0</td>
</tr>
<tr>
<td>Data.ModelId</td>
<td>modelId</td>
<td></td>
<td>Report上报时生效；</td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性名称</td>
<td>字符串"%s",</td>
<td>下发：”Dispatch”：<br /> <strong>"Set</strong>Name",设置子设备名称 <strong>"Get</strong>Name",查询子设备名称<br /> 上报：”Report”:<br /><strong>"Name"</strong>,子设备关键字，上报时生效；</td>
</tr>
<tr>
<td>Data.Value</td>
<td>属性值</td>
<td>字符串"%s",最大100个字节</td>
<td><strong>中文需utf8编码,最大20个汉字</strong></td>
</tr>
</tbody>
</table>
<hr />
<p>设置设备名称指令，示例JSON:</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"SubName",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"SetName",
            "Value":"Room1"      //中文需utf8编码,最大10个汉字
        }
    ]
}
</code></pre></table>
<p>查询设备名称指令，示例JSON:</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"SubName",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"GetName"
        }
    ]
}

查询结果上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"SubName",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"500c32",
            "Key":"Name",
            "Value":"Room1"
        }
    ]
}
</code></pre></table></div><h3>2.3.2.18、2.22.18 子设备OTA指令</h3><div style="margin-left:30px;"><p><strong>注</strong>：
1、子设备固件OTA升级需要该设备zigbee模组支持；
2、子设备固件升级采用zigbee无线通信方式，因此升级时长受当前固件文件大小、网络环境以及子设备在线数量影响，一般需要为20~40分钟分钟；
3、子设备固件文件名格式：4451_固件文件类型_固件文件版本.ebl。其中固件文件类型由固件开发人员提供,固件版本文件以形如20200304的日期表示,.ebl为文件后缀</p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关MAC</td>
<td>字符串"%s"</td>
<td>长度16</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"DevOta"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>子设备ID</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
<tr>
<td>Data.Key</td>
<td>关键字</td>
<td>字符串"%s"</td>
<td>DevOta</td>
<td></td>
</tr>
<tr>
<td>Data.Value</td>
<td>子设备固件绝对路径</td>
<td>字符串"%s"</td>
<td>例如"/tmp/4451_134_20200204"</td>
<td></td>
</tr>
</tbody>
</table>
<p>设置设备名称指令，示例JSON:</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"DevOta",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"DevOta",
            "Value":"/tmp/4451_34976_20200303.ebl"
        }
    ]
}</code></pre></table>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关MAC</td>
<td>字符串"%s"</td>
<td>长度16</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"DevOta"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>子设备ID</td>
<td>字符串"%s", 长度16</td>
</tr>
<tr>
<td>Data.ModelId</td>
<td>子设备ModelId</td>
<td>字符串"%s"</td>
<td>查看设备modelIdb对照表</td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性关键字</td>
<td>字符串"%s"</td>
<td>"Result"</td>
</tr>
<tr>
<td>Data.Value</td>
<td>升级结果</td>
<td>字符串"%s"</td>
<td>0:开始升级<br/> 1:升级成功<br/>101：查无此文件<br/>102：异常中断</td>
<td></td>
</tr>
</tbody>
</table>
<table width='100%' class='codestyle'><pre><code class="language-json">升级结果上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"DevOta",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"500c32",
            "Key":"Result",
            "Value":"0"
        }
    ]
}

升级异常上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"DevOta",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"500c32",
            "Key":"result",
            "Value":"101"
        }
    ]
}
</code></pre></table></div><h3>2.3.2.19、2.2.2.19获取设备列表详细信息(网关指令)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>"DevsInfo"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>终端Zigbee子设备ID</td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性值</td>
<td>字符串"%s"</td>
<td><strong>"DevsInfo"</strong></td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>获取设备列表详细信息JSON数据示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command": "Dispatch",
    "FrameNumber":"00",
    "Type":"DevsInfo",
    "Data":[
        {
            "DeviceId":"0000000000000000",//网关ID:16个0
            "Key":"DevsInfo"
        }
]
}
</code></pre></table>
<p>网关上报</p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："DevsInfo"</td>
</tr>
<tr>
<td>TotalNumber</td>
<td>设备总数量</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>AlreadyReportNumber</td>
<td>已上报数量</td>
<td>字符串"%s"</td>
<td>TotalNumber= AlreadyReportNumber时上报完成</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>每次最大上报10个设备</td>
</tr>
<tr>
<td>Data.DeviceType</td>
<td>设备类型</td>
<td>字符串"%s"</td>
<td>具体查看设备类型表</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID (MAC)</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
<tr>
<td>Data.ModelId</td>
<td>ModelId</td>
<td>字符串"%s",</td>
<td>具体查看设备TRD表格</td>
</tr>
<tr>
<td>Data.Name</td>
<td>设备名称</td>
<td>字符串"%s"，char长度40</td>
<td></td>
</tr>
<tr>
<td>Data.Secret</td>
<td>签名</td>
<td>字符串"%s",</td>
<td>具体查看设备TRD表格</td>
</tr>
<tr>
<td>Data.Version</td>
<td>固件版本</td>
<td>字符串"%s"</td>
<td>形如"20180223"</td>
</tr>
<tr>
<td>Data.Online</td>
<td>在线状态</td>
<td>字符串"%s"</td>
<td>0-离线 ，1-在线</td>
</tr>
<tr>
<td>Data.RegisterStatus</td>
<td>注册成功标志</td>
<td>字符串"%s"</td>
<td>0-平台未注册成功，1-注册成功</td>
</tr>
<tr>
<td>Data.Params</td>
<td>设备参数数组</td>
<td>[]</td>
<td>空</td>
</tr>
<tr>
<td>Data.Params.key</td>
<td>参数名</td>
<td>字符串"%s"</td>
<td>参看具体设备参数表</td>
</tr>
<tr>
<td>Data.Params.value</td>
<td>参数值</td>
<td>字符串"%s"</td>
<td>参看具体设备参数表</td>
</tr>
</tbody>
</table>
<hr />
<p>设备列表上报JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
      "Command":"Report",
      "FrameNumber":"00",
      "GatewayId":"0006D12345678909",
      "Type":"DevsInfo",
      "TotalNumber":"21",
      "AlreadyReportNumber":"21",
      "Data":[
                {
                "DeviceId":"1234567876543210",
                "ModelId":"0a0c3c",
                "Name":"三位开关"
                "Version":"20180201",
                "Online": "1",
                "RegisterStatus": "1"
                "Params":[
                        {"Key":"Switch","Value":"1"},
                        {"Key":"LedEnable","Value":"1"}
                ]
                }
             ]
}
</code></pre></table></div></div><h2>2.3.3、2.2.3特殊上报指令</h2><div style="margin-left:0px;"><h3>2.3.3.1、设备注册上报</h3><div style="margin-left:30px;"><p><strong>注：</strong>
1、调用方通过上报回调函数收到设备注册上报后，向云端平台上报注册。
2、若云端注册成功，<strong>上报回调函数</strong>应返回0，失败则返回-1。
3、当断网时，云端注册失败后返回-1，libhydevicemanagesdk.so会将该设备的注册<strong>标志位</strong>设置为0。当网络恢复后，调用方可通过获取设备列表（ <strong><em>控制指令和设备上报指令-公共控制和查询指令-获取设备列表</em></strong>，<strong><em>控制指令和设备上报指令-特殊上报指令-获取设备当前所有属性或状态指令（子设备控制指令）</em></strong> ），查看哪些设备没有注册，再重新向云端平台注册上报，注册成功后，需更新该设备注册标志位。</p>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备注册："Register"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.DeviceType</td>
<td>设备类型</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID (MAC)</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
<tr>
<td>Data.ModelId</td>
<td>ModelId</td>
<td>字符串"%s",</td>
<td>具体查看设备ModelId与设备类型对照表</td>
</tr>
<tr>
<td>Data.Secret</td>
<td>密匙</td>
<td>字符串"%s", 最大长度40</td>
<td>可通过配置文件修改该参数，用于不同平台的注册.<br />不用时，可忽略</td>
</tr>
</tbody>
</table>
<hr />
<p>设备注册上报JSON字符串示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
       "Command":"Report",
       "FrameNumber":"00",
       "GatewayId":"0006D12345678909",
       "Type":"Register",
       "Data":[
        {
              "DeviceId":"1234567876543210",
              "ModelId":"500c32",
              "Secret":"kYulH7PhgrI44IcsesSJqkLbufGbUPjkNF2sImWm"
      }
    ]
}
</code></pre></table></div><h3>2.3.3.2、设备注销上报</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备属性上报："UnRegister"</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID (MAC)</td>
<td>字符串"%s", 长度16</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>设备注销上报JSON字符串示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
     "Command":"Report",
     "FrameNumber":"00",
     "GatewayId":"0006D12345678909"，
     "Type":"UnRegister",
     "Data":[
             {
             "DeviceId":"1234567876543210"
             }
           ]
}
</code></pre></table></div><h3>2.3.3.3、设备上线/下线上报</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备属性上报："OnOff"</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID (MAC)</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
<tr>
<td>Data.MdoelId</td>
<td>设备ModelId</td>
<td>字符串"%s",</td>
<td></td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性名称</td>
<td>字符串"%s",</td>
<td>“Online”</td>
</tr>
<tr>
<td>Data.Value</td>
<td>固件版本</td>
<td>字符串"%s"</td>
<td>1：上线； 0：下线</td>
</tr>
</tbody>
</table>
<hr />
<p>设备上线/下线上报JSON数据示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"OnOff",
    "Data":[
             {
               "DeviceId":"1234567876543210",
               "ModelId":"500c32",
               "Key":"Online",  //该属性不可查询，只能设备主动上报
               "Value":"1"
            }
          ]
}
</code></pre></table></div><h3>2.3.3.4、设备固件版本上报</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备属性上报："Attribute"</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID (MAC)</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
<tr>
<td>Data.ModelId</td>
<td>设备ModelId</td>
<td>字符串"%s",</td>
<td></td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性名称</td>
<td>字符串"%s",</td>
<td>“Version”</td>
</tr>
<tr>
<td>Data.Value</td>
<td>固件版本</td>
<td>字符串"%s"</td>
<td>形如"20180223"</td>
</tr>
</tbody>
</table>
<hr />
<p>设备固件版本上报JSON数据示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
 {
            "DeviceId":"1234567876543210",
            "ModelId":"500c32",
            "Key":"Version",
            "Value":"20180102"
      }
    ]
}
</code></pre></table></div><h3>2.3.3.5、设备列表上报</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："DevList"</td>
</tr>
<tr>
<td>TotalNumber</td>
<td>设备总数量</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>AlreadyReportNumber</td>
<td>已上报数量</td>
<td>字符串"%s"</td>
<td>TotalNumber= AlreadyReportNumber时上报完成</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>每次最大上报10个设备</td>
</tr>
<tr>
<td>Data.DeviceType</td>
<td>设备类型</td>
<td>字符串"%s"</td>
<td>具体查看设备类型表</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID (MAC)</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
<tr>
<td>Data.ModelId</td>
<td>ModelId</td>
<td>字符串"%s",</td>
<td>具体查看设备TRD表格</td>
</tr>
<tr>
<td>Data.Name</td>
<td>设备名称</td>
<td>字符串"%s"，char长度40</td>
<td></td>
</tr>
<tr>
<td>Data.Secret</td>
<td>签名</td>
<td>字符串"%s",</td>
<td>具体查看设备TRD表格</td>
</tr>
<tr>
<td>Data.Version</td>
<td>固件版本</td>
<td>字符串"%s"</td>
<td>形如"20180223"</td>
</tr>
<tr>
<td>Data.Online</td>
<td>在线状态</td>
<td>字符串"%s"</td>
<td>0-离线 ，1-在线</td>
</tr>
<tr>
<td>Data.RegisterStatus</td>
<td>注册成功标志</td>
<td>字符串"%s"</td>
<td>0-平台未注册成功，1-注册成功</td>
</tr>
</tbody>
</table>
<hr />
<p>设备列表上报JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
      "Command":"Report",
      "FrameNumber":"00",
      "GatewayId":"0006D12345678909",
      "Type":"DevList",
      "TotalNumber":"21",
      "AlreadyReportNumber":"21",
      "Data":[
                {
                "DeviceId":"1234567876543210",
                "ModelId":"0a0c3c",
                "Name":"三位开关"
                "Version":"20180201",
                "Online": "1",
                "RegisterStatus": "1"
                }
             ]
}
</code></pre></table></div><h3>2.3.3.6、网关COO的MAC地址上报</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："Attribute"</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>每次最大上报10个设备</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID (MAC)</td>
<td>字符串"%s", 长度16</td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性名称</td>
<td>字符串"%s",</td>
<td>“CooMac”</td>
</tr>
<tr>
<td>Data.ModelId</td>
<td>ModelId</td>
<td>字符串"%s",</td>
<td></td>
</tr>
<tr>
<td>Data.Value</td>
<td>签名</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>网关上报COO的MAC地址信息，JSON数据示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
            {
            "DeviceId":"0000000000000000",
            "ModelId":"0000",
            "Key":"CooMac",
            "Value":"0123456789ABCDEF" //仅为示例
            }
          ]
}
</code></pre></table></div><h3>2.3.3.7、恢复出产设置上报</h3><div style="margin-left:30px;"><p><strong>注：</strong>
复位按键长按>=10s，或下发恢复出厂设置指令后，网关指示灯WAN,LAN,WIFI三个指示灯灯同时快闪10次， 网关清除已入网子设备信息，调用方在收到恢复出厂设置上报后，再执行调用方的相关操作，所有操作完成后，调用方必须执行重启网关的操作，否则网关COO不起作用。</p>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："ReFactory"</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
</tbody>
</table>
<hr />
<p>恢复出厂设置Json格式：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" ReFactory",
    "Data":[]
}
</code></pre></table></div><h3>2.3.3.8、COO网络信息上报</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："CooInfo"</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>Data.CooMac</td>
<td>Coo MAC</td>
<td>字符串"%s",</td>
<td>16位16进制字符串</td>
</tr>
<tr>
<td>Data.Channel</td>
<td>网络信道</td>
<td>字符串"%s",</td>
<td>12\~26（10进制字符串）</td>
</tr>
<tr>
<td>Data.PanId</td>
<td>网络标识</td>
<td>字符串"%s",</td>
<td>4位16进制字符串</td>
</tr>
<tr>
<td>Data.ExtPanId</td>
<td>扩展网络标识</td>
<td>字符串"%s", 长度16</td>
<td>16位16进制字符串</td>
</tr>
<tr>
<td>Data.NetworkKey</td>
<td>网络密钥</td>
<td>字符串"%s"</td>
<td>32位16进制字符串</td>
</tr>
</tbody>
</table>
<hr />
<p>COO网络信息上报Json格式：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"CooInfo",
    "Data":[ 
            {
              "CooMac": "006D7F0003C645A1",
              "Channel": "19",
              "PanId": "080F",
              "ExtPanId": "006D7F0003C645A1",
              "NetworkKey": "006D7F0003C645A1006D7F0003C645A1"
           }
         ]
}
</code></pre></table></div><h3>2.3.3.9、邻居信息上报</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："NeighborInfo"</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>数组[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>16位16进制字符串</td>
</tr>
<tr>
<td>Data.StarIndex</td>
<td>开始索引</td>
<td>字符串"%s", 长度3</td>
<td>从0开始</td>
</tr>
<tr>
<td>Data.Neighbors</td>
<td>邻居</td>
<td></td>
<td>数组[]</td>
</tr>
<tr>
<td>Data.Address</td>
<td>设备Id(地址)</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
<tr>
<td>Data.LQI</td>
<td>信号质量</td>
<td>1</td>
<td>1\~7, 1代表最好， 7代表最差。</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>
注：每次最多返回12个邻居信息，如果超过12个则多次返回。如果返回的邻居个数小于12个或者没有，则表示当前设备的邻居信息已经全部返回</strong></p>
<table width='100%' class='codestyle'><pre><code class="language-json">邻居信息上报示例：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"NeighborInfo",
    "Data":[ 
            {
             "DeviceId": "006D7F0003C645A1",
             "StarIndex": "19",
             "Neighbors": [
                            {"Address": "1234567887654321","LQI": "1"},
                            {"Address": "1234567887654321","LQI": "2"},
                            {"Address": "1234567887654321","LQI": "7"}
                          ]
             }
          ]
}
</code></pre></table></div><h3>2.3.3.10、子节点信息上报</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："ChildrenInfo"</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>数组[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>16位16进制字符串</td>
</tr>
<tr>
<td>Data.StarIndex</td>
<td>开始索引</td>
<td>字符串"%s", 长度3</td>
<td>从0开始</td>
</tr>
<tr>
<td>Data.Children</td>
<td>邻居</td>
<td></td>
<td>数组[]</td>
</tr>
<tr>
<td>Data.Children.Address</td>
<td>设备Id(地址)</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
<tr>
<td>Data.Children.ParentLQI</td>
<td>收到父节点的信号质量</td>
<td>字符串"%s"长度4</td>
<td>-1\~120，-1表示最强，-120表示最弱</td>
</tr>
<tr>
<td>Data.Children.ZedLQI</td>
<td>该子节点的信号质量</td>
<td>字符串"%s"长度4</td>
<td>-1\~120，-1表示最强，-120表示最弱</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>注：每次最多返回12个子节点信息，如果超过12个则多次返回。如果返回的子节点个数小于12个或者没有，则表示当前设备的子节点信息已经全部返回</strong></p>
<p>子节点信息上报示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"ChildrenInfo",
    "Data":[ 
             {
               "DeviceId": "006D7F0003C645A1",
               "StarIndex": "19",
               "Children": [
            {"Address": "1234567887654321","ParentLQI":"-40","ZedLQI": "-51"},
            {"Address": "123456788765432A","ParentLQI":"-40","ZedLQI": "-45"},
            {"Address": "123456788765432B","ParentLQI":"-24","ZedLQI": "-51"},
            {"Address": "123456788765432C","ParentLQI":"-90","ZedLQI": "-31"},
            {"Address": "123456788765432D","ParentLQI":"-45","ZedLQI": "-71"},
            {"Address": "123456788765432E","ParentLQI":"-40","ZedLQI": "-78"}
                           ]
               }
          ]
}
</code></pre></table></div><h3>2.3.3.11、COO版本信息上报</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："Attribute"</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID (MAC)</td>
<td>字符串"%s", 长度16</td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性名称</td>
<td>字符串"%s",</td>
<td>“CooVer”</td>
</tr>
<tr>
<td>Data.ModelId</td>
<td>ModelId</td>
<td>字符串"%s",</td>
<td>“0000”</td>
</tr>
<tr>
<td>Data.Value</td>
<td>COO版本信息</td>
<td>字符串"%s",</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID (MAC)</td>
<td>字符串"%s", 长度16</td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性名称</td>
<td>字符串"%s",</td>
<td>“CooCode”</td>
</tr>
<tr>
<td>Data.ModelId</td>
<td>ModelId</td>
<td>字符串"%s",</td>
<td>“0000”</td>
</tr>
<tr>
<td>Data.Value</td>
<td>COO版本代码</td>
<td>字符串"%s",</td>
<td>格式为：y.mm.dd   y:自然数，2018年及以前发布的为1，2019年发布为2......以此类推 mm: 月份，1\~12 dd: 日 如果无法获取版本号，则上报1.0.0 注意：版本代码反映发布日期，如1.9.4表示是9月4日发布的，1.11.26表示是11月26日发布的，因此不是连续的，但是新的版本代码保持递增变化。</td>
</tr>
</tbody>
</table>
<hr />
<p>COO版本信息上报Json格式：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
             {
                "DeviceId":"0000000000000000",
                "ModelId":"0000",
                "Key":"CooVer",
                "Value":"Sep 8 2018" //仅为示例
            },
            {
                "DeviceId":"0000000000000000",
                "ModelId":"0000",
                "Key":"CooCode",
                "Value":"1.9.8 " //仅为示例
            }
         ]
}
</code></pre></table></div><h3>2.3.3.12、未知设备入网信息上报</h3><div style="margin-left:30px;"><p><strong>注：设备加入网关Zigbee网络后，若匹配不到配置文件，则上报该信息。即设备并未实际加入网关中的设备列表，因此设备的其他属性不会上报。</strong></p>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备注册："UnKnow"</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID (MAC)</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
<tr>
<td>Data.ModelId</td>
<td>ModelId</td>
<td>字符串"%s",</td>
<td></td>
</tr>
<tr>
<td>Data.RexType</td>
<td>Rex设备类型</td>
<td>字符串"%s"</td>
<td>具体查看Rex设备类型表</td>
</tr>
</tbody>
</table>
<hr />
<p>未知设备入网信息上报Json格式：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Report",
    "FrameNumber":"00",
    "Type":"Unknow",
    "Data":[
    {
           "DeviceId":"1234567890123456",
           "ModelId":"abad5e",
           "RexType":"1314" //仅为示例
      }
    ]
}
</code></pre></table></div><h3>2.3.3.13、Librexgatewaysdk.so版本号上报</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"Attribute"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>16个0</td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性名称</td>
<td>字符串"%s",</td>
<td><strong>"RexSDKVer"</strong></td>
</tr>
<tr>
<td>Data.Value</td>
<td>属性值</td>
<td>字符串"%s",</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>Librexgatewaysdk.so版本号上报Json格式：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[ {
            "DeviceId":"0000000000000000",
            "Key":"RexSDKVer",
            "Value":"1.2.3"
           } ]
}
</code></pre></table></div><h3>2.3.3.14、透传自定义数据上报（针对红外转发设备或定制类设备）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"CustomData"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
<tr>
<td>Data.ModelId</td>
<td>设备ModelId</td>
<td></td>
<td>参看第1节 设备ModelId 与设备类型对照表</td>
</tr>
<tr>
<td>Data.Key</td>
<td>属性名称</td>
<td>字符串"%s",</td>
<td><strong>"CustomData"</strong></td>
</tr>
<tr>
<td>Data.Endpoint</td>
<td>第几路</td>
<td>字符串"%s",</td>
<td>默认"1"，多路设备则根据实际上报</td>
</tr>
<tr>
<td>Data.Value</td>
<td>透传自定义数据</td>
<td>字符串"%s",</td>
<td>数据格式为<strong>Base64</strong>转码后的形式</td>
</tr>
</tbody>
</table>
<hr />
<p>透传自定义数据上报（针对红外转发设备或定制类设备）Json格式：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Report",
    "FrameNumber":"00",
    "Type":"CustomData",
    "GatewayId":"0006D12345678909",
    "Data":[ {
            "DeviceId":"0000000000000000",
            "ModelId":"HYxxxxxx",
            "Key":"CustomData",
            "Endpoint":"1",
            "Value":"abksdgaldkgagr" //  base64格式数据
}]
}
</code></pre></table></div></div></div><h2>2.4、2.3具体接入设备指令与状态上报</h2><div style="margin-left:20px;"><h2>2.4.1、2.3.1设备基本属性及说明</h2><div style="margin-left:0px;"><h3>2.4.1.1、设备基本属性</h3><div style="margin-left:30px;"><p>设备基本属性及说明
<strong>可控</strong>：该属性允许被控制或设置；
<strong>上报</strong>：该属性状态值，改变时会主动上报；
<strong>查询</strong>：该属性不可被查询。</p>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>SofterVersion</td>
<td>软件版本</td>
<td>字符串</td>
<td>子设备的软件版本为日期形式如，"20180101"网关的软件版本型号格式为V1.0.1，表示设备管理动态库的版本</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>FirmwareVersion</td>
<td>固件版本</td>
<td>字符串</td>
<td>统一默认为，"1.0.0"</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table></div><h3>2.4.1.2、网关属性</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>PermitJoining</td>
<td>入网开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">属性上报，示例JSON:
{
    "Command":"Reort",
    "FrameNumber":"00",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"0000000000000000",
            "Key":"PermitJoining",
            "Value":"0"
        }
    ]
}
</code></pre></table></div></div><h2>2.4.2、2.3.2 U1系列</h2><div style="margin-left:0px;"><h3>2.4.2.1、U1系列：一位轻触多控智能开关（500c32）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Switch</td>
<td>开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>TumblerSwitch</td>
<td>开关 翻转</td>
<td>[2]</td>
<td>枚举值：2（反转）</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">控制属性指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">属性查询指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">控制指令或属性查询指令，结果上报示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"500c32",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">翻转控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"TumblerSwitch",
            "Value":"2"
        }
    ]
}
</code></pre></table></div><h3>2.4.2.2、U1系列：二/三位轻触多控智能开关</h3><div style="margin-left:30px;"><p><strong>注：</strong></p>
<ul>
<li>二位轻触多控开关参数包括：Switch_1、Switch_2、Switch_All、TumblerSwitch_1、TumblerSwitch_2；</li>
</ul>
<ul>
<li>三位轻触多控开关参数包括：Switch_1、Switch_2、Switch_3、Switch_All、TumblerSwitch_1、TumblerSwitch_2， TumblerSwitch_3；</li>
</ul>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Switch_1</td>
<td>第1路开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch_2</td>
<td>第2路开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch_3</td>
<td>第3路开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch_All</td>
<td>总控开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>TumblerSwitch_1</td>
<td>一路反转</td>
<td>[2]</td>
<td>枚举值：2(反转)</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>TumblerSwitch_2</td>
<td>二路反转</td>
<td>[2]</td>
<td>枚举值：2(反转)</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>TumblerSwitch_3</td>
<td>三路反转</td>
<td>[2]</td>
<td>枚举值：2(反转)</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">控制属性指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_2",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">属性查询指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_2"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">控制指令或属性查询指令，结果上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"500c33",
            "Key":"Switch_2",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">控制三位轻触开关-三路全开，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_All",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">第二路翻转控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"TumblerSwitch_2",
            "Value":"2"
        }
    ]
}
</code></pre></table></div><h3>2.4.2.3、U1系列：一/二/三位轻触辅控智能开关（场景按键版）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>KeyFobValue</td>
<td>按键键值</td>
<td>[1,2,3]</td>
<td>枚举值： 1（按键1）,2（按键2）,3（按键3）</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td>—</td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">辅控开关本地按键后，上报按键值，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5f0cf1"
            "Key":"KeyFobValue",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.2.4、U1系列：液晶场景面板</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>KeyFobValue</td>
<td>按键键值</td>
<td>[0,1，2,3，4,5,6]</td>
<td>枚举值默认： 1（回家），2（会客） 3（全开），4（离家） 5（影音），6（全关）</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td>—</td>
</tr>
</tbody>
</table>
<hr />
<p>注：图片版场景面板的按键对应的图片，可本地修改。同时长按左边和右边中间按键，当液晶面板中图片闪烁时松手，然后点击对应按键，可调节场景图片。长时间不操作，闪烁自动停止，并确定当前场景图片。</p>
<table width='100%' class='codestyle'><pre><code class="language-json">场景面板本地按键后，上报按键值，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909"，
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5f0c3b"
            "Key":"KeyFobValue",
            "Value":"5"
        }
    ]
}
</code></pre></table></div><h3>2.4.2.5、U1系列：窗帘开关</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>CurtainOperation</td>
<td>窗帘操作</td>
<td>[0,1，2]</td>
<td>枚举值： 0(关窗帘)， 1（开窗帘） 2（暂停窗帘）</td>
<td><strong>√</strong></td>
<td><strong>—</strong></td>
<td>—</td>
</tr>
<tr>
<td>RunMode</td>
<td>窗帘电机工作模式</td>
<td>[0,1]</td>
<td>枚举值： 0（正常模式） 1（反向模式）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘操作指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainOperation",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘电机工作模式控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"RunMode",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.2.6、U1系列：辅控窗帘开关（场景按键版，5f0d13）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>KeyFobValue</td>
<td>按键键值</td>
<td>[1,2,3]</td>
<td>枚举值：1（开窗帘） 2（暂停） 3（关窗帘）</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td>——</td>
</tr>
</tbody>
</table>
<hr />
<p>注：辅控窗帘开关的面板丝印与窗帘开关面板相同，但按键后，仅上报按键号。一般配合窗帘电机，进行远程联动操作。</p>
<table width='100%' class='codestyle'><pre><code class="language-json">辅控窗帘开关，本地按键后，上报按键值，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5f0d13",
            "Key":"KeyFobValue",
            "Value":"5"
        }
    ]
}
</code></pre></table></div><h3>2.4.2.7、U1系列：10A USB智能插座（0a0c3c）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>RmsCurrent</td>
<td>有效电流</td>
<td>0\~1000</td>
<td>0\~1000，单位A</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>RmsVoltage</td>
<td>有限电压</td>
<td>0\~5000</td>
<td>0\~5000，单位V</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SumElectric</td>
<td>电量统计</td>
<td></td>
<td>单位kWh， 保留两位小数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SwitchChildLock</td>
<td>童锁开关</td>
<td>[0,1]</td>
<td>枚举：0,（童锁关） 1（童锁开）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SwitchMultiple_1</td>
<td>插孔开关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SwitchMultiple_2</td>
<td>USB开关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SwitchMultiple_All</td>
<td>插孔开关总控</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">童锁控制指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"SwitchChildLock",
            "Value":"1"
        }
    ]
}
童锁开关上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909"，
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0a0c3c"
            "Key":"SwitchChildLock",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">插座第2路开/关控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"SwitchMultiple_2",
            "Value":"0"
        }
    ]
}

插座第一路状态值上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909"
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0a0c3c",
            "Key":"SwitchMultiple_2",
            "Value":"0"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">插座第1路和第2路全开，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"SwitchMultiple_All",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">有效电流上报：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0a0c3c",
            "Key":"RmsCurrent",
            "Value":"0.13"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">有效电压上报：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0a0c3c",
            "Key":"RmsVoltage",
            "Value":"220"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">电量统计上报：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0a0c3c",
            "Key":"SumElectric",
            "Value":"35.82"
        }
    ]
}
</code></pre></table></div><h3>2.4.2.8、U1系列：16A智能插座（0a0c55）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>RmsCurrent</td>
<td>有效电流</td>
<td>0\~1000</td>
<td>0\~1000，单位A</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>RmsVoltage</td>
<td>有限电压</td>
<td>0\~5000</td>
<td>0\~5000，单位V</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SumElectric</td>
<td>电量统计</td>
<td>%s字符串</td>
<td>单位kWh， 保留两位小数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SwitchChildLock</td>
<td>童锁开关</td>
<td>[0,1]</td>
<td>枚举：0,（童锁关） 1（童锁开）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch</td>
<td>电源开关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">童锁控制指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"SwitchChildLock",
            "Value":"1"
        }
    ]
}
童锁开关上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0a0c55",
            "Key":"SwitchChildLock",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">插座电源开/关控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"0"
        }
    ]
}

插座电源状态值上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0a0c55",
            "Key":"Switch",
            "Value":"0"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">有效电流上报：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0a0c55",
            "Key":"RmsCurrent",
            "Value":"0.13"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">有效电压上报：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0a0c55",
            "Key":"RmsVoltage",
            "Value":"220"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">电量统计上报：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            " ModelId ":"0a0c55",
            "Key":"SumElectric",
            "Value":"35.82"
        }
    ]
}
</code></pre></table></div><h3>2.4.2.9、U1系列：DLT调光调色开关（090cd5）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>ColorTemperature</td>
<td>色温</td>
<td>2700-6500</td>
<td>2700-6500，单位K</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Luminance</td>
<td>亮度</td>
<td>0\~100</td>
<td>0\~100，单位%</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch</td>
<td>电源开关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">色温控制指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"ColorTemperature",
            "Value":"3000"
        }
    ]
}

色温状态值上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            " ModelId ":"090cd5",
            "Key":"ColorTemperature",
            "Value":"30000"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">电源开/关控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"0"
        }
    ]
}

电源开关状态值上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            " ModelId ":"090cd5",
            "Key":"Switch",
            "Value":"0"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">亮度控制，示例JSON：
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Luminance",
            "Value":"50"
        }
    ]
}

亮度状态值上报，示例JSON：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"090cd5",
            "Key":"Luminance",
            "Value":"50"
        }
    ]
}
</code></pre></table></div><h3>2.4.2.10、U1系列：新风控制器（280eda）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Switch</td>
<td>电源开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭） 1（打开）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>WindSpeed</td>
<td>风扇运行状态</td>
<td>[2,3,4]</td>
<td>枚举值：2（低风） 3（中风） 4（高风）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">控制电源开，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}
控制风速为中风，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"WindSpeed",
            "Value":"3"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">属性查询指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">电源开关状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" Attribute ",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"280eda ",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}

风速状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"280eda",
            "Key":"WindSpeed",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.2.11、U1系列：温控器(电地暖5e0edc/水地暖5e0edb)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Switch</td>
<td>电源开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭） 1（打开）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CurrentTemperature</td>
<td>当前温度</td>
<td>[-20, 55]</td>
<td>单位度，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>TargetTemperature</td>
<td>设定温度</td>
<td>[16, 32]</td>
<td>单位度，整数</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">控制电源开，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}
设置目标温度，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"TargetTemperature",
            "Value":"26"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">查询当前环境温度，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurrentTemperature"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">电源开关状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5e0edb",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}

当前温度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5e0edb",
            "Key":"CurrentTemperature",
            "Value":"26"
        }
    ]
}

目标温度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5e0edb",
            "Key":"TargetTemperature",
            "Value":"25"
        }
    ]
}
</code></pre></table></div><h3>2.4.2.12、U1系列：空调温控器/一路空调温控器(0212c3或HY0080)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Switch</td>
<td>电源开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭） 1（打开）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CurrentTemp</td>
<td>当前温度</td>
<td>[-20, 55]</td>
<td>单位度，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Temperature</td>
<td>设定温度</td>
<td>[16, 32]</td>
<td>单位度，整数</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>WindSpeed</td>
<td>风速</td>
<td>[2,3,4]</td>
<td>枚举值：2（低档） 3（中档） 4（高档）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>WorkMode</td>
<td>工作模式</td>
<td>[1,2,3,4]</td>
<td>枚举值：1（制冷） 2（制热） 3（通风） 4（除湿）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">打开空调，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}

空调开关状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0212c3",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}

当前温度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0212c3",
            "Key":"CurrentTemp",
            "Value":"25"
        }
    ]
}

设定空调温度，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Temperature",
            "Value":"25"
        }
    ]
}

设定空调温度的上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0212c3",
            "Key":"Temperature",
            "Value":"25"
        }
    ]
}

设定空调风速，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"WindSpeed",
            "Value":"2"
        }
    ]
}

空调风速上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0212c3",
            "Key":"WindSpeed",
            "Value":"2"
        }
    ]
}

设定空调工作模式，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"WorkMode",
            "Value":"2"
        }
    ]
}

空调工作模式上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0212c3",
            "Key":"WorkMode",
            "Value":"2"
        }
    ]
}
</code></pre></table></div><h3>2.4.2.13、Zigbee调光调色灯具（YG0001）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>ColorTemperature</td>
<td>色温</td>
<td>2700-6500</td>
<td>2700-6500，单位K</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Luminance</td>
<td>亮度</td>
<td>0\~100</td>
<td>0\~100，单位%</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch</td>
<td>电源开关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">色温控制指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"ColorTemperature",
            "Value":"3000"
        }
    ]
}
色温状态值上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            " ModelId ":"YG0001",
            "Key":"ColorTemperature",
            "Value":"30000"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">电源开/关控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"0"
        }
    ]
}

电源开关状态值上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            " ModelId ":" YG0001",
            "Key":"Switch",
            "Value":"0"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">亮度控制，示例JSON：
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Luminance",
            "Value":"50"
        }
    ]
}

亮度状态值上报，示例JSON：
{
    "Command":"Report",
    "FrameNumber":"00",
   "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":" YG0001",
            "Key":"Luminance",
            "Value":"50"
        }
    ]
}
</code></pre></table></div><h3>2.4.2.14、Zigbee调光调色开关</h3><div style="margin-left:30px;"><p><strong>注：Zigbee调光调色开关的使用方法：</strong></p>
<table width='100%' class='codestyle'><pre><code class="language-json">Zigbee调光调色开关必须与Zigbee调光调色灯具配合使用，单独使用Zigbee调光调色开关无任何功能参数上报。
配对使用方法如下：
1)  将Zigbee调光调色灯具和Zigbee调光调色开关加入统一zigbee网关；
2)  根据modelId获取Zigbee调光调色开关mac地址的后两位，如Zigbee调光调色开关mac=1234567887654321，则后四位为4321，将其从16进制转换为10进制数 21(16进制)=17185（10进制）。
3)  获取Zigbee调光调色灯具的mac=1234567890ABCDEF，并下发管理分组指令（5.1管理分组指令），其中Value=33,具体指令如下：

{
    "Command":" Dispatch ",
    "FrameNumber":"00",
    "Type":"Group",
    "Data":[
        {
                "DeviceId":"1234567890ABCDEF",  
                "Key":"A",                            
                 "Value":"17185",    
                "Endpoint":"1"
        }
    ]
}

4)  设置成功后，Zigbee调光调色灯具上报如下信息：

{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Group",
    "Data":[
        {
                "DeviceId":"1234567890ABCDEF",  
                "ModelId":"YG0001",    
                "Key":"A",                            
                "Value":"00"
        }
    ]
}
5)  此时调节 Zigbee调光调色开关，即可控制Zigbee调光调色灯具的亮度和色温。
</code></pre></table></div><h3>2.4.2.15、双路窗帘面板（HY0099，型号U86KCL2150-ZP01）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>CurtainOperation_1</td>
<td>第1路窗帘操作</td>
<td>[0,1,2]</td>
<td>枚举值：0（关窗帘） 1（开窗帘） 2（暂停窗帘）</td>
<td><strong>√</strong></td>
<td><strong>√ Event</strong></td>
<td>——</td>
</tr>
<tr>
<td>CurtainPosition_1</td>
<td>第1路窗帘打开位置</td>
<td>[0, 100]</td>
<td>取值范围：0-100，间距：1, 单位：%</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>RunMode_1</td>
<td>第1路窗帘模式</td>
<td>[1,0]</td>
<td>0：正常模式 1：反转模式</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CurtainOperation_2</td>
<td>第2路窗帘操作</td>
<td>[0,1,2]</td>
<td>枚举值：0（关窗帘） 1（开窗帘） 2（暂停窗帘）</td>
<td><strong>√</strong></td>
<td><strong>√ Event</strong></td>
<td>——</td>
</tr>
<tr>
<td>CurtainPosition_2</td>
<td>第2路窗帘打开位置</td>
<td>[0, 100]</td>
<td>取值范围：0-100，间距：1, 单位：%</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>RunMode_2</td>
<td>第2路窗帘模式</td>
<td>[1,0]</td>
<td>0：正常模式 1：反转模式</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘操作指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainOperation_1",
            "Value":"1"
        }
    ]
}

窗帘操作事件上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0099",
            "Key":"CurtainOperation_1",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘打开位置控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainPosition_2",
            "Value":"50"
        }
    ]
}
窗帘打开位置上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0099",
            "Key":"CurtainPosition_2",
            "Value":"50"
        }
    ]
}

窗帘模式控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"RunMode_2",
            "Value":"1"
        }
    ]
}
窗帘模式上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0099",
            "Key":"RunMode_2",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.2.16、非计量10A插座（0a25a1）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>SwitchChildLock</td>
<td>童锁开关</td>
<td>[0,1]</td>
<td>枚举：0,（童锁关） 1（童锁开）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch</td>
<td>电源开关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">控制属性指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">属性查询指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">控制指令或属性查询指令，结果上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute ",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0a25a1",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.2.17、非计量16A插座（0a25a2）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Switch</td>
<td>电源开关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SwitchChildLock</td>
<td>童锁开关</td>
<td>[0,1]</td>
<td>枚举：0,（童锁关） 1（童锁开）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">控制属性指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">属性查询指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">控制指令或属性查询指令，结果上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0a25a2",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.2.18、空调地暖一体面板(HY0113)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Switch_1</td>
<td>空调电源开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭） 1（打开）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CurrentTemperature_1</td>
<td>当前温度</td>
<td>[-20, 55]</td>
<td>单位度，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>TargetTemperature_1</td>
<td>空调设定温度</td>
<td>[16, 32]</td>
<td>单位度，整数</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>WindSpeed_1</td>
<td>风速</td>
<td>[2,3,4]</td>
<td>枚举值：2（低档） 3（中档） 4（高档）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>WorkMode_1</td>
<td>工作模式</td>
<td>[0,1,2,3,4]</td>
<td>枚举值：//0（自动） 1（制冷） 2（制热） 3（通风） 4（除湿）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch_2</td>
<td>地暖电源开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭） 1（打开）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>TargetTemperature_2</td>
<td>地暖设定温度</td>
<td>[16, 32]</td>
<td>单位度，整数</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">打开空调，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_1",
            "Value":"1"
        }
    ]
}

空调开关状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0113",
            "Key":"Switch_1",
            "Value":"1"
        }
    ]
}

当前温度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":" HY0113",
            "Key":"CurrentTemperature_1",
            "Value":"25"
        }
    ]
}

设定空调温度，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"TargetTemperature_1",
            "Value":"25"
        }
    ]
}

设定空调温度的上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0113",
            "Key":"TargetTemperature_1",
            "Value":"25"
        }
    ]
}

设定空调风速，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"WindSpeed_1",
            "Value":"2"
        }
    ]
}

空调风速上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0113",
            "Key":"WindSpeed_1",
            "Value":"2"
        }
    ]
}

设定空调工作模式，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"WorkMode_1",
            "Value":"2"
        }
    ]
}

空调工作模式上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0113",
            "Key":" WorkMode_1",
            "Value":"2"
        }
    ]
}
</code></pre></table></div><h3>2.4.2.19、高频插卡取电（HY0136）、低频插卡取电（HY0132）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Switch</td>
<td>开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">控制属性指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">属性查询指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">控制指令或属性查询指令，结果上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":" HY0136",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.2.20、VOC 温湿度 PM2.5传感器(墙装式，不在使用)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>CurrentHumidity</td>
<td>当前湿度</td>
<td>[0, 100]</td>
<td>单位%，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CurrentTemperature</td>
<td>当前温度</td>
<td>[-40, 55]</td>
<td>单位℃，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>PM25</td>
<td>PM2.5指数</td>
<td>[0, 500]</td>
<td>单位μg/m³</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>TVOC</td>
<td>TVOC/VOC浓度</td>
<td>[0, 40000]</td>
<td>单位mg/m³</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">当前湿度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"01112b"
            "Key":"CurrentHumidity",
            "Value":"40"
        }
    ]
}

当前温度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"01112b "
            "Key":"CurrentTemperature",
            "Value":"25"
        }
    ]
}
PM2.5指数上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"01112b"
            "Key":"PM25",
            "Value":"20"
        }
    ]
}

电池电量上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"01112b"
            "Key":"BatteryPercentage",
            "Value":"99"
        }
    ]
}
</code></pre></table></div></div><h2>2.4.3、2.3.3U2/天际系列</h2><div style="margin-left:0px;"><h3>2.4.3.1、U2/天际系列：智镜/全面屏/触控屏（HY0134）</h3><div style="margin-left:30px;"><p><strong>注：设备入网后会在30秒后更新所有数据，防止大量数据上报，造成网络拥堵</strong></p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>KeyFobValue</td>
<td>场景按键号上报</td>
<td>[1,2,3，4,5,6]</td>
<td>枚举值： 左侧从上至下对应1,2,3； 右侧从上至下对应4,5,6。</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td>—</td>
</tr>
<tr>
<td>SceName_1</td>
<td>场景按键1名称</td>
<td>字符</td>
<td>UTF-8,最多6个汉字</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SceName_2</td>
<td>场景按键2名称</td>
<td>字符</td>
<td>UTF-8,最多6个汉字</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SceName_3</td>
<td>场景按键3名称</td>
<td>字符</td>
<td>UTF-8,最多6个汉字</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SceName_4</td>
<td>场景按键4名称</td>
<td>字符</td>
<td>UTF-8,最多6个汉字</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SceName_5</td>
<td>场景按键5名称</td>
<td>字符</td>
<td>UTF-8,最多6个汉字</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SceName_6</td>
<td>场景按键6名称</td>
<td>字符</td>
<td>UTF-8,最多6个汉字</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SceName_7</td>
<td>场景按键7名称</td>
<td>字符</td>
<td>UTF-8,最多6个汉字</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SceName_8</td>
<td>场景按键8名称</td>
<td>字符</td>
<td>UTF-8,最多6个汉字</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SceName_9</td>
<td>场景按键9名称</td>
<td>字符</td>
<td>UTF-8,最多6个汉字</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SceName_10</td>
<td>场景按键10名称</td>
<td>字符</td>
<td>UTF-8,最多6个汉字</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SceName_11</td>
<td>场景按键11名称</td>
<td>字符</td>
<td>UTF-8,最多6个汉字</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SceName_12</td>
<td>场景按键12名称</td>
<td>字符</td>
<td>UTF-8,最多6个汉字</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>ScePhoto_1</td>
<td>场景按键1图片</td>
<td>枚举</td>
<td>具体参看附录1</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>ScePhoto_2</td>
<td>场景按键2图片</td>
<td>枚举</td>
<td>具体参看附录1</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>ScePhoto_3</td>
<td>场景按键3图片</td>
<td>枚举</td>
<td>具体参看附录1</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>ScePhoto_4</td>
<td>场景按键4图片</td>
<td>枚举</td>
<td>具体参看附录1</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>ScePhoto_5</td>
<td>场景按键5图片</td>
<td>枚举</td>
<td>具体参看附录1</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>ScePhoto_6</td>
<td>场景按键6图片</td>
<td>枚举</td>
<td>具体参看附录1</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>ScePhoto_7</td>
<td>场景按键1图片</td>
<td>枚举</td>
<td>具体参看附录1</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>ScePhoto_8</td>
<td>场景按键8图片</td>
<td>枚举</td>
<td>具体参看附录1</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>ScePhoto_9</td>
<td>场景按键9图片</td>
<td>枚举</td>
<td>具体参看附录1</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>ScePhoto_10</td>
<td>场景按键10图片</td>
<td>枚举</td>
<td>具体参看附录1</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>ScePhoto_11</td>
<td>场景按键11图片</td>
<td>枚举</td>
<td>具体参看附录1</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>ScePhoto_12</td>
<td>场景按键12图片</td>
<td>枚举</td>
<td>具体参看附录1</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Enable_1</td>
<td>空调功能开关</td>
<td>[0,1]</td>
<td>枚举值：0（禁用） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch_1</td>
<td>空调电源开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭） 1（打开）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CurrentTemperature_1</td>
<td>当前温度</td>
<td>[-20, 55]</td>
<td>单位度，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>TargetTemperature_1</td>
<td>空调目标温度</td>
<td>[16, 32]</td>
<td>单位度，整数</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>WorkMode_1</td>
<td>空调模式</td>
<td>[0,1,2,3,4]</td>
<td>枚举值：0（自动） 1（制冷） 2（制热） 3（通风） 4（除湿）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>WindSpeed_1</td>
<td>空调风速</td>
<td>[2,3,4]</td>
<td>枚举值：2（低档） 3（中档） 4（高档）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Enable_2</td>
<td>新风功能开关</td>
<td>[0,1]</td>
<td>枚举值：0（禁用） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch_2</td>
<td>新风电源开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭） 1（打开）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>WindSpeed_2</td>
<td>新风风速</td>
<td>[2,3,4]</td>
<td>枚举值：2（低档） 3（中档） 4（高档）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Enable_3</td>
<td>地暖功能开关</td>
<td>[0,1]</td>
<td>枚举值：0（禁用） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch_3</td>
<td>地暖电源开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭） 1（打开）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>TargetTemperature_3</td>
<td>地暖目标温度</td>
<td>[16, 32]</td>
<td>单位度，整数</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">场景按键后，上报按键值，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0134",
            "Key":"KeyFobValue",
            "Value":"3"
        }
    ]
}

设置场景按键名称，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"SceName_1",
            "Value":"回家"
        }
    ]
}

设置场景按键图片，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"ScePhoto_1",
            "Value":"1"
        }
    ]
}
开启空调功能，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Enable_1",
            "Value":"1"
        }
    ]
}

打开地暖电源开关，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_3",
            "Value":"1"
        }
    ]
}

调节新风风速，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"WindSpeed_2",
            "Value":"1"
        }
    ]
}

调节地暖目标温度，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"TargetTemperature_3",
            "Value":"25"
        }
    ]
}
</code></pre></table></div><h3>2.4.3.2、U2/天际系列：单键智能开关（HY0095）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Switch</td>
<td>第1路开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>TumblerSwitch</td>
<td>1路反转</td>
<td>[2]</td>
<td>枚举值：2(反转)</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>LedEnable</td>
<td>使能指示灯</td>
<td>[0,1]</td>
<td>枚举值：0（关闭断电保护功能），1（开启断电保护功能，则重上电后为开关状态为：关）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>PowerOffProtection</td>
<td>断电保护</td>
<td>[0,1]</td>
<td>枚举值：0（关闭断电保护功能），1（使能断电保护功能）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">控制属性指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">属性查询指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">控制指令或属性查询指令，结果上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" Attribute ",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0095",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">翻转控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"TumblerSwitch",
            "Value":"2"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能按键指示灯功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能断电保护功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"PowerOffProtection",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.3.3、U2/天际系列：双键智能开关（HY0096）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Switch_1</td>
<td>第1路开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch_2</td>
<td>第2路开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch_All</td>
<td>总控开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>TumblerSwitch_1</td>
<td>一路反转</td>
<td>[2]</td>
<td>枚举值：2(反转)</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>TumblerSwitch_2</td>
<td>二路反转</td>
<td>[2]</td>
<td>枚举值：2(反转)</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>LedEnable</td>
<td>使能指示灯</td>
<td>[0,1]</td>
<td>枚举值：0（关闭指示灯功能），1（使能指示灯功能）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>PowerOffProtection</td>
<td>断电保护</td>
<td>[0,1]</td>
<td>枚举值：0（关闭断电保护功能），1（开启断电保护功能，则重上电后开关状态为：关）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">控制属性指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_3",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">属性查询指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_3"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">控制指令或属性查询指令，结果上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0096",
            "Key":"Switch_3",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">控制双键智能开关-两路全开，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_All",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">第二路翻转控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"TumblerSwitch_2",
            "Value":"2"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能按键指示灯功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能断电保护功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"PowerOffProtection",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.3.4、U2/天际系列：三键智能开关（HY0097）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Switch_1</td>
<td>第1路开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch_2</td>
<td>第2路开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch_3</td>
<td>第3路开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch_All</td>
<td>总控开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>TumblerSwitch_1</td>
<td>一路反转</td>
<td>[2]</td>
<td>枚举值：2(反转)</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>TumblerSwitch_2</td>
<td>二路反转</td>
<td>[2]</td>
<td>枚举值：2(反转)</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>TumblerSwitch_3</td>
<td>三路反转</td>
<td>[2]</td>
<td>枚举值：2(反转)</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>LedEnable</td>
<td>使能指示灯</td>
<td>[0,1]</td>
<td>枚举值：0（关闭指示灯功能），<br />1（使能指示灯功能）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>PowerOffProtection</td>
<td>断电保护</td>
<td>[0,1]</td>
<td>枚举值：0（关闭断电保护功能），<br />1（开启断电保护功能，则重上电后开关状态为：关）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">控制属性指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_2",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">属性查询指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_2"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">控制指令或属性查询指令，结果上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"500c33",
            "Key":"Switch_2",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">控制三键智能开关-三路全开，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_All",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">第二路翻转控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"TumblerSwitch_2",
            "Value":"2"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能按键指示灯功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能断电保护功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"PowerOffProtection",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.3.5、U2/天际系列：DLT液晶调光器（09223f，型号U86KTGS150-ZXP）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>ColorTemperature</td>
<td>色温</td>
<td>2700-6500</td>
<td>2700-6500，单位K</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Luminance</td>
<td>亮度</td>
<td>0\~100</td>
<td>0\~100，单位%</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch</td>
<td>电源开关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">色温控制指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"ColorTemperature",
            "Value":"3000"
        }
    ]
}
色温状态值上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId ":"09223f",
            "Key":"ColorTemperature",
            "Value":"30000"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">电源开/关控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"0"
        }
    ]
}

电源开关状态值上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            " ModelId ":"09223f",
            "Key":"Switch",
            "Value":"0"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">亮度控制，示例JSON：
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Luminance",
            "Value":"50"
        }
    ]
}

亮度状态值上报，示例JSON：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"09223f",
            "Key":"Luminance",
            "Value":"50"
        }
    ]
}
</code></pre></table></div><h3>2.4.3.6、U2/天际系列：10A计量插座(HY0104)、16A计量插座(HY0106)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>RmsCurrent</td>
<td>有效电流</td>
<td>0\~1000</td>
<td>0\~1000，单位A</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>RmsVoltage</td>
<td>有限电压</td>
<td>0\~5000</td>
<td>0\~5000，单位V</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SumElectric</td>
<td>电量统计</td>
<td></td>
<td>单位kWh， 保留两位小数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SwitchChildLock</td>
<td>童锁开关</td>
<td>[0,1]</td>
<td>枚举：0,（童锁关） 1（童锁开）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch</td>
<td>插孔开关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>VoltageOverloadProtection</td>
<td>过压保护</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>OverloadProtection</td>
<td>过流保护</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>LedEnable</td>
<td>状态指示灯使能</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>PowerOffProtection</td>
<td>断电保护</td>
<td>[0,1]</td>
<td>枚举值：1（关闭断电保护功能），0（开启断电保护功能，则重上电后开关状态为：关）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>PowerConsumptionClear</td>
<td>电量记录清零</td>
<td>[1]</td>
<td>枚举值： 1（清除历史电量） 0 (保留电量。下发1后上报先上报1，再上报0，代表执行成功)</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">童锁控制指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"SwitchChildLock",
            "Value":"1"
        }
    ]
}
童锁开关上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0104"
            "Key":"SwitchChildLock",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">插座开/关控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"0"
        }
    ]
}

插座状态值上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0104",
            "Key":"Switch",
            "Value":"0"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">有效电流上报：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0104",
            "Key":"RmsCurrent",
            "Value":"0.13"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">有效电压上报：
{
    "Command":"Report",
    "FrameNumber":"00",
   "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0104",
            "Key":"RmsVoltage",
            "Value":"220"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">电量统计上报：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0104",
            "Key":"SumElectric",
            "Value":"35.82"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能按键指示灯功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}

使能按键指示灯功能上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0104",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}
使能按键指示灯功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}

使能按键指示灯功能上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0104",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能断电保护功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"PowerOffProtection",
            "Value":"1"
        }
    ]
}
上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0104",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">电量历史记录清零功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"PowerConsumptionClear",
            "Value":"1"
        }
    ]
}
上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0104",
            "Key":"PowerConsumptionClear",
            "Value":"0"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">过流保护功能控制上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0104",
            "Key":"OverloadProtection",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">过压保护功能控制上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0104",
            "Key":"OverloadProtection",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.3.7、U2/天际系列：10A USB计量插座(HY0105)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>RmsCurrent</td>
<td>有效电流</td>
<td>0\~1000</td>
<td>0\~1000，单位A</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>RmsVoltage</td>
<td>有限电压</td>
<td>0\~5000</td>
<td>0\~5000，单位V</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SumElectric</td>
<td>电量统计</td>
<td></td>
<td>单位kWh， 保留两位小数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SwitchChildLock</td>
<td>童锁开关</td>
<td>[0,1]</td>
<td>枚举：0,（童锁关） 1（童锁开）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SwitchMultiple_1</td>
<td>插孔开/关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SwitchMultiple_2</td>
<td>插孔开/关_ (控制USB)</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>VoltageOverloadProtection</td>
<td>过压保护</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>OverloadProtection</td>
<td>过流保护</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>LedEnable</td>
<td>状态指示灯使能</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>PowerOffProtection</td>
<td>断电保护</td>
<td>[0,1]</td>
<td>枚举值：1（关闭断电保护功能），0（开启断电保护功能，则重上电后开关状态为：关）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>PowerConsumptionClear</td>
<td>电量记录清零</td>
<td>[1]</td>
<td>枚举值： 1（清除历史电量） 0 (保留电量。下发1后上报先上报1，再上报0，代表执行成功)</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">童锁控制指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"SwitchChildLock",
            "Value":"1"
        }
    ]
}
童锁开关上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0105",
            "Key":"SwitchChildLock",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">插座开/关控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"SwitchMultiple_1",
            "Value":"0"
        }
    ]
}

插座状态值上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0105",
            "Key":" SwitchMultiple",
            "Value":"0"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">有效电流上报：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0105",
            "Key":"RmsCurrent",
            "Value":"0.13"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">有效电压上报：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0105",
            "Key":"RmsVoltage",
            "Value":"220"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">电量统计上报：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0105",
            "Key":"SumElectric",
            "Value":"35.82"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能按键指示灯功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}

使能按键指示灯功能上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0105",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能断电保护功能上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0105",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">电量历史记录清零功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"PowerConsumptionClear",
            "Value":"1"
        }
    ]
}

电量历史记录清零功能上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0105",
            "Key":"PowerConsumptionClear",
            "Value":"0"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">过流保护功能上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0105",
            "Key":"OverloadProtection",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">过压保护功能控制上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0105",
            "Key":"OverloadProtection",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.3.8、U2/天际系列：窗帘开关(HY0098)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>CurtainOperation</td>
<td>窗帘操作</td>
<td>[0,1,2]</td>
<td>枚举值：0（关窗帘） 1（开窗帘） 2（暂停窗帘）</td>
<td><strong>√</strong></td>
<td><strong>√ Event上报</strong></td>
<td>——</td>
</tr>
<tr>
<td>CurtainPosition</td>
<td>窗帘打开位置</td>
<td>[0, 100]</td>
<td>取值范围：0-100，间距：1, 单位：%</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>RunMode</td>
<td>模式</td>
<td>[1,0]</td>
<td>0：正常模式 1：反转模式</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>LedEnable</td>
<td>指示灯使能开关</td>
<td>[1,0]</td>
<td>0：关闭，熄灭指示灯 1：开启</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘操作指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainOperation",
            "Value":"1"
        }
    ]
}

窗帘操作事件上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":" HY0098",
            "Key":"CurtainOperation",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘打开位置控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainPosition",
            "Value":"50"
        }
    ]
}
窗帘打开位置上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":" HY0098",
            "Key":"CurtainPosition",
            "Value":"50"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘模式控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"RunMode",
            "Value":"1"
        }
    ]
}
窗帘模式上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0098",
            "Key":" RunMode",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘开关指示灯使能控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}
窗帘指示灯使能上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0098",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.3.9、U2/天际系列：二位双控开关面板(HY0102)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Switch_1</td>
<td>第1路开关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch_2</td>
<td>第2路开关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>VoltageOverloadProtection_1</td>
<td>第1路过压保护</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>OverloadProtection_1</td>
<td>第1路过流保护</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>VoltageOverloadProtection_2</td>
<td>第2路过压保护</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>OverloadProtection_2</td>
<td>第2路过流保护</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>LedEnable</td>
<td>状态指示灯使能</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>PowerOffProtection</td>
<td>断电保护</td>
<td>[0,1]</td>
<td>枚举值：0（关闭断电保护功能），1（开启断电保护功能，则重上电后开关状态为：关）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">第1路开/关控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_1",
            "Value":"0"
        }
    ]
}

第1路状态值上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0102"
            "Key":"Switch_1",
            "Value":"0"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能按键指示灯功能控制指令,示例
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}

使能按键指示灯功能上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0102",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能断电保护功能上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0105",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">第一路过流保护报警上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0102",
            "Key":"OverloadProtection_1",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">第2路过压保护报警控制上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0102",
            "Key":"OverloadProtection_2",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.3.10、16A智能插座(计量/红外，HY0133)</h3><div style="margin-left:30px;"><p>注：红外控制下发和上报参看 <strong>透传自定义数据下发（针对红外转发设备或定制类设备）</strong>  和  <strong>透传自定义数据上报（针对红外转发设备或定制类设备）</strong></p>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>RmsCurrent</td>
<td>有效电流</td>
<td>0\~1000</td>
<td>0\~1000，单位A</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>RmsVoltage</td>
<td>有限电压</td>
<td>0\~5000</td>
<td>0\~5000，单位V</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SumElectric</td>
<td>电量统计</td>
<td></td>
<td>单位kWh， 保留两位小数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>SwitchChildLock</td>
<td>童锁开关</td>
<td>[0,1]</td>
<td>枚举：0,（童锁关） 1（童锁开）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch</td>
<td>插孔开关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>VoltageOverloadProtection</td>
<td>过压保护</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>OverloadProtection</td>
<td>过流保护</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>PowerOffProtection</td>
<td>断电保护</td>
<td>[0,1]</td>
<td>枚举值：0（关闭断电保护功能），1（开启断电保护功能，则重上电后开关状态为：关）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>PowerConsumptionClear</td>
<td>电量记录清零</td>
<td>[1]</td>
<td>枚举值： 1（清除历史电量）, 0 (保留电量。下发1后上报先上报1，再上报0，代表执行成功)</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">童锁控制指令，示例JSON:
{
"Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"SwitchChildLock",
            "Value":"1"
        }
    ]
}
童锁开关上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
             "ModelId":"HY0133"
            "Key":"SwitchChildLock",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">插座开/关控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"0"
        }
    ]
}

插座状态值上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0133"
            "Key":"Switch",
            "Value":"0"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">有效电流上报：
{
    "Command":"Report",
    "FrameNumber":"00",
     "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0133"
            "Key":"RmsCurrent",
            "Value":"0.13"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">有效电压上报：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0133",
            "Key":"RmsVoltage",
            "Value":"220"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">电量统计上报：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
             "ModelId":"HY0133",
              "Key":"SumElectric",
            "Value":"35.82"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能断电保护功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"PowerOffProtection",
            "Value":"1"
        }
    ]
}
上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0133",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">电量历史记录清零功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"PowerConsumptionClear",
            "Value":"1"
        }
    ]
}
上报
{
     "Command":"Report",
     "FrameNumber":"00",
     "GatewayId":"0006D12345678909",
    "Type":" Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0133",
            "Key":"PowerConsumptionClear",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">过流保护功能控制上报
{
    "Command":"Report",
    "FrameNumber":"00",
     "GatewayId":"0006D12345678909",
    "Type":" Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0133",
            "Key":"OverloadProtection",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">过压保护功能控制上报
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":" Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0133",
            "Key":"OverloadProtection",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.3.11、1路智能开关模块（HY0121，型号IHC1238）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Switch</td>
<td>第1路开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>TumblerSwitch</td>
<td>一路反转</td>
<td>[2]</td>
<td>枚举值：2(反转)</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>LedEnable</td>
<td>使能指示灯</td>
<td>[0,1]</td>
<td>枚举值：0（关闭断电保护功能），1（开启断电保护功能，则重上电后为开关状态为：关）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>PowerOffProtection</td>
<td>断电保护</td>
<td>[0,1]</td>
<td>枚举值：0（关闭断电保护功能），1（使能断电保护功能）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>KeyMode</td>
<td>开关模式</td>
<td>[1,2]</td>
<td>枚举值：1（支持自复位按键面板），2（支持翘板按键面板）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">控制属性指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">属性查询指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">控制指令或属性查询指令，结果上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" Attribute ",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0121",
            "Key":"Switch",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">翻转控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"TumblerSwitch",
            "Value":"2"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能按键指示灯功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能断电保护功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"PowerOffProtection",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">切换按键模式指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"KeyMode",
            "Value":"1"
        }
    ]
}

上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0121",
            "Key":"KeyMode",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.3.12、2路智能开关模块（HY0122，型号IHC1239）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Switch_1</td>
<td>第1路开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch_2</td>
<td>第2路开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch_All</td>
<td>总控开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>TumblerSwitch_1</td>
<td>一路反转</td>
<td>[2]</td>
<td>枚举值：2(反转)</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>TumblerSwitch_2</td>
<td>二路反转</td>
<td>[2]</td>
<td>枚举值：2(反转)</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>LedEnable</td>
<td>使能指示灯</td>
<td>[0,1]</td>
<td>枚举值：0（关闭指示灯功能），1（使能指示灯功能）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>PowerOffProtection</td>
<td>断电保护</td>
<td>[0,1]</td>
<td>枚举值：0（关闭断电保护功能），1（开启断电保护功能，则重上电后开关状态为：关）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>KeyMode</td>
<td>开关模式</td>
<td>[1,2]</td>
<td>枚举值：1（支持自复位按键面板），2（支持翘板按键面板）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">控制属性指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_3",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">属性查询指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_3"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">控制指令或属性查询指令，结果上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" Attribute ",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0122",
            "Key":"Switch_3",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">控制三位轻触开关-三路全开，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_All",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">第二路翻转控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"TumblerSwitch_2",
            "Value":"2"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能按键指示灯功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能断电保护功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"PowerOffProtection",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">切换按键模式指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"KeyMode",
            "Value":"1"
        }
    ]
}

上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" Attribute ",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0122",
            "Key":" KeyMode ",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.3.13、3路智能开关模块（HY0107，型号IHC1240）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Switch_1</td>
<td>第1路开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch_2</td>
<td>第2路开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch_3</td>
<td>第3路开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch_All</td>
<td>总控开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭），1（开启）</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>TumblerSwitch_1</td>
<td>一路反转</td>
<td>[2]</td>
<td>枚举值：2(反转)</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>TumblerSwitch_2</td>
<td>二路反转</td>
<td>[2]</td>
<td>枚举值：2(反转)</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>TumblerSwitch_3</td>
<td>三路反转</td>
<td>[2]</td>
<td>枚举值：2(反转)</td>
<td><strong>√</strong></td>
<td><strong>——</strong></td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>LedEnable</td>
<td>使能指示灯</td>
<td>[0,1]</td>
<td>枚举值：0（关闭指示灯功能），1（使能指示灯功能）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>PowerOffProtection</td>
<td>断电保护</td>
<td>[0,1]</td>
<td>枚举值：0（关闭断电保护功能），1（开启断电保护功能，则重上电后开关状态为：关）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>KeyMode</td>
<td>开关模式</td>
<td>[1,2]</td>
<td>枚举值：1（支持自复位按键面板），2（支持翘板按键面板）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">控制属性指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_2",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">属性查询指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_2"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">控制指令或属性查询指令，结果上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" Attribute ",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0107",
            "Key":"Switch_2",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">控制三位轻触开关-三路全开，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_All",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">第二路翻转控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"TumblerSwitch_2",
            "Value":"2"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能按键指示灯功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"LedEnable",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">使能断电保护功能控制指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"PowerOffProtection",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">切换按键模式指令
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"KeyMode",
            "Value":"1"
        }
    ]
}

上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":" Attribute ",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0107",
            "Key":" KeyMode ",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.3.14、单键无线开关U2（HY0125，型号U2-86K1ND-ZDD）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>KeyFobValue</td>
<td>按键键值</td>
<td>[1,2,3]</td>
<td>枚举值： 1（单击），2（双击），3（短按1s）</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td>—</td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">辅控开关本地按键后，上报按键值，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0125",
            "Key":"KeyFobValue",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.3.15、双键无线开关U2（HY0126，型号U2-86K2ND-ZDD）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>KeyFobValue_1</td>
<td>左按键键值</td>
<td>[1,2,3]</td>
<td>枚举值： 1（单击），2（双击），3（短按1s）</td>
<td><strong>——</strong></td>
<td><strong>√ Event</strong></td>
<td>—</td>
</tr>
<tr>
<td>KeyFobValue_2</td>
<td>右按键键值</td>
<td>[1,2,3]</td>
<td>枚举值： 1（单击），2（双击），3（短按1s）</td>
<td><strong>——</strong></td>
<td><strong>√ Event</strong></td>
<td>—</td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">辅控开关本地按键后，上报按键值，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0126",
            "Key":"KeyFobValue_2",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.3.16、无线按钮（HY0127）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>KeyFobValue</td>
<td>左按键键值</td>
<td>[1,2,3]</td>
<td>枚举值： 1（单击），2（双击），3（短按1s）</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td>—</td>
</tr>
<tr>
<td>BatteryPercentage</td>
<td>电池电量</td>
<td>[1-100]</td>
<td>单位100%</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>LowBatteryAlarm</td>
<td>低电量报警</td>
<td>[1,0]</td>
<td>报警； 0-正常</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">本地按键后，上报按键值，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0127",
            "Key":"KeyFobValue",
            "Value":"1"
        }
    ]
}

电池电量上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0127",
            "Key":"BatteryPercentage",
            "Value":"80"
        }
    ]
}

低电量报警上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0127",
            "Key":" LowBatteryAlarm",
            "Value":"1"
        }
    ]
}
</code></pre></table></div></div><h2>2.4.4、2.3.4传感器/门锁</h2><div style="margin-left:0px;"><h3>2.4.4.1、智能门锁（14136c，型号IHC1203）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>LockAlarm</td>
<td>门锁报警</td>
<td>[1,2,5,6,10]</td>
<td>枚举值： 1（门栓阻塞报警）； 2（恢复出厂设置报警）； 5（尝试开锁次数过多，门锁冻结报警）； 6（门锁被撬报警）； 10（用户输入挟持密码报警）。 作为Event事件上报。</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td>——</td>
</tr>
<tr>
<td>BatteryPercentage</td>
<td>电池电量</td>
<td>0-100</td>
<td>单位%，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Rssi</td>
<td>接收信号强度</td>
<td>-127\~127</td>
<td>单位dBm</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>UserAdd</td>
<td>增加用户</td>
<td>{”UserId“:“(0-65535)", ”UserType“:“(1-4)”}</td>
<td>UserId:0-65535；UserType：: 1：指纹用户； 2：密码用户； 3：卡用户； 4：钥匙用户</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>UserDelete</td>
<td>删除用户</td>
<td>{”UserId“:“(0-65535)", ”UserType“:“(1-4)”}</td>
<td>UserId:0-65535；UserType：: 1：指纹用户； 2：:密码用户； 3：卡用户； 4：钥匙用户</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>OpenDoor</td>
<td>开门上报</td>
<td>{”UserId“:“(0-65535)”, ”UserType“:“(1-4”)}</td>
<td>UserId:0-65535；UserType：: 1：指纹用户； 2：密码用户； 3：卡用户； 4：钥匙用户</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>LockState</td>
<td>门锁状态</td>
<td>[0,1,2,3]</td>
<td>枚举值： 0（正常锁门） 1（门已上锁） 2（门没上锁） 3（门内反锁）</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>ArmMode</td>
<td>门锁辅助布防</td>
<td>[0,1,2,3]</td>
<td>枚举值： 00（所有防区撤防） 01（在家布防） 02（睡眠布防） 03（所有防区布防）</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>——</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">门锁报警上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"14136c",
            "Key":"LockAlarm",
            "Value":"1"
        }
    ]
}

增加用户上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"14136c",
            "Key":"UserAdd",
            "Value":"{”UserId“:“1",”UserType“:“1”}"
        }
    ]
}
删除用户上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"14136c",
            "Key":"UserDelete",
            "Value":"{”UserId“:“1",”UserType“:“1”}"
        }
    ]
}

开门上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"14136c",
            "Key":"OpenDoor",
            "Value":"{”UserId“:“1",”UserType“:“1”}"
        }
    ]
}

门锁状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"14136c",
            "Key":"LockState",
            "Value":"1"
        }
    ]
}

门锁辅助布防上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"14136c",
            "Key":"ArmMode",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.2、PM2.5 温湿度传感器(桌面式01112b)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>CurrentHumidity</td>
<td>当前湿度</td>
<td>[0, 100]</td>
<td>单位%，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CurrentTemperature</td>
<td>当前温度</td>
<td>[-40, 55]</td>
<td>单位℃，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>PM25</td>
<td>PM2.5指数</td>
<td>[0, 500]</td>
<td>单位μg/m³</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>BatteryPercentage</td>
<td>电池电量</td>
<td>0-100</td>
<td>单位%，整数</td>
<td></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">当前湿度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"01112b",
            "Key":"CurrentHumidity",
            "Value":"40"
        }
    ]
}

当前温度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"01112b",
            "Key":"CurrentTemperature",
            "Value":"25"
        }
    ]
}
PM2.5指数上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"01112b",
            "Key":"PM25",
            "Value":"20"
        }
    ]
}

电池电量上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"01112b",
            "Key":"BatteryPercentage",
            "Value":"99"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.3、PM2.5/CO2/VOC/温湿度传感器  (012860，U86CGQ-ZP(AL))</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>CurrentHumidity</td>
<td>当前湿度</td>
<td>[0, 100]</td>
<td>单位%，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CurrentTemperature</td>
<td>当前温度</td>
<td>[-40, 55]</td>
<td>单位℃，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>PM25</td>
<td>PM2.5指数</td>
<td>[0, 500]</td>
<td>单位μg/m³</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>TVOC</td>
<td>TVOC/VOC有害气体浓度</td>
<td>[0, 40000]</td>
<td>单位μg/m³</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CO2</td>
<td>二氧化碳浓度</td>
<td></td>
<td>单位ppm</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">当前湿度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"012860",
            "Key":"CurrentHumidity",
            "Value":"40"
        }
    ]
}

当前温度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"012860",
            "Key":"CurrentTemperature",
            "Value":"25"
        }
    ]
}
PM2.5指数上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"012860",
            "Key":"PM25",
            "Value":"20"
        }
    ]
}

TVOC指数上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"012860",
            "Key":"TVOC",
            "Value":"20"
        }
    ]
}

CO2浓度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"012860",
            "Key":"CO2",
            "Value":"20"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.4、门磁传感器（HY0093，型号IHG5201）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>ContactAlarm</td>
<td>门磁报警状态</td>
<td>[0,1]</td>
<td>枚举值：0（关闭） 1（打开）, 作为Event事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>BatteryPercentage</td>
<td>电池电量</td>
<td>0-100</td>
<td>单位%，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>LowBatteryAlarm</td>
<td>低电量报警</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（报警） 作为Event事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>TamperAlarm</td>
<td>防撬报警</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（被撬） 作为Event事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">门磁报警状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0093",
            "Key":"ContactAlarm",
            "Value":"1"
        }
    ]
}

门磁防撬报警上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0093",
            "Key":"TamperAlarm",
            "Value":"1"
        }
    ]
}

门磁电池电量上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0093",
            "Key":"BatteryPercentage",
            "Value":"80"
        }
    ]
}

门磁低电量报警上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0093",
            "Key":"LowBatteryAlarm",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.5、水浸探测器B款(HY0124，型号IHG4201 )</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>WaterAlarm</td>
<td>水浸传感器报警状</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（有水浸入） 作为Event事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>BatteryPercentage</td>
<td>电池电量</td>
<td>0-100</td>
<td>单位%，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>LowBatteryAlarm</td>
<td>低电量报警</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（报警） 作为Event事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">水浸探测器报警状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
   "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0124",
            "Key":"WaterAlarm",
            "Value":"1"
        }
    ]
}

水浸探测器电池电量上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0124",
            "Key":"BatteryPercentage",
            "Value":"50"
        }
    ]
}

水浸探测器低电量报警上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0124",
            "Key":"LowBatteryAlarm",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.6、声光报警器（5b0e12 或RH3032）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>SirenWarningMode</td>
<td>报警提示模式</td>
<td>[0,1,2,3,4,5,6]</td>
<td>枚举值：0（停止报警） 1（系统撤防提示） 2（系统布防提示） 3（防盗报警） 4（火警） 5（紧急情况报警） 6（110报警）</td>
<td><strong>√</strong></td>
<td>——</td>
<td>——</td>
</tr>
<tr>
<td>TamperAlarm</td>
<td>防撬报警</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（被撬） 作为<strong>Event</strong>事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">控制声光报警器报警，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"SirenWarningMode",
            "Value":"1"
        }
    ]
}

声光报警器防撬开关报警，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5b0e12",
            "Key":"TamperAlarm",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.7、人体红外传感器B款（HY0027，型号IHG5210）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>MotionAlarm</td>
<td>红外报警状态</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（检测有人） 作为Event事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>BatteryPercentage</td>
<td>电池电量</td>
<td>0-100</td>
<td>单位%，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>TamperAlarm</td>
<td>防撬报警</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（被撬） 作为Event事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>LowBatteryAlarm</td>
<td>低电量报警</td>
<td>[1,0]</td>
<td>1-低电量报警； 0-电量正常；</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">人体红外报警状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0027",
            "Key":"MotionAlarm",
            "Value":"1"
        }
    ]
}

防撬报警上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0027",
            "Key":"TamperAlarm",
            "Value":"1"
        }
    ]
}

电池电量上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0027",
            "Key":"BatteryPercentage",
            "Value":"80"
        }
    ]
}

低电量报警上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0027",
            "Key":"LowBatteryAlarm",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.8、红外双向幕帘(HY0023，型号IHG5220)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>DirectionAlarm</td>
<td>红外幕帘报警状态</td>
<td>[1,2]</td>
<td>枚举值：1（从内到外检测有人）， 2（从外到内有人） 作为Event事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>——</strong></td>
</tr>
<tr>
<td>BatteryPercentage</td>
<td>电池电量</td>
<td>0-100</td>
<td>单位%，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Rssi</td>
<td>接收信号强度</td>
<td>-127\~127</td>
<td>单位dBm</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>TamperAlarm</td>
<td>防撬报警</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（被撬） 作为Event事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>LowBatteryAlarm</td>
<td>低电量报警</td>
<td>[1,0]</td>
<td>1-低电量报警； 0-电量正常；</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">双向红外幕帘有人报警上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0023",
            "Key":"DirectionAlarm",
            "Value":"1"
        }
    ]
}

双向红外幕帘防撬报警上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":" HY0023",
            "Key":"TamperAlarm",
            "Value":"1"
        }
    ]
}

双向红外幕帘电池电量上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0023",
            "Key":"BatteryPercentage",
            "Value":"80"
        }
    ]
}

双向红外幕帘接收信号强度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0023",
            "Key":"Rssi",
            "Value":"-20"
        }
    ]
}

低电量报警上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0023",
            "Key":"LowBatteryAlarm",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.9、烟雾传感器（HY0024，型号HS1SA）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>SmokeAlarm</td>
<td>烟雾报警状态</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（检测烟雾报警） 作为<strong>Event</strong>事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>BatteryPercentage</td>
<td>电池电量</td>
<td>0-100</td>
<td>单位%，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">烟雾报警状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0024",
            "Key":"SmokeAlarm",
            "Value":"1"
        }
    ]
}

电池电量上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0024",
            "Key":"BatteryPercentage",
            "Value":"80"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.10、燃气传感器（HY0022，型号HS1CG）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>GasAlarm</td>
<td>甲烷气体报警状态</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（检测烟雾报警） 作为<strong>Event</strong>事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">甲烷气体报警状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0022",
            "Key":"GasAlarm",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.11、温湿度气压传感器A款（HY0123，型号IHG4210）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>CurrentTemperature</td>
<td>温度</td>
<td></td>
<td>单位摄氏度，保留一位小数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CurrentHumidity</td>
<td>相对湿度</td>
<td></td>
<td>单位1%</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CurrentPressure</td>
<td>气压</td>
<td></td>
<td>单位kpa，保留一位小数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">温度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0123",
            "Key":"CurrentTemperature",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">相对湿度上报，示例JSON:
{
"Command":"Report",
"FrameNumber":"00",
"GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0123",
            "Key":"CurrentHumidity",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">气压上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0123",
            "Key":"CurrentPressure",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.12、遥控器/紧急按钮(场景按键板4a0e0d)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>KeyFobValue</td>
<td>按键键值</td>
<td>[0,1，3,4]</td>
<td>枚举值：0（所有防区撤防） 1（在家布防） 3（所有防区布防） 4（SOS求救）</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td>——</td>
</tr>
<tr>
<td>Rssi</td>
<td>接收信号强度</td>
<td>-127\~127</td>
<td>单位dBm</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>LowBatteryAlarm</td>
<td>低电量报警</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（报警） 作为Event事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">遥控器本地按键后，上报按键值，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"4a0e0d",
            "Key":"KeyFobValue",
            "Value":"1"
        }
    ]
}

接收信号强度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"4a0e0d",
            "Key":"Rssi",
            "Value":"-20"
        }
    ]
}

低电量报警上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"4a0e0d",
            "Key":"LowBatteryAlarm",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.13、九场景遥控器（5f1367）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>KeyFobValue</td>
<td>按键键值</td>
<td>[0,1,2,3,4,5,6,7,8,9]</td>
<td>对应按键值</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td>——</td>
</tr>
<tr>
<td>BatteryPercentage</td>
<td>电量</td>
<td>0~100</td>
<td>单位%，间隔1</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<table width='100%' class='codestyle'><pre><code class="language-json">遥控器按键后，上报对应按键值，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5f1367",
            "Key":"KeyFobValue",
            "Value":"1"
        }
    ]
}

电量上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5f1367",
            "Key":"BatteryPercentage",
            "Value":"50"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.14、U86型-紧急按钮（HY0026 或 79159d）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>KeyFobValue</td>
<td>按键键值</td>
<td>[0,1]</td>
<td>枚举值： 1（报警），0（取消报警）</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">场景开关本地按键后，上报按键值，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"79159d",
            "Key":"KeyFobValue",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.15、U86型-红外幕帘探测器（5c0e1e）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>MotionCurtainAlarm</td>
<td>红外幕帘报警状态</td>
<td>[0,1]</td>
<td>枚举值： 0（正常） 1（检测到有人）</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">有人状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5c0e1e",
            "Key":"MotionCurtainAlarm",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.16、U86型-人体感应面板（1a14f4）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>MotionAlarm</td>
<td>有人报警</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（检测有人） 作为<strong>Event</strong>事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">人体感应报警状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"1a14f4",
            "Key":"MotionAlarm",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.17、电池版-红外幕帘传感器(5c1375)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>MotionCurtainAlarm</td>
<td>红外幕帘报警状态</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（检测有人） 作为<strong>Event</strong>事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>BatteryPercentage</td>
<td>电池电量</td>
<td>0-100</td>
<td>单位%，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Rssi</td>
<td>接收信号强度</td>
<td>-127\~127</td>
<td>单位dBm</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>TamperAlarm</td>
<td>防撬报警</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（被撬） 作为<strong>Event</strong>事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">红外报警状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5c1375",
            "Key":"MotionCurtainAlarm",
            "Value":"1"
        }
    ]
}

红外感应器防撬报警上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5c1375",
            "Key":"TamperAlarm",
            "Value":"1"
        }
    ]
}

红外感应器电池电量上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5c1375"
            "Key":"BatteryPercentage",
            "Value":"80"
        }
    ]
}

红外感应器接收信号强度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5c1375",
            "Key":"Rssi",
            "Value":"-20"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.18、照度传感器（801a07）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>MeasuredIlluminance</td>
<td>电源开关</td>
<td>[0,65535]</td>
<td>单位Lux,间隔1</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">照度状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"801a07"
            "Key":"MeasuredIlluminance",
            "Value":"500"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.19、环境检测面板(HY0045，CO/燃气传感器，型号U86CGQ-CC-ZP）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>GasAlarm</td>
<td>燃气报警状态</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（检测燃气报警） 作为Event事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CoAlarm</td>
<td>一氧化碳报警</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（检测CO报警） 作为Event事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>COValue</td>
<td>一氧化碳浓度</td>
<td>[0\~100]</td>
<td>单位ppm</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>ErrorCode</td>
<td>故障</td>
<td>[0,2]</td>
<td>枚举：0-正常，2-传感器故障</td>
<td></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">燃气报警状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0045"
            "Key":"GasAlarm",
            "Value":"1"
        }
    ]
}

CO报警状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0045"，
            "Key":"CoAlarm",
            "Value":"1"
        }
    ]
}

CO浓度状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0045"，
            "Key":"COValue",
            "Value":"1"
        }
    ]
}

传感器故障代码状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0045"，
            "Key":"ErrorCode",
            "Value":"2"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.20、环境传感器(012608，桌面式) </h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>BatteryPercentage</td>
<td>电池电量</td>
<td>0-100</td>
<td>单位%，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Rssi</td>
<td>接收信号强度</td>
<td>-127\~127</td>
<td>单位dBm</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CurrentHumidity</td>
<td>当前湿度</td>
<td>0\~100</td>
<td>单位%</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>PM25</td>
<td>PM2.5指数</td>
<td></td>
<td>μg/m³</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CurrentTemperature</td>
<td>当前温度</td>
<td></td>
<td>℃</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>HCHO</td>
<td>甲醛指数</td>
<td></td>
<td>单位μg/m³</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CO2</td>
<td>CO2</td>
<td></td>
<td>单位ppm</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">环境传感器(桌面式)电池电量上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"012608",
            "Key":"BatteryPercentage ",
            "Value":"100"
        }
    ]
}

环境传感器(桌面式)接收信号强度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"012608",
            "Key":"Rssi",
            "Value":"-20"
        }
    ]
}

当前湿度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"012608",
            "Key":"CurrentHumidity",
            "Value":"40"
        }
    ]
}

当前温度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"012608",
            "Key":" CurrentTemperature",
            "Value":"25"
        }
    ]
}
PM2.5指数上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"012608",
            "Key":" PM25",
            "Value":"20"
        }
    ]
}

甲醛上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"012608",
            "Key":"HCHO",
            "Value":"99"
        }
    ]
} 

二氧化碳上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"012608",
            "Key":" CO2",
            "Value":"45"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.21、环境传感器012609，(墙面式) </h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>CurrentHumidity</td>
<td>当前湿度</td>
<td>0\~100</td>
<td>单位%</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>PM25</td>
<td>PM2.5指数</td>
<td></td>
<td>μg/m³</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CurrentTemperature</td>
<td>当前温度</td>
<td></td>
<td>℃</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>HCHO</td>
<td>甲醛指数</td>
<td></td>
<td>单位μg/m³</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CO2</td>
<td>CO2</td>
<td></td>
<td>单位ppm</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Illuminance</td>
<td>光照度指数</td>
<td>[0,2000]</td>
<td>单位lux</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">当前湿度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"012609"
            "Key":"CurrentHumidity",
            "Value":"40"
        }
    ]
}

当前温度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"012609"
            "Key":"CurrentTemperature",
            "Value":"25"
        }
    ]
}
PM2.5指数上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"012609"
            "Key":"PM25",
            "Value":"20"
        }
    ]
}

甲醛上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"012609"
            "Key":"HCHO",
            "Value":"99"
        }
    ]
} 

二氧化碳上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"012609"
            "Key":" CO2",
            "Value":"45"
        }
    ]
}

照度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"012608"
            "Key":"Illuminance",
            "Value":"45"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.22、门磁感应器(330dd8或RH3022) 已停产</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>ContactAlarm</td>
<td>门磁报警状态</td>
<td>[0,1]</td>
<td>枚举值：0（关闭） 1（打开）, 作为<strong>Event</strong>事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>BatteryPercentage</td>
<td>电池电量</td>
<td>0-100</td>
<td>单位%，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Rssi</td>
<td>接收信号强度</td>
<td>-127\~127</td>
<td>单位dBm</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>TamperAlarm</td>
<td>防撬报警</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（被撬） 作为<strong>Event</strong>事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>LowBatteryAlarm</td>
<td>低电量报警</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（报警） 作为<strong>Event</strong>事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">门磁报警状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"330dd8",
            "Key":"ContactAlarm",
            "Value":"1"
        }
    ]
}

门磁防撬报警上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"330dd8",
            "Key":"TamperAlarm",
            "Value":"1"
        }
    ]
}

门磁电池电量上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"330dd8",
            "Key":"BatteryPercentage",
            "Value":"80"
        }
    ]
}

门磁接收信号强度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"330dd8",
            "Key":"Rssi",
            "Value":"-20"
        }
    ]
}

门磁低电量报警上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"330dd8",
            "Key":"LowBatteryAlarm",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.23、水浸探测器(5d0e11 或RH3011 ) 已停产</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>WaterAlarm</td>
<td>水浸传感器报警状</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（有水浸入） 作为<strong>Event</strong>事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>BatteryPercentage</td>
<td>电池电量</td>
<td>0-100</td>
<td>单位%，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Rssi</td>
<td>接收信号强度</td>
<td>-127\~127</td>
<td>单位dBm</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>TamperAlarm</td>
<td>防撬报警</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（被撬） 作为<strong>Event</strong>事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>LowBatteryAlarm</td>
<td>低电量报警</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（报警） 作为<strong>Event</strong>事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">水浸探测器报警状态上报，示例JSON:
{
"   Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5d0e11",
            "Key":"WaterAlarm",
            "Value":"1"
        }
    ]
}

水浸探测器防撬报警上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5d0e11",
            "Key":"TamperAlarm",
            "Value":"1"
        }
    ]
}

水浸探测器电池电量上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5d0e11",
            "Key":"BatteryPercentage",
            "Value":"80"
        }
    ]
}

水浸探测器接收信号强度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5d0e11",
            "Key":"Rssi",
            "Value":"-20"
        }
    ]
}

水浸探测器低电量报警上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"5d0e11",
            "Key":"LowBatteryAlarm",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.24、红外感应器(电池型,LH-990F(AL)，1a0e0e 或RH3041)已停产</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>MotionAlarm</td>
<td>红外报警状态</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（检测有人） 作为<strong>Event</strong>事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>BatteryPercentage</td>
<td>电池电量</td>
<td>0-100</td>
<td>单位%，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Rssi</td>
<td>接收信号强度</td>
<td>-127\~127</td>
<td>单位dBm</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>TamperAlarm</td>
<td>防撬报警</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（被撬） 作为<strong>Event</strong>事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>LowBatteryAlarm</td>
<td>低电量报警</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（报警） 作为<strong>Event</strong>事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">红外报警状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"1a0e0e",
            "Key":"MotionAlarm",
            "Value":"1"
        }
    ]
}

红外感应器防撬报警上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"1a0e0e",
            "Key":"TamperAlarm",
            "Value":"1"
        }
    ]
}

红外感应器电池电量上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"1a0e0e",
            "Key":"BatteryPercentage",
            "Value":"80"
        }
    ]
}

红外感应器接收信号强度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"1a0e0e",
            "Key":"Rssi",
            "Value":"-20"
        }
    ]
}

红外感应器低电压报警，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"1a0e0e",
            "Key":"LowBatteryAlarm",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.25、烟雾报警器 (670e10 或RH3011，型号LH-99)已停产</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>SmokeAlarm</td>
<td>烟雾报警状态</td>
<td>[0, 1]</td>
<td>枚举值：0（正常） 1（烟雾报警） 作为<strong>Event</strong>事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Rssi</td>
<td>信号强度</td>
<td>-127\~127</td>
<td>单位dBm</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>BatteryPercentage</td>
<td>电池电量</td>
<td>0-100</td>
<td>单位%，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>LowBatteryAlarm</td>
<td>低电量报警</td>
<td>[0,1]</td>
<td>枚举值：0（正常） 1（报警） 作为<strong>Event</strong>事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">烟雾报警状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"670e10",
            "Key":"SmokeAlarm",
            "Value":"1"
        }
    ]
}

烟雾报警器电池电量上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"670e10",
            "Key":"BatteryPercentage",
            "Value":"80"
        }
    ]
}

烟雾报警器接收信号强度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"670e10",
            "Key":"Rssi",
            "Value":"-20"
        }
    ]
}

烟雾报警器低电量报警上报，示例JSON:

{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"670e10",
            "Key":"LowBatteryAlarm",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.4.26、气体探测器（120e0f,型号LH89ZB）已停产</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>GasAlarm</td>
<td>燃气报警状态</td>
<td>[0, 1]</td>
<td>枚举值：0（正常） 1（天燃气泄漏） 作为<strong>Event</strong>事件上报</td>
<td><strong>——</strong></td>
<td><strong>√</strong> Event 上报</td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">燃气报警状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Event",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"120e0f",
            "Key":"GasAlarm",
            "Value":"1"
        }
    ]
}
</code></pre></table></div></div><h2>2.4.5、2.3.5旁装式</h2><div style="margin-left:0px;"><h3>2.4.5.1、开合帘电机（041580，型号IHW1213）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>CurtainOperation</td>
<td>窗帘操作</td>
<td>[0,1,2]</td>
<td>枚举值：0（关窗帘） 1（开窗帘） 2（暂停窗帘）</td>
<td><strong>√</strong></td>
<td>——</td>
<td>——</td>
</tr>
<tr>
<td>CurtainPosition</td>
<td>窗帘打开位置</td>
<td>[0, 100]</td>
<td>取值范围：0-100，间距：1, 单位：%</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘操作指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainOperation",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘打开位置控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainPosition",
            "Value":"50"
        }
    ]
}
窗帘打开位置上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"041580",
            "Key":"CurtainPosition",
            "Value":"50"
        }
    ]
}
</code></pre></table></div><h3>2.4.5.2、开合帘电机（0423ac，型号IHW1215）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>CurtainOperation</td>
<td>窗帘操作</td>
<td>[0,1,2]</td>
<td>枚举值：0（关窗帘） 1（开窗帘） 2（暂停窗帘）</td>
<td><strong>√</strong></td>
<td>——</td>
<td>——</td>
</tr>
<tr>
<td>CurtainPosition</td>
<td>窗帘打开位置</td>
<td>[0, 100]</td>
<td>取值范围：0-100，间距：1, 单位：%</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>RunMode</td>
<td>窗帘工作模式</td>
<td>[0,1]</td>
<td>0：正转模式； 1：反转模式</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘操作指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainOperation",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘打开位置控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainPosition",
            "Value":"50"
        }
    ]
}
窗帘打开位置上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0423ac",
            "Key":"CurtainPosition",
            "Value":"50"
        }
    ]
}

电机反转模式控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"RunMode",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.5.3、485多路空调协议转换器（0128b7,型号IHG5209）</h3><div style="margin-left:30px;"><p><strong>注</strong>：
1、表格中<strong>_n</strong>代表第几路，取值范围1~16；
2、该设备MCU固件需要<strong>定制</strong>，需要客户提供对接的空调品牌485通信协议</p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Switch_n</td>
<td>电源开关</td>
<td>[0,1]</td>
<td>枚举值：0（关闭） 1（打开）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CurrentTemperature_n</td>
<td>当前温度</td>
<td>[-20, 55]</td>
<td>单位度，整数</td>
<td><strong>——</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>TargetTemperature_n</td>
<td>设定温度</td>
<td>[16, 32]</td>
<td>单位度，整数</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>WindSpeed_n</td>
<td>风速</td>
<td>[2,3,4]</td>
<td>枚举值：2（低档） 3（中档） 4（高档）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>WorkModen_n</td>
<td>工作模式</td>
<td>[1,2,3,4]</td>
<td>枚举值：1（制冷） 2（制热） 3（通风） 4（除湿）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">打开第二路空调，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch_2",
            "Value":"1"
        }
    ]
}

空调开关状态上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0218b7",
            "Key":"Switch_2",
            "Value":"1"
        }
    ]
}

当前di温度上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0218b7",
            "Key":" CurrentTemperature_2",
            "Value":"25"
        }
    ]
}

设定第12路空调温度，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"TargetTemperature_12",
            "Value":"25"
        }
    ]
}

设定空调温度的上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0218b7",
            "Key":"TargetTemperature_12",
            "Value":"25"
        }
    ]
}

设定空调风速，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"WindSpeed_4",
            "Value":"2"
        }
    ]
}

空调风速上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0218b7",
            "Key":"WindSpeed_4",
            "Value":"2"
        }
    ]
}

设定空调工作模式，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"WorkMode_3",
            "Value":"2"
        }
    ]
}

空调工作模式上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"0218b7",
            "Key":" WorkMode_3",
            "Value":"2"
        }
    ]
}
</code></pre></table></div><h3>2.4.5.4、1路0-10V调光模块（090f7a，型号IHC2235）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Luminance</td>
<td>亮度</td>
<td>0\~100</td>
<td>0\~100，单位%</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch</td>
<td>电源开关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">电源开/关控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"0"
        }
    ]
}

电源开关状态值上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            " ModelId ":"090f7a"，
            "Key":"Switch",
            "Value":"0"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">亮度控制，示例JSON：
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Luminance",
            "Value":"50"
        }
    ]
}

亮度状态值上报，示例JSON：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"090f7a"，
            "Key":"Luminance",
            "Value":"50"
        }
    ]
}
</code></pre></table></div><h3>2.4.5.5、1 路后沿相控调光模块(090f79，型号IHC2234)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Luminance</td>
<td>亮度</td>
<td>0\~100</td>
<td>0\~100，单位%</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch</td>
<td>电源开关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">电源开/关控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"0"
        }
    ]
}

电源开关状态值上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            " ModelId ":"090f79",
            "Key":"Switch",
            "Value":"0"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">亮度控制，示例JSON：
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Luminance",
            "Value":"50"
        }
    ]
}

亮度状态值上报，示例JSON：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
           "DeviceId":"123456787654310",
           "ModelId":"090f79",
           "Key":"Luminance",
            "Value":"50"
        }
    ]
}
</code></pre></table></div><h3>2.4.5.6、1路5A开关模块02（500f78，型号IHC1234）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>Switch</td>
<td>电源开关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">开/关控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"0"
        }
    ]
}

开关状态值上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            " ModelId ":"500f78",
            "Key":"Switch",
            "Value":"0"
        }
    ]
}
</code></pre></table></div><h3>2.4.5.7、1路LED亮度色温调节驱动器(090f77，PWM，型号IHC2233)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>ColorTemperature</td>
<td>色温</td>
<td>2700-6500</td>
<td>2700-6500，单位K</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Luminance</td>
<td>亮度</td>
<td>0\~100</td>
<td>0\~100，单位%</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Switch</td>
<td>电源开关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">色温控制指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"ColorTemperature",
            "Value":"3000"
        }
    ]
}
色温状态值上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            " ModelId ":"090f77",
            "Key":"ColorTemperature",
            "Value":"30000"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">电源开/关控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Switch",
            "Value":"0"
        }
    ]
}

电源开关状态值上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            " ModelId ":"090f77",
            "Key":"Switch",
            "Value":"0"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">亮度控制，示例JSON：
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Luminance",
            "Value":"50"
        }
    ]
}

亮度状态值上报，示例JSON：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"090f77",
            "Key":"Luminance",
            "Value":"50"
        }
    ]
}
</code></pre></table></div><h3>2.4.5.8、24V直流窗帘电机控制模块(HY0075，型号IHC2251)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>CurtainOperation</td>
<td>窗帘操作</td>
<td>[0,1,2]</td>
<td>枚举值： 0(关窗帘)， 1（开窗帘） 2（暂停窗帘）</td>
<td><strong>√</strong></td>
<td><strong>—</strong></td>
<td>—</td>
</tr>
<tr>
<td>RunMode</td>
<td>运转模式模式</td>
<td>[0,1]</td>
<td>枚举值： 0：正常模式 1：反转模式</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CurtainPosition</td>
<td>开合度</td>
<td>0\~100</td>
<td>单位% 0：对应全关； 100：对应全开</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>WindRainSensor</td>
<td>使能风雨传感器</td>
<td>[1,0]</td>
<td>1-使能风雨传感器； 0-关闭风雨传感器功能；</td>
<td><strong>√</strong></td>
<td></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘操作指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainOperation",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘电机工作模式控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"RunMode",
            "Value":"1"
        }
    ]
}

设置窗帘位置，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainPosition",
            "Value":"1"
        }
    ]
}

使能风雨传感器，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"WindRainSensor",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.5.9、12V直流窗帘电机控制模块(HY0094，型号IHC2252)</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>CurtainOperation</td>
<td>窗帘操作</td>
<td>[0,1，2]</td>
<td>枚举值： 0(关窗帘)， 1（开窗帘） 2（暂停窗帘）</td>
<td><strong>√</strong></td>
<td><strong>—</strong></td>
<td>—</td>
</tr>
<tr>
<td>RunMode</td>
<td>运转模式模式</td>
<td>[0,1]</td>
<td>枚举值： 0：正常模式 1：反转模式</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘操作指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainOperation",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘电机工作模式控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"RunMode",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.5.10、单路电动窗帘驱动器（0419a8或HY0074，型号IHC2227）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>CurtainOperation</td>
<td>窗帘操作</td>
<td>[0,1,2]</td>
<td>枚举值：0（关窗帘） 1（开窗帘） 2（暂停窗帘）</td>
<td><strong>√</strong></td>
<td>——</td>
<td>——</td>
</tr>
<tr>
<td>CurtainPosition</td>
<td>窗帘打开位置</td>
<td>[0, 100]</td>
<td>取值范围：0-100，间距：1, 单位：%</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘操作指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainOperation",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘打开位置控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainPosition",
            "Value":"50"
        }
    ]
}
窗帘打开位置上报，示例JSON
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":" 0419a8"
            "Key":"CurtainPosition",
            "Value":"50"
        }
    ]
}
</code></pre></table></div><h3>2.4.5.11、红外转发设备(HY0130)</h3><div style="margin-left:30px;"><p>无参数，控制下发和上报参看 <strong>透传自定义数据下发（针对红外转发设备或定制类设备）</strong>  和  <strong>透传自定义数据上报（针对红外转发设备或定制类设备）</strong></p></div><h3>2.4.5.12、双路窗帘控制模块（HY1029）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>CurtainOperation_1</td>
<td>1路窗帘操作</td>
<td>[0,1，2]</td>
<td>枚举值： 0(关窗帘)， 1（开窗帘） 2（暂停窗帘）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td>—</td>
</tr>
<tr>
<td>CurtainOperation_2</td>
<td>2路窗帘操作</td>
<td>[0,1，2]</td>
<td>枚举值： 0(关窗帘)， 1（开窗帘） 2（暂停窗帘）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td>—</td>
</tr>
<tr>
<td>RunMode_1</td>
<td>1路窗帘电机工作模式</td>
<td>[0,1]</td>
<td>枚举值： 0（正常模式） 1（反向模式）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>RunMode_2</td>
<td>2路窗帘电机工作模式</td>
<td>[0,1]</td>
<td>枚举值： 0（正常模式） 1（反向模式）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CurtainPosition_1</td>
<td>1路窗帘位置</td>
<td>0\~100</td>
<td>整数</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>CurtainPosition_2</td>
<td>2路窗帘位置</td>
<td>0\~100</td>
<td>整数</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘操作指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainOperation_1",
            "Value":"1"
        }
    ]
}

控制反馈上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainOperation_1",
            "ModelId":"HY0129",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘电机工作模式控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"RunMode_2",
            "Value":"1"
        }
    ]
}

位置上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0129",
            "Key":" RunMode_2",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘位置控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainPosition _2",
            "Value":"1"
        }
    ]
}

位置上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0129",
            "Key":"CurtainOperation_2",
            "Value":"1"
        }
    ]
}
</code></pre></table></div><h3>2.4.5.13、双路窗帘控制模块（HY1028）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>属性名称</th>
<th>描述</th>
<th>取值</th>
<th>取值说明</th>
<th>可控</th>
<th>上报</th>
<th>查询</th>
</tr>
</thead>
<tbody>
<tr>
<td>CurtainOperation_1</td>
<td>1路窗帘操作</td>
<td>[0,1，2]</td>
<td>枚举值： 0(关窗帘)， 1（开窗帘） 2（暂停窗帘）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td>—</td>
</tr>
<tr>
<td>CurtainOperation_2</td>
<td>2路窗帘操作</td>
<td>[0,1，2]</td>
<td>枚举值： 0(关窗帘)， 1（开窗帘） 2（暂停窗帘）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td>—</td>
</tr>
<tr>
<td>RunMode_1</td>
<td>1路窗帘电机工作模式</td>
<td>[0,1]</td>
<td>枚举值： 0（正常模式） 1（反向模式）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>RunMode_2</td>
<td>2路窗帘电机工作模式</td>
<td>[0,1]</td>
<td>枚举值： 0（正常模式） 1（反向模式）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Atomization_1</td>
<td>1路雾化器开关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
<tr>
<td>Atomization_2</td>
<td>2路雾化器开关</td>
<td>[0,1]</td>
<td>枚举值： 0（关闭） 1（开启）</td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
<td><strong>√</strong></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘操作指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainOperation_1",
            "Value":"1"
        }
    ]
}

控制反馈上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"CurtainOperation_1",
            "ModelId":"HY0128",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘电机工作模式控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"RunMode_2",
            "Value":"1"
        }
    ]
}

位置上报
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0128"
            "Key":"RunMode_8",
            "Value":"1"
        }
    ]
}
</code></pre></table>
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘位置控制，示例JSON
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Ctrl",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Atomization_2",
            "Value":"1"
        }
    ]
}

位置上报
{
    "Command":"Report",
    "FrameNumber":"00",
     "GatewayId":"0006D12345678909",
    "Type":"Attribute",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"HY0128",
            "Key":"Atomization_2",
            "Value":"1"
        }
    ]
}
</code></pre></table></div></div></div><h2>2.5、2.4 ZHA标准版辅控开关操作指令及上报（非阿里版辅控开关）</h2><div style="margin-left:20px;"><h3>2.5.1、ZHA标准版辅控开关说明</h3><div style="margin-left:0px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>设备名称</th>
<th>描述</th>
<th>支持指令</th>
</tr>
</thead>
<tbody>
<tr>
<td>一位辅控开关(标准版)</td>
<td>一位辅控开关入网后，必须绑定到一个主动开关上的某一个按键上（比如绑定到二位开关的第二路），用于控制主动开关对应按键的翻转。这种控制方式不依赖于网关，即绑定成功后，即使网关断电，辅控开关仍可以控制主动开关。 只能绑定到1、2、3位轻触多控智能开关的某一路</td>
<td>查询绑定列表； 绑定； 解绑；</td>
</tr>
<tr>
<td>二位辅控开关(标准版)</td>
<td>二位辅控开关入网后，必须绑定到一个主动开关上的某一个按键上（比如二位辅控开关的第一个按键绑定到二位开关的第二路），用于控制主动开关对应按键的翻转。这种控制方式不依赖于网关，即绑定成功后，即使网关断电，辅控开关仍可以控制主动开关。 只能绑定到1、2、3位轻触多控智能开关</td>
<td>查询绑定列表； 绑定； 解绑；</td>
</tr>
<tr>
<td>三位辅控开关(标准版)</td>
<td>三位辅控开关入网后，必须绑定到一个主动开关上的某一个按键上（比如绑定到三位开关的第二路），用于控制主动开关对应按键的翻转。这种控制方式不依赖于网关，即绑定成功后，即使网关断电，辅控开关仍可以控制主动开关。 只能绑定到1、2、3位轻触多控智能开关</td>
<td>查询绑定列表； 绑定； 解绑；</td>
</tr>
<tr>
<td>辅控窗帘开关(标准版)</td>
<td>辅控窗帘开关入网后，必须绑定到一个窗帘开关上，用于遥控被绑定的窗帘开关。这种控制方式不依赖于网关，即绑定成功后，即使网关断电，辅控窗帘开关仍可以控制主动开关。 只能绑定到窗帘开关</td>
<td>查询绑定列表； 绑定； 解绑；</td>
</tr>
</tbody>
</table></div><h3>2.5.2、ZHA标准版辅控设备的绑定指令</h3><div style="margin-left:0px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备控制："Bind"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>辅控开关地址：123位标准版辅控开关；标准版辅控窗帘</td>
</tr>
<tr>
<td>Data.Key</td>
<td>绑定动作</td>
<td></td>
<td>B：绑定； U：解除绑定； Q：查询绑定关系；（以下数据项无效）</td>
</tr>
<tr>
<td>Data.Value</td>
<td></td>
<td></td>
<td>{}</td>
</tr>
<tr>
<td>Data.Value.Function</td>
<td>绑定功能</td>
<td>字符串“%s”, 长度4</td>
<td>0006：On/Off 开关 0008：亮度调节 0102：窗帘开关</td>
</tr>
<tr>
<td>Data.Value.SrcEndpoint</td>
<td>辅控设备终端号</td>
<td>字符串"%s", 长度3</td>
<td>辅控设备的第几路：1\~255</td>
</tr>
<tr>
<td>Data.Value.DstAddr</td>
<td>目标地址</td>
<td>字符串"%s", 长度16</td>
<td>被绑定设备地址</td>
</tr>
<tr>
<td>Data.Value.DstEndpoint</td>
<td>目标终端号（设备第几路）</td>
<td>字符串"%s", 长度3</td>
<td>被绑定设备地址的第几路：1\~255</td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">窗帘辅控开关绑定窗帘开关，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Bind",
    "Data":[
        {
                "DeviceId":"123456787654310",   // 辅控窗帘开关地址
                "Key":"B"，
                "Value":{ "Function":"0102"， 
                          "SrcEndpoint": "1",  // 辅控窗帘的第1路
                          "DstAddr":"8765432112345678", //  窗帘开关地址
                          "DstEndpoint":"1"}              //  窗帘开关第一路
        }
    ]
}

解绑辅控设备的绑定关系，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Bind",
    "Data":[
        {
                "DeviceId":"123456787654310",   // 辅控开关地址
                "Key":"U",
                "Value":{"Function":"0006"，
                         "SrcEndpoint": "2",      // 辅控开关的第二路
                         "DstAddr":"AF6543AAF2345678",//  多控开关地址
                         "DstEndpoint":"2"}              //  多控开关第二路
        }
    ]
}

查询辅控设备的绑定关系，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Bind",
    "Data":[
        {
            "DeviceId":"123456787654310",   // 辅控设备地址
            "Key":"Q"
        }
    ]
}
</code></pre></table></div><h3>2.5.3、ZHA标准版辅控设备的绑定/解绑指令响应上报（异步上报）</h3><div style="margin-left:0px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Report"</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备控制："Bind"</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>辅控开关地址：123位标准版辅控开关；标准版辅控窗帘</td>
</tr>
<tr>
<td>Data.ModelId</td>
<td>辅控设备 ModelId</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Data.Key</td>
<td>响应类型</td>
<td>字符串"%s",</td>
<td>"B"：绑定； </br>"U"：解绑。</td>
</tr>
<tr>
<td>Data.Value</td>
<td>绑定结果</td>
<td>字符串"%s",</td>
<td>0：成功；</br>1：命令非法； </br>2：绑定表已满； </br>3：不支持绑定； </br>88：绑定不存在（仅对解绑有效）</td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">辅控设备的绑定指令的响应上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Bind",
    "Data":[
        {
            "DeviceId":"123456787654310",  //辅控开关地址
            "ModelId":"HY0036",
            "Key":"B",
            "Value":"0"                //  绑定成功
        }
    ]
}
</code></pre></table></div><h3>2.5.4、ZHA标准版辅控设备的绑定关系表上报（异步上报）</h3><div style="margin-left:0px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>辅控开关地址：</br>123位标准版辅控开关；</br>标准版辅控窗帘</td>
</tr>
<tr>
<td>Data.Key</td>
<td>响应类型</td>
<td>字符串"%s",</td>
<td>"Q"：查询；</td>
</tr>
<tr>
<td>Data.ModelId</td>
<td>辅控设备 ModelId</td>
</tr>
<tr>
<td>Data.TotalCount</td>
<td>绑定总数</td>
</tr>
<tr>
<td>Data.StartIndex</td>
<td>绑定表开始索引</td>
<td></td>
<td>从0开始</td>
</tr>
<tr>
<td>Data.BindingTable</td>
<td>绑定表</td>
<td></td>
<td>数组类型</td>
</tr>
<tr>
<td>Data.BindingTable.Function</td>
<td>绑定功能</td>
<td></td>
<td>0006：On/Off 开关功能 </br>0008：亮度调节 </br>0102：窗帘开关停</td>
</tr>
<tr>
<td>Data.BindingTable.SrcAddr</td>
<td>辅控设备地址</td>
<td>字符串"%s", 长度16</td>
<td>和DeviceId相同</td>
</tr>
<tr>
<td>Data.BindingTable.SrcEndpointId</td>
<td>辅控设备终端号</td>
<td></td>
<td>第几路</td>
</tr>
<tr>
<td>Data.BindingTable.DstAddrMode</td>
<td></td>
<td></td>
<td>1：组模；（不支持） 3：单点模式</td>
</tr>
<tr>
<td>Data.BindingTable.DstAddr</td>
<td>目标地址</td>
<td></td>
<td>被绑定设备的地址(MAC)</td>
</tr>
<tr>
<td>Data.BindingTable.DstEndpointId</td>
<td>目标终端号</td>
<td></td>
<td>被绑定设备的第几路</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>
注：一次最多上报3个绑定关系，当上报绑定关系小于3个时，上报完毕。</strong></p>
<table width='100%' class='codestyle'><pre><code class="language-json">辅控设备的绑定关系表上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Bind",
    "Data":[
            {
            "DeviceId":"123456787654310",  //辅控开关地址
            "ModelId":"HY0036",
            "Key":"Q" ,                            //绑定关系响应上报
            "TotalCount":"5",
            "StartIndex":"0",
            "BindingTable":[
               {"SrcAddr":"123456787654310","SrcEndpointId":"1","Function":"0006",
                 "DstAddrMode":"3","DstAddr":"0006FD0601020101","DstEndpointId":"1"},
               {"SrcAddr":"123456787654310","SrcEndpointId":"2","Function":"0006",
                 "DstAddrMode":"3","DstAddr":"0006FD0601020101","DstEndpointId":"2"},
               {"SrcAddr":"123456787654310","SrcEndpointId":"3","Function":"0006",
                 "DstAddrMode":"3","DstAddr":"0006FD0601020101","DstEndpointId":"3"}
                           ]
            }
          ]
}
</code></pre></table></div></div><h2>2.6、2.5 管理分组</h2><div style="margin-left:20px;"><h3>2.6.1、管理分组指令</h3><div style="margin-left:0px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备控制:"Group"</td>
<td></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
<tr>
<td>Data.Key</td>
<td>管理动作</td>
<td></td>
<td>A：添加分组；</br> D：删除特定分组； </br>C：删除所有分组；</br> Q：查询分组</td>
</tr>
<tr>
<td>Data.Value</td>
<td>分组号</td>
<td></td>
<td>1\~65527，一般情况下统一设备最多支持10\~20个分组</td>
</tr>
<tr>
<td>Data.Endpoint</td>
<td>第几路</td>
<td></td>
<td>多路设备的第几路，如给三位开关的第二路分组，Endpoint=2</td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">添加分组，示例JSON:
{
    "Command":" Dispatch ",
    "FrameNumber":"00",
    "Type":"Group",
    "Data":[
        {
                DeviceId":"123456787654310",
                "Key":"A",
                "Value":"25",
                "Endpoint":"1"
        }
    ]
}

删除第25分组，示例JSON:
{
    "Command":" Dispatch ",
    "FrameNumber":"00",
    "Type":"Group",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"D",
            "Value":"25",
            "Endpoint":"1"
        }
    ]
}

删除所有分组，示例JSON:
{
    "Command":" Dispatch ",
    "FrameNumber":"00",
    "Type":"Group",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"C",
            "Endpoint":"1"
        }
    ]
}

查询分组，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Group",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "Key":"Q", 
            "Endpoint":"1"
        }
    ]
}
</code></pre></table></div><h3>2.6.2、分组信息上报（异步上报）</h3><div style="margin-left:0px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备控制："Group"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
<tr>
<td>Data.ModelId</td>
<td>设备ModelId</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Data.Key</td>
<td>响应类型</td>
<td>字符串"%s",</td>
<td>A：添加分组； </br>D：删除特定分组； </br>C：删除所有分组； </br>Q：查询分组</td>
</tr>
<tr>
<td>Data.Endpoint</td>
<td>第几路</td>
<td></td>
<td>多路设备的第几路，如三位开关的第二路分组，Endpoint=2</td>
</tr>
<tr>
<td>Data.GroupId</td>
<td>组号</td>
<td></td>
<td>当Key==C或Q时忽略此项</td>
</tr>
<tr>
<td>Data.Value</td>
<td>结果</td>
<td></td>
<td>A：00表示成功，</br>8A表示已经存在；</br> D：00表示成功，</br>8B表示已经存在；</br> C：00表示成功； </br>Q： [“1”,”2”,”3”]</td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">添加分组结果上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Group",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"YG0001",
            "Key":"A",
            "Endpoint":"1",
             "Value":"00"
        }
    ]
}

删除分组结果上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Group",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"YG0001",
            "Key":"D",
            "Endpoint":"1",
            "Value":"8B"
        }
    ]
}

删除所有分组结果上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Group",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"YG0001",
            "Key":"C",
            "Endpoint":"1",
            "Value":"00"
        }
    ]
}

查询分组结果上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Group",
    "Data":[
        {
            "DeviceId":"123456787654310",
            "ModelId":"YG0001",
            "Key":"Q",
            "Endpoint":"1",
            "Value": [“1”,”2”,”3”]
        }
    ]
}
</code></pre></table></div></div><h2>2.7、2.12 多控绑定同步</h2><div style="margin-left:20px;"></div><h2>2.8、2.6 管理场景</h2><div style="margin-left:20px;"><h3>2.8.1、管理场景指令</h3><div style="margin-left:0px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备控制：<strong>"Scene"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>Data.deviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td>执行场景时”FFFFFFFFFFFFFFFF”</td>
</tr>
<tr>
<td>Data.Key</td>
<td>管理动作</td>
<td>字符串"%s",</td>
<td>A：添加场景； </br>S：修改场景面板对应按键名称 </br>D：删除单个场景； </br>C：删除分组下所有场景； </br>E：执行场景； </br>Q：查询场景；</td>
</tr>
<tr>
<td>Data.Endpoint</td>
<td>第几路</td>
<td></td>
<td>默认应等于1，但多路设备的第几路，如给三位开关的第二路分组，Endpoint=2</td>
</tr>
<tr>
<td>Data.Value</td>
<td></td>
<td>{}</td>
<td></td>
</tr>
<tr>
<td>Data.Value.GroupId</td>
<td>分组号</td>
<td>长度5</td>
<td>1\~65527，场景属于某个分组</td>
</tr>
<tr>
<td>Data.Value.SceneId</td>
<td>场景号</td>
<td>3</td>
<td>1\~255，一般设备支持10个场景</td>
</tr>
<tr>
<td>Data.Value.SceneName</td>
<td>场景名称</td>
<td>16</td>
<td>Key=S时有效，仅支持液晶场景面板</td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">添加场景，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Scene",
    "Data":[
        {
                "DeviceId":"123456787654310",   // 执行场景的设备地址
                "Key":"A"，
                "Endpoint":"2",
                "Value":{
                "GroupId":"2"，
                "SceneId": "1"
                                 }
        }
    ]
}

设置场景面板的名称文字或图片，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Scene",
    "Data":[
        {
                "DeviceId":"123456787654310",
                "Key":"S",
                "Endpoint":"1",  //  写死
                "Value":{
                "GroupId":"2",
                "SceneId": "1", //  对应液晶场景面板的按键号
                "SceneName":"回家"
                            }
    ]
}

删除设备的2分组下的场景1，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Scene",
    "Data":[
        {
                "DeviceId":"123456787654310",
                "Key":"D",
                "Endpoint":"2",
                "Value":{
                "GroupId":"2",
                "SceneId":"1"
                            }
        }
    ]
}

删除设备的2分组下的所有场景，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Scene",
    "Data":[
        {
                "DeviceId":"123456787654310",
                "Key":"C",
                "Endpoint":"1",
                "Value":”2"
        }
    ]
}

执行属于2分组下所有设备的场景1，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Scene",
    "Data":[
        {
                "DeviceId":"FFFFFFFFFFFFFFFF",   //广播地址
                "Key":"E",
                "Endpoint":"1",
                "Value":{
                "GroupId":"2",
                "SceneId": "1"
                 }
        }
    ]
}

执行某个设备2分组下的场景1，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Scene",
    "Data":[
        {
                "DeviceId":"1234567887654321",
                "Key":"E",
                "Endpoint":"1"
                "Value":{
                "GroupId":"2",
                "SceneId": "1"
                }
        }
    ]
}

查询某个设备2分组下的所有场景号，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Scene",
    "Data":[
        {
                "DeviceId":"1234567887654321",
                "Key":"Q",
                "Endpoint":"1",
                "Value":”2”
        }
    ]
}
</code></pre></table></div><h3>2.8.2、场景信息上报（异步上报）</h3><div style="margin-left:0px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Report"</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备控制："<strong>Scene</strong>"</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
<tr>
<td>Data.ModelId</td>
<td>设备ModelId</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Data.Key</td>
<td>响应类型</td>
<td></td>
<td>A：添加分组； </br>S：设置场景名称 </br>D：删除单个场景； </br>C：删除所有场景 </br>Q：查询分组</td>
</tr>
<tr>
<td>Data.Value</td>
<td></td>
<td></td>
<td>{}</td>
</tr>
<tr>
<td>Data.Value.Result</td>
<td>设置结果</td>
<td></td>
<td>A：00表示成功,85无效，89存储不足； </br>S：00表示成功 </br>D：00表示成功；8B为此场景 </br>C：00表示成功</td>
</tr>
<tr>
<td>Data.Value.GroupId</td>
<td>分组号</td>
<td>长度5</td>
<td>1\~65527，场景属于某个分组</td>
</tr>
<tr>
<td>Data.Value.SceneId</td>
<td>场景号</td>
<td>3</td>
<td>1\~255，一般设备支持10个场景</td>
</tr>
<tr>
<td>Data.Value.MemberShip</td>
<td>场景号数组</td>
<td>16</td>
<td>查询Q时有效，[“1”,”2”,”3”]</td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">添加场景响应，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Scene",
    "Data":[
        {
            "DeviceId":"123456787654310",   //场景 执行设备的地址
            "ModelId":"YG0001",
            "Key":"A",
            "Value":{"Result":"00",
            "GroupId":"2",
            "SceneId": "1"
                                 }
        }
    ]
}

设置场景面板的名称文字或图片响应，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Scene",
    "Data":[
        {
                "DeviceId":"123456787654310",
                "ModelId":"5f0c3b",
                "Key":"S",
                "Value":{
                "GroupId":"2",
                "SceneId": "1",//  对应液晶场景面板的按键号
                "Result":"00"
                }
    ]
}

删除设备的2分组下的场景1响应，示例JSON:
{
    "Command":" Report ",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Scene",
    "Data":[
        {
                "DeviceId":"123456787654310",
                "ModelId":"YG0001",
                "Key":"D",
                "Value":{
                         "GroupId":"2",
                         "SceneId": "1",
                          "Result":”00”
                 }
        }
    ]
}

删除设备的2分组下的所有场景，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"Scene",
    "Data":[
        {
                "DeviceId":"123456787654310",
                "ModelId":"YG0001",
                "Key":"C",
                "Value":{
                         "GroupId":"2",
                         "Result":”00”
                }

        }
    ]
}

查询某个设备2分组下的所有场景号响应，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Scene",
    "Data":[
        {
            "DeviceId":"1234567887654321",
            "ModelId":"YG0001",
            "Key":"Q",
            "Value":{
                      "GroupId":"2",
                      "MembeShip":[“1”,”2”,”3”]
                    }
        }
    ]
}
</code></pre></table></div></div><h2>2.9、2.7 组播指令</h2><div style="margin-left:20px;"><h3>2.9.1、组播指令</h3><div style="margin-left:0px;"><p><strong>注：只针对同类型设备的同时控制，使用前必须将同类型设备都分到一个组（参看5、管理分组）</strong></p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备控制："Multicast"</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>Data.GroupId</td>
<td>设备ID</td>
<td>字符串"%s", 长度16</td>
<td></td>
</tr>
<tr>
<td>Data.Type</td>
<td>类型代码</td>
<td>字符串"%s"</td>
<td>参看附录2 组播支持产品列表</td>
</tr>
<tr>
<td>Data.Key</td>
<td>管理动作</td>
<td>字符串"%s",</td>
<td>参看附录2 组播支持产品列表</td>
</tr>
<tr>
<td>DataValue</td>
<td>分组号</td>
<td>字符串"%s",</td>
<td>参看附录2 组播支持产品列表</td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">组播二位轻触多控智能开关的第二路开指令，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Multicast",
    "Data":[
        {
            "GroupId":"123456787654310",
            "Type":"C",
            "Key":"State",
            "Value":"1"
        }
    ]
}
</code></pre></table></div></div><h2>2.10、2.8 空调温控器面板与485多路空调协议转换器的绑定</h2><div style="margin-left:20px;"><h3>2.10.1、空调温控器与485多路空调协议转换器的绑定相关指令</h3><div style="margin-left:0px;"><p><strong>注：该绑定操作适用于后装场景，即室内布线已经结束无法修改的情况。此时若应用空调温控器面板，则需要加入一个485多路空调协议转换器，将空调温控器面板与485协议转换器在网关中做绑定关系。
实际应用时，空调温控器面板上报参数值，网关接收到上报后，匹配绑定的485协议转换器，然后将该消息转发给485协议转换器的对应第几路，实现中央空调的控制。</strong></p>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备控制：<strong>"AirBind"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>485多路空调协议转换器地址</td>
<td>字符串"%s", 长度16</td>
</tr>
<tr>
<td>Data.Key</td>
<td>操作</td>
<td></td>
<td>A：添加绑定关系； </br>D：删除特定绑定关系； </br>C：删除所有绑定关系； </br>Q：查询485多路空调协议转换器的所有绑定；</td>
</tr>
<tr>
<td>Data.Value</td>
<td></td>
<td></td>
<td>{}</td>
</tr>
<tr>
<td>Data.Value.PannelAddr</td>
<td>空调温控器面板地址</td>
<td>字符串"%s",长度16</td>
<td></td>
</tr>
<tr>
<td>Data.Value.TargetEndpoint</td>
<td>绑定到485多路空调协议转换器第几路</td>
<td></td>
<td>1~16</td>
</tr>
</tbody>
</table>
<table width='100%' class='codestyle'><pre><code class="language-json">将空调温控器面板与485多路空调协议转换器的第2路绑定，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"AirBind",
    "Data":[
                  {
                    "DeviceId":"1234567890ABCDEF", //485多路空调协议转换器地址
                    "Key":"A",
                    "Value":{ 
                              "PannelAddr":"1234567887654321", //空调温控器面板
                              "Endpoint":"2"
                            }
                  }
             ]
}

删除空调温控器面板与485多路空调协议转换器的第2路绑定关系，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"AirBind",
    "Data":[
                  {
                     "DeviceId":"1234567890ABCDEF", //485多路空调协议转换器地址
                     "Key":"D",
                     "Value":{
                               "PannelAddr":"1234567887654321", //空调温控器面板
                                "Endpoint":"2"
}
                  }
               ]
}

删除网关中所有空调绑定关系，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"AirBind",
    "Data":[
                  {
                     "DeviceId":"00000000000000000",
                     "Key":"C"
                  }
               ]
}

查询某个485多路空调协议转换器的所有绑定关系，示例JSON:
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"AirBind",
    "Data":[
                  {
                     "DeviceId":"1234567890ABCDEF", //485多路空调协议转换器地址
                     "Key":"Q"
                  }
               ]
}
</code></pre></table></div><h3>2.10.2、绑定操作对应的上报信息</h3><div style="margin-left:0px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Report"</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备控制：<strong>"AirBind"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>485多路空调协议转换器地址</td>
<td></td>
<td>当Key=C时，为网关地址16个0</td>
</tr>
<tr>
<td>Data.Key</td>
<td>操作</td>
<td></td>
<td>A：添加绑定关系； </br>D：删除特定绑定关系； </br>C：删除所有绑定关系； </br>Q：查询485多路空调协议转换器的所有绑定</td>
</tr>
<tr>
<td>Data.Value</td>
<td></td>
<td></td>
<td>{}</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>Data.Value.Result</td>
<td>结果反馈</td>
<td></td>
<td>成功：00 当Key=Q时，忽略</td>
</tr>
<tr>
<td>Data.Value.PannelAddr</td>
<td>空调温控器面板地址</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Data.Value.Endpoint</td>
<td>绑定到485多路空调协议转换器第几路</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">将空调温控器面板与485多路空调协议转换器的第2路绑定结果上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"AirBind",
    "Data":[
                  {
                     "DeviceId":"1234567890ABCDEF", //485多路空调协议转换器地址
                     "Key":"A",
                     "Value":{
                              "Result":"00",
                              "PannelAddr":"1234567887654321", //空调温控器面板
                              "Endpoint":"2"
}
                  }
               ]
}

删除空调温控器面板与485多路空调协议转换器的第2路绑定关系上报，示例JSON:
{
    "Command":" Report ",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"AirBind",
    "Data":[
                  {
                     "DeviceId":"1234567890ABCDEF", //485多路空调协议转换器地址
                     "Key":"D",
                     "Value":{ 
                        "Result":"00",
                        "PannelAddr":"1234567887654321", //空调温控器面板
                        "Endpoint":"2"
}
                  }
               ]
}

删除网关中所有空调绑定关系上报，示例JSON:
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"AirBind",
    "Data":[
                     "DeviceId":"0000000000000000", //485多路空调协议转换器地址
                    "Key":"C",
                     "Value":{
                               "Result":"00"
                             }
            ]
}

查询某个485多路空调协议转换器的所有绑定关系上报，示例JSON:
{
    "Command":" Report ",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"AirBind",
    "Data":[
                  {
                     "DeviceId":"1234567890ABCDEF", //485多路空调协议转换器地址
                    "Key":"Q",
                    "Value":[
                                   {"PannelAddr":"000D6F000E88CF00", "Endpoint":"1"},
                                   {"PannelAddr":"000D6F000E88CF01", "Endpoint":"2"},
                                   {"PannelAddr":"000D6F000E88CF02", "Endpoint":"3"}
                           ]
                  }
          ]
}
</code></pre></table></div></div><h2>2.11、2.9 快速入网指令及上报（暂不支持）</h2><div style="margin-left:20px;"><h3>2.11.1、快速入网指令及网关响应（暂不支持）</h3><div style="margin-left:0px;"><p><strong>注：
a)  主要用于工程项目，网关在获取到白名单设备地址后，允许白名单设备在未入网状态时, 重新上电后快速入网。
a)  网关COO固件必须大于版本20190505；
b)  同时，子设备固件必须支持快速入网功能，即在未配网状态，重新上电后，子设备直接进入5分钟的快速入网状态，若快速入网成功，五分钟结束后，会自动加入网关；若没有配网成功，5分钟结束后，进入待配网状态，此时需要人为触发配网按键配网；</strong></p>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"FastJoin"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>Data.TotalNum</td>
<td>总共下发数量</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.EndNum</td>
<td>已下发设备数量</td>
<td>字符串"%s"</td>
<td>整数， 0\< EndNum\<= TotalNum 当EndNum== TotalNum时，网关端才正式开启执行入网功能。</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备ID数组</td>
<td>字符串数组[<strong>"1234567887654321"</strong>]</td>
<td>一次最多20个地址，大于20个的地址分至少2次下发</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>快速入网指令响应：并不代表设备已入网</strong>：</p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"FastJoin"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td>[]</td>
</tr>
<tr>
<td>TotalNum</td>
<td>总共下发数量</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>EndNum</td>
<td>已下发设备数量</td>
<td>字符串"%s"</td>
<td>整数，</td>
</tr>
<tr>
<td>Result</td>
<td>接收结果</td>
<td>字符串"%s"</td>
<td>0：表示<strong>快速入网指令</strong>接收成功； 其他：失败。</td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">允许设定的23个设备地址快速入网，则分两条指令下发，
第一条指令如下：
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"FastJoin",
    "Data":[
             {
                "TotalNum":"23",
                "EndNum":"20",
                "DeviceId":[
                            "3456789012345601","3456789012345602","3456789012345603",
                            "3456789012345604","3456789012345605","3456789012345606",
                            "3456789012345607","3456789012345608","3456789012345609",
                            "3456789012345610","3456789012345611","3456789012345612",
                            "3456789012345613","3456789012345614","3456789012345615",
                            "3456789012345616","3456789012345617","3456789012345618",
                            "3456789012345619","3456789012345620"
                            ]
              }
           ]
}

网关收到后的响应JSON，如下：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"FastJoin",
    "Data":[{"TotalNum":"23",
    "EndNum":"20",
    "Result":"0"
}]
}

第二条指令如下：
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"FastJoin",
    "Data":[
              {
                "TotalNum":"23",
                "EndNum":"23",
                "DeviceId":["3456789012345601","3456789012345602","3456789012345603"]
               }
            ]
}

网关收到第二条指令后响应JSON，如下：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"FastJoin",
    "Data":[
              {
                "TotalNum":"23",
                "EndNum":"23",
                "Result":"0"
              }
        ]
}
</code></pre></table></div><h3>2.11.2、快速入网结果上报（暂不支持）</h3><div style="margin-left:0px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"FastJoinResult"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型[]</td>
<td>1、每次结果上报最多20个地址； </br>2、快速入网关闭时上报空[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备地址或mac</td>
<td>字符串"%s"</td>
<td>长度16个字节</td>
</tr>
<tr>
<td>Data.Result</td>
<td>快速入网结果</td>
<td>字符串"%s"</td>
<td>0：快速入网失败； </br>1：快速入网成功； </br>注：若有设备未入网，则在最后统一上报所有未入网设备信息</td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">下发5个地址，只有两个入网，结果回复如下
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"FastJoinResult",
    "Data":[ {"DeviceId":"1234567887654321","Result":"1"},
             {"DeviceId":"1234567887654322","Result":"1"},
             {"DeviceId":"1234567887654323","Result":"0"},
             {"DeviceId":"1234567887654324","Result":"1"},
             {"DeviceId":"1234567887654325","Result":"1"}
          ]
}

快速入网结束上报：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"FastJoinResult",
    "Data":[]
}
</code></pre></table></div></div><h2>2.12、2.10 网关签名指令</h2><div style="margin-left:20px;"><h3>2.12.1、设置网关签名指令</h3><div style="margin-left:0px;"><p><strong>注：
1、如果要重新签名：则要首先擦除所有签名信息
2、以下各项签名数据可选择性签写；
</strong></p>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为*"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"SetSig"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型[]</td>
<td>[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备地址或mac</td>
<td>字符串"%s"</td>
<td>长度16个0</td>
</tr>
<tr>
<td>Data.Key</td>
<td>写入参数名称</td>
<td>字符串"%s"</td>
<td>1、"Clear"：擦除所有签名 </br>2、"ProductModel":写入ProductModel; </br>3、"ProductKey":写入ProductKey;</br>4、"ProductSecret":写入ProductSecret;</br>5、“ProductName”:写入ProductName;</br>6、"DeviceSecret":写入DeviceSecret;</br>7、“DeviceKey”:写入DeviceKey;</td>
</tr>
<tr>
<td>Data.Value</td>
<td></td>
<td>字符串"%s"</td>
<td>0：对应Clear</br> "ProductModel":80个字符；</br>"ProductKey":20个字符；</br>"ProductSecret”:40个字符</br>"ProductName":32个字符</br>"DeviceSecret":32个字符</br>"DeviceKey":20个字符;</td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">擦除所有签名信息：
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"SetSig",
    "Data":[ 
             {
                "DeviceId":"0000000000000000",
                "Key":"Clear",
                "Value":"0"
            }
         ]
}

写入ProductModel信息：
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"SetSig",
    "Data":[ 
            {
                "DeviceId":"0000000000000000",
                "Key":"ProductModel",
                "Value":"Rexense_RG4100"
            }
        ]
}

写入DeviceSecret信息：
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"SetSig",
    "Data":[
            {
                "DeviceId":"0000000000000000",
                "Key":"DeviceSecret",
        "       Value":" NeA8Wc7srpAZHEMuru867oblOLN2QCC1"
            }
        ]
}
</code></pre></table></div><h3>2.12.2、网关签名指令结果上报</h3><div style="margin-left:0px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td> <strong>"</strong>SetSig<strong>";</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型[]</td>
<td>[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备地址或mac</td>
<td>字符串"%s"</td>
<td>长度16个0 </td>
</tr>
<tr>
<td>Data.Key</td>
<td>写入参数名称</td>
<td>字符串"%s"</td>
<td>“Clear” ：擦除所有签名 “ProductModel”: “ProductKey”; “ProductSecret”; “ProductName”; “DeviceSecret”; “DeviceKey”;</td>
</tr>
<tr>
<td>Data.Value</td>
<td></td>
<td>长度</td>
<td>0： 失败 1：成功</td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">擦除所有签名结果上报：
{
    "Command":"Report",
    "FrameNumber":"00",
     "GatewayId":"0006D12345678909",
    "Type":"SetSig",
    "Data":[ 
{
        "DeviceId":"0000000000000000", 
        "Key":"Clear",
        "Value":"1"
}
]
}

写入ProductModel信息结果上报：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"SetSig",
    "Data":[ 
{
        "DeviceId":"0000000000000000", 
        "Key":"ProductModel",
        "Value":"0"
}
]
}
</code></pre></table></div><h3>2.12.3、查询网关签名信息指令</h3><div style="margin-left:0px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Dispatch"</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"GetSig"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型[]</td>
<td>[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备地址或mac</td>
<td>字符串"%s"</td>
<td>长度16个0 </td>
</tr>
<tr>
<td>Data.Key</td>
<td></td>
<td>字符串"%s"</td>
<td>“Signature”</td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">查询网关签名信息：
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"GetSig",
    "Data":[
                {
                "DeviceId":"0000000000000000",
                "Key":"Signature"
                }
           ]
}
</code></pre></table></div><h3>2.12.4、网关签名信息上报</h3><div style="margin-left:0px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td><strong>"GetSig"</strong></td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型[]</td>
<td>[]</td>
</tr>
<tr>
<td>Data.DeviceId</td>
<td>设备地址或mac</td>
<td>字符串"%s"</td>
<td>长度16个0</td>
</tr>
<tr>
<td>Data.ProductModel</td>
<td></td>
<td>字符串"%s"</td>
<td>最大80个字符</td>
</tr>
<tr>
<td>Data.ProductKey</td>
<td></td>
<td>字符串"%s"</td>
<td>最大20个字符</td>
</tr>
<tr>
<td>Data.ProductSecret</td>
<td></td>
<td>字符串"%s"</td>
<td>最大40个字符</td>
</tr>
<tr>
<td>Data.ProductName</td>
<td></td>
<td>字符串"%s"</td>
<td>最大32个字符</td>
</tr>
<tr>
<td>Data.DeviceKey</td>
<td></td>
<td>字符串"%s"</td>
<td>最大20个字符</td>
</tr>
<tr>
<td>Data.DeviceSecret</td>
<td></td>
<td>字符串"%s"</td>
<td>最大32个字符</td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">查询网关签名信息：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"GetSig",
    "Data":[
                {
                "DeviceId":"0000000000000000",
                "ProductModel":"Signature",
                "ProductKey":"azcbdhj357637",
                "ProductSecret":"1352152626",
                "ProductNam ":"",
                "DeviceSecret":"we5ret7vc",
                "DeviceKey":"435bffj57"
                }
            ]
}
</code></pre></table></div></div><h2>2.13、2.11 本地场景指令</h2><div style="margin-left:20px;"><h2>2.13.1、2.11.1场景控制指令以及场景上报指令</h2><div style="margin-left:0px;"><h3>2.13.1.1、添加场景</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>场景相关："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>添加场景："AddScene"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>详见，注1.如果场景ID已存在，则修改相应的场景，长度不超过64</td>
</tr>
<tr>
<td>Data.Name</td>
<td>场景名称</td>
<td>字符串"%s"</td>
<td>长度不超过128</td>
</tr>
<tr>
<td>Data.Enable</td>
<td>该场景使能开关</td>
<td>字符串"%s"</td>
<td>0表示该场景无效，1表示有效</td>
</tr>
<tr>
<td>Data.ExecDelayed</td>
<td>场景执行延时时间</td>
<td>字符串"%s"</td>
<td>单位秒</td>
</tr>
<tr>
<td>Data.UpdateTime</td>
<td>场景最后修改时间</td>
<td>字符串"%s"</td>
<td>非必要参数，长度不超过64</td>
</tr>
<tr>
<td>Data.Note</td>
<td>场景备注</td>
<td>字符串"%s"</td>
<td>非必要参数，长度不超过128</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>注：场景Id由调用者提供，要保证全网唯一</strong>
添加场景JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
     "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
            "Op":"AddScene",
            "Id":"000D6F000EC7B98B0001",
            "Name":"home",
            "Enable": "1",
            "ExecDelayed":"100",
            "UpdateTime":"", 
            "Note":""
                }
]
}
</code></pre></table></div><h3>2.13.1.2、删除场景</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为"00"</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>删除场景："DelScene"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>详见注1</td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p><strong>注1：Id为要删除的场景id，如果Id值设为“All”，则清空所有的场景</strong></p>
<p>删除场景JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
                    "Op":"DelScene",
                    "Id":"000D6F000EC7B98B0001"
                }
]
}
</code></pre></table></div><h3>2.13.1.3、获取场景</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>获取场景："GetScene"</td>
</tr>
</tbody>
</table>
<hr />
<p>获取场景JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
     "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
        "Op":"GetScene"
                }
]
}
</code></pre></table></div><h3>2.13.1.4、场景上报</h3><div style="margin-left:30px;"><p>该上报为获取场景指令的同步返回</p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>获取场景："GetScene"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>如果场景列表为空，则该值为："none"</td>
</tr>
<tr>
<td>Data.Name</td>
<td>场景名称</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Enable</td>
<td>该场景使能开关</td>
<td>字符串"%s"</td>
<td>0表示该场景无效，1表示有效</td>
</tr>
<tr>
<td>Data.ExecDelayed</td>
<td>场景执行延时时间</td>
<td>字符串"%s"</td>
<td>单位秒</td>
</tr>
<tr>
<td>Data.UpdateTime</td>
<td>场景最后修改时间</td>
<td>字符串"%s"</td>
<td>默认值为0</td>
</tr>
<tr>
<td>Data.Note</td>
<td>场景备注</td>
<td>字符串"%s"</td>
<td>默认值为0</td>
</tr>
</tbody>
</table>
<hr />
<p>场景上报JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">场景列表为空时：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"LocalScene",
    "Data":[
{
        "Op":"GetScene",
        "Id":"none"
                }
]
}
场景列表有多条时：
{
     "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"LocalScene",
    "Data":[
{
                    "Op":"GetScene",
                    "Id":"000D6F000EC7B98B0001",
                    "Name":"home",
                    "Enable": "1",
                    "ExecDelayed":"100",
                    "UpdateTime":"", 
                    "Note":""
                },
{
                    "Op":"GetScene",
                    "Id":"000D6F000EC7B98B0002",
                    "Name":"home1",
                    "Enable": "0",
                    "ExecDelayed":"100",
                    "UpdateTime":"", 
                    "Note":""
                },
{
                    "Op":"GetScene",
                    "Id":"000D6F000EC7B98B0003",
                    "Name":"home2",
                    "Enable": "1",
                    "ExecDelayed":"100",
                    "UpdateTime":"", 
                    "Note":""
                }
]
}
</code></pre></table></div><h3>2.13.1.5、执行场景</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>执行场景："ExecScene"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Enable</td>
<td>场景使能</td>
<td>字符串"%s"</td>
<td>非必选参数</td>
</tr>
</tbody>
</table>
<hr />
<p>执行场景JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
        "Op":"ExecScene",
        "Id":"000D6F000EC7B98B0001",
        "Enable":"1"
                }
]
}
</code></pre></table></div><h3>2.13.1.6、场景执行上报（通过异步接口上报）</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>执行场景："ExecScene"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>执行场景JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
     "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"LocalScene",
    "Data":[
{
        "Op":"ExecScene",
        "Id":"000D6F000EC7B98B0001"
                }
]
}
</code></pre></table></div></div><h2>2.13.2、2.11.2 实体场景面板绑定场景相关指令(废弃)（仍支持，但不建议使用）</h2><div style="margin-left:0px;"><h3>2.13.2.1、绑定场景</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>绑定场景："BindScene"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.DevId</td>
<td>设备ID</td>
<td>字符串"%s"</td>
<td>场景面板IEEE地址</td>
</tr>
<tr>
<td>Data.Key</td>
<td>设备键名</td>
<td>字符串"%s"</td>
<td>场景面板按钮键值，长度不超过128</td>
</tr>
<tr>
<td>Data.Value</td>
<td>设备键值</td>
<td>字符串"%s"</td>
<td>场景面板按钮值，长度不超过128</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>
注1
“1”表示按下该场景面板后，使能场景，并且如果该场景仅有动作，没有条件，或者条件中有“手动触发”条件，则立即执行该场景的所有动作。”0”表示按下该场景面板后，禁用场景。</strong></p>
<p>绑定场景JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
        "Op":"BindScene",
        "Id":"000D6F000EC7B98B0003",
        "DevId":"000D6F000EC7B98B",
        "Key":"Switch",
        "Value":"1"
                }
]
}
</code></pre></table></div><h3>2.13.2.2、解绑场景</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>删除场景动作："UnbindScene"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.DevId</td>
<td>场景面板ID</td>
<td>字符串"%s"</td>
<td>详见注1</td>
</tr>
<tr>
<td>Data.Key</td>
<td>场景面板键名</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Value</td>
<td>场景面板按钮值</td>
<td>字符串"%s"</td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p><strong>
注1：DevId为要解绑的场景面板的DevId，如果DevId设置为“All”，则解绑该场景绑定的所有场景面板。</strong></p>
<p>解绑场景JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
            "Op":"UnbindScene",
            "Id":"000D6F000EC7B98B0003",
            "DevId":"000D6F000EC7B98B",
            "Key":"",
            "Value":""
                }
]
}
</code></pre></table></div><h3>2.13.2.3、获取场景绑定的实体面板</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>获取场景动作："GetBindScene"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<table width='100%' class='codestyle'><pre><code class="language-json">获取场景绑定的实体面板指令JSON示例：
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
            "Op":"GetBindScene",
            "Id":"000D6F000EC7B98B0003"
                }
]
}
</code></pre></table></div><h3>2.13.2.4、场景绑定上报</h3><div style="margin-left:30px;"><ul>
<li>该上报为获取场景绑定的实体面板指令的同步返回</li>
</ul>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>获取场景动作："GetBindScene"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.DevId</td>
<td>设备ID</td>
<td>字符串"%s"</td>
<td>如果动作列表为空，则该值为none</td>
</tr>
<tr>
<td>Data.Key</td>
<td>设备键名</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Value</td>
<td>设备键值</td>
<td>字符串"%s"</td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>获取场景绑定信息JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">如果场景绑定列表为空：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"LocalScene",
    "Data":[
{
            "Op":"GetBindScene",
            "Id":"000D6F000EC7B98B0003",
             "DevId":"none"
                }
]
}
如果场景绑定列表非空
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"LocalScene",
    "Data":[
{
            "Op":"GetBindScene",
            "Id":"000D6F000EC7B98B0003",
            "DevId":"000D6F000EC7B98B",
            "Key":"Switch",
            "Value":"1"
                }
]
}
</code></pre></table></div></div><h2>2.13.3、2.11.3 动作控制指令以及动作上报指令</h2><div style="margin-left:0px;"><h3>2.13.3.1、条件控制指令以及条件上报指令</h3><div style="margin-left:30px;"><p>&nbsp; &nbsp; &nbsp; &nbsp;场景的触发条件分为“或条件”以及“与条件”，它们的逻辑是这样的“<strong>如果满足或条件中的至少任意一个条件，并且满足与条件中的所有条件，则执行某些动作</strong>”。“或条件”以及“与条件”都允许为空，如果两者都为空，则该场景只允许手动触发。如果“或条件”为空，且“与条件”非空，则此时的逻辑是“<strong>如果满足满足与条件中的所有条件，则执行某些动作</strong>”。如果“或条件”为非空，并且“与条件”为空，则此时的逻辑是“<strong>如果满足或条件中的至少任意一个条件，则执行某些动作</strong>”。</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;“或条件”以及“与条件”里面又分为两类条件，即“时间条件”与“事件条件”。时间条件支持时间点、时间段，支持一个周内的预约，支持重复。</p></div><h3>2.13.3.2、添加动作</h3><div style="margin-left:30px;"><ul>
<li>场景的动作目前支持五类，子设备控制、场景触发、睡眠、向zigbee推送透传数据、调用指定回调</li>
</ul>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>添加场景动作："AddAction"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.ActionId</td>
<td>动作识别标识</td>
<td>字符串"%s"</td>
<td>详见注1，长度不超过128</td>
</tr>
<tr>
<td>Data.DevId</td>
<td>设备ID</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Key</td>
<td>设备键名</td>
<td>字符串"%s"</td>
<td>详见注2，长度不超过128</td>
</tr>
<tr>
<td>Data.ValueCoding</td>
<td>键值编码类型</td>
<td>字符串"%s"</td>
<td>详见注3</td>
</tr>
<tr>
<td>Data.Value</td>
<td>设备键值</td>
<td>字符串"%s"</td>
<td>长度不超过128</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>注1：</strong>
如果同一个场景的动作中，出现DevId、Key完全相同的多条动作时，ActionId必须传入，且由上层维护其场景里唯一。其他情况下ActionId无需传入，此时系统默认赋0。</p>
<p><strong>注2：</strong>
当Key为“SceneId”时，表示该动作的类型为激活场景，此时ActionId必须传入，建议使用场景ID代替，DevId传入"0000000000000000"(16个0)，Value为JSON格式，传入要执行的场景的ID，以及场景使能。格式如下：{"SceneId":"xxxxx","Enable":"1"}，SceneId域必须传，Enable域非必要参数，传入则针对场景使能进行配置，并根据场景使能，来进一步触发场景；不传入，则对场景使能不修改，直接按规则触发场景。
当Key为“PushZigbee”时，表示该动作为向zigbee推送透传数据，此时ActionId必须传入，DevId为要透传设备的IEEE，Value为要透传的数据，ValueCoding为透传数据的编码方式。
当Key为“Sleep”时，表示该动作为睡眠，单位ms，此时ActionId必须传入，DevId传入"0000000000000000"(16个0)，Value为睡眠的时间。
当Key为“Sync”时，表示状态同步动作，注意该动作类型不能与其他动作类型混用，当要使用该动作类型时，该场景的触发条件将失效。
<strong>注3:</strong>
表示Value的编码方式，目前支持Original、Base64两种编码方式。Original指原始数据，不做任何编码，Base64指对value进行了base64编码。主要作用是当Value是二进制数据时，为了符合json格式，则必须要将value进行编码。当Original时，系统会原封不动的将Value的数据传入到底层接口，当Base64时，会先将Value做base64解码，然后将解码后的数据传入底层接口。ValueCoding可以不传，不传时默认Original。
当Key为“CallBack”时，表示该动作为调用指定回调，该回调是通过接口（int hyLocalSceneActionCbReg(int iCbid, void <em>pFun, void </em>pUserData);）注册。回调函数类型为：int funName(char <em>param, void</em> pUserData); 此时ActionId必须传入， DevId传入"0000000000000000"(16个0)，Value为JSON格式，传入要执行的回调ID，以及参数。格式如下：{"CbId":"x","Param":""}</p>
<hr />
<p>添加场景动作JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">动作为子设备控制
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
            "Op":"AddAction",
            "Id":"000D6F000EC7B98B0003",
            "ActionId":"0",
            "DevId":"000D6F000EC7B98B",
            "KeyCoding":"Original",
            "Key":"Switch",
            "Value":"1"
                }
]
}
动作为激活场景
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
                "Op":"AddAction",
                "Id":"000D6F000EC7B98B0003",
                "ActionId":"000D6F000EC7B98B0008",
                "DevId":"0000000000000000",
                "Key":"SceneId",
                "KeyCoding":"Original",
                "Value":"{\"SceneId\":\"xxxxx\",\"Enable\":\"1\"}"
                }
]
}
动作为向zigbee推送透传数据
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
                "Op":"AddAction",
                "Id":"000D6F000EC7B98B0003",
                "ActionId":"1",
                "DevId":"000D6F000EC7B98B",
                "Key":"PushZigbee",
                "KeyCoding":"Base64",
                "Value":"dGVzdA=="
                }
]
}
动作为睡眠
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
            "Op":"AddAction",
            "Id":"000D6F000EC7B98B0003",
            "ActionId":"2",
            "DevId":"0000000000000000",
            "Key":"Sleep",
            "KeyCoding":"Original",
            "Value":"10000"
                }
]
}
动作为调用回调
{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
            "Op":"AddAction",
            "Id":"000D6F000EC7B98B0003",
            "ActionId":"2",
            "DevId":"0000000000000000",
            "Key":"CallBack",
            "KeyCoding":"Original",
            "Value":"{\"CbId\":\"10\",\"Param\":\"123\"}"
                }
]
}
</code></pre></table></div><h3>2.13.3.3、删除动作</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>删除场景动作："DelAction"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.ActionId</td>
<td>动作识别标识</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.DevId</td>
<td>设备ID</td>
<td>字符串"%s"</td>
<td>详见注1</td>
</tr>
<tr>
<td>Data.Key</td>
<td>设备键名</td>
<td>字符串"%s"</td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p><strong>注1：</strong>
DevId是动作设备的devid，如果DevId设置为“All”，则清空该场景下的所有动作。</p>
<p>删除场景动作JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
            "Op":"DelAction",
            "Id":"000D6F000EC7B98B0003",
            "ActionId":"0",
            "DevId":"000D6F000EC7B98B",
            "Key":"Switch"
                }
]
}
</code></pre></table></div><h3>2.13.3.4、获取动作</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>获取场景动作："GetAction"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
</tbody>
</table>
<hr />
<p>获取场景动作JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
            "Op":"GetAction",
            "Id":"000D6F000EC7B98B0003"
                }
]
}
</code></pre></table></div><h3>2.13.3.5、动作上报</h3><div style="margin-left:30px;"><ul>
<li>该上报为获取场景动作指令的同步返回</li>
</ul>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>获取场景动作："GetAction"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.ActionId</td>
<td>动作识别标识</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.DevId</td>
<td>设备ID</td>
<td>字符串"%s"</td>
<td>如果动作列表为空，则该值为none</td>
</tr>
<tr>
<td>Data.Key</td>
<td>设备键名</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.ValueCoding</td>
<td>键值编码类型</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Value</td>
<td>设备键值</td>
<td>字符串"%s"</td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>获取场景动作JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">如果动作列表为空：
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"LocalScene",
    "Data":[
{
            "Op":"GetAction",
            "Id":"000D6F000EC7B98B0003",
            "DevId":"none"
                }
]
}
如果动作列表有多条
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"LocalScene",
    "Data":[
{
        "Op":"GetAction",
        "Id":"000D6F000EC7B98B0003",
        "ActionId":"0",
        "DevId":"000D6F000EC7B98B",
        "Key":"Switch",
        "KeyCoding":"Original",
        "Value":"1"
                },
{
            "Op":"GetAction",
            "Id":"000D6F000EC7B98B0003",
            "ActionId":"0",
            "DevId":"000D6F000EC7B98C",
            "Key":"Switch",
            "KeyCoding":"Original",
            "Value":"1"
                },
{
            "Op":"GetAction",
            "Id":"000D6F000EC7B98B0003",
            "ActionId":"0",
            "DevId":"000D6F000EC7B98D",
            "Key":"Switch",
            "KeyCoding":"Original",
            "Value":"1"
                }
]
}
</code></pre></table></div></div><h2>2.13.4、2.11.4 或条件控制以及上报</h2><div style="margin-left:0px;"><h3>2.13.4.1、添加时间或条件</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>添加条件："AddCond"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.Logic</td>
<td>或条件或与条件</td>
<td>字符串"%s"</td>
<td>或条件："Or"</td>
</tr>
<tr>
<td>Data.CondType</td>
<td>条件类型</td>
<td>字符串"%s"</td>
<td>时间条件："Time"</td>
</tr>
<tr>
<td>Data.TriggerType</td>
<td>触发类型</td>
<td>字符串"%s"</td>
<td>InstantOnce 条件满足后立即触发，且只触发一次； InstantEvery 条件满足后立即触发，且每隔TriggerInterval分钟触发一次； 默认为InstantOnce。</td>
</tr>
<tr>
<td>Data.TriggerInterval</td>
<td>触发周期</td>
<td>字符串"%s"</td>
<td>TriggerType为InstantEvery时有效，单位是分钟。默认为1分钟。</td>
</tr>
<tr>
<td>Data.TimeKey</td>
<td>时间识别标识</td>
<td>字符串"%s"</td>
<td>详见，注1</td>
</tr>
<tr>
<td>Data.StartHour</td>
<td>开始时间（小时）</td>
<td>字符串"%s"</td>
<td>开始时间与结束时间相同，则为时间段，反之则为时间段。</td>
</tr>
<tr>
<td>Data.StartMinu</td>
<td>开始时间（分钟）</td>
<td>字符串"%s"</td>
<td>开始时间与结束时间不可跨天，即结束时间要大于等于开始时间</td>
</tr>
<tr>
<td>Data.EndHour</td>
<td>结束时间（小时）</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.EndMinu</td>
<td>结束时间（分钟）</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Week</td>
<td>周几</td>
<td>字符串"%s"</td>
<td>可取下列值Mon Tue Wed Thu Fri Sat Sun，多个时用","隔开</td>
</tr>
<tr>
<td>Data.Repeat</td>
<td>是否重复</td>
<td>字符串"%s"</td>
<td>"1"表示重复，"0"表示 不重复</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>注1</strong>
时间识别标识，作为区分时间条件的唯一标准，由上层指定，只需保证在该场景中唯一即可。如果该时间键值已存在，则该条指令为修改，如果键值不存在，则为添加。</p>
<p>添加时间或条件JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
                    "Op":"AddCond",
                    "Id":"000D6F000EC7B98B0003",
                    "Logic":"Or",
                    "CondType":"Time",
                    "TriggerType":"InstantOnce",
                    "TriggerInterval":"1",
                    "TimeKey":"Or_1",
                    "StartHour":"13",
                    "StartMinu":"0",
                    "EndHour":"13",
                    "EndMinu":"0",
                    "Week":"Mon",
                    "Repeat":"1"
                }
]
}
</code></pre></table>
<hr /></div><h3>2.13.4.2、删除时间或条件</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>删除条件："DelCond"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.Logic</td>
<td>或条件或与条件</td>
<td>字符串"%s"</td>
<td>或条件："Or"，详见注1。</td>
</tr>
<tr>
<td>Data.CondType</td>
<td>条件类型</td>
<td>字符串"%s"</td>
<td>时间条件："Time"，详见注2。</td>
</tr>
<tr>
<td>Data.TimeKey</td>
<td>时间识别标识</td>
<td>字符串"%s"</td>
<td>要删除的时间条件，必须存在，详见注3。</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>注1：</strong>
Logic为条件的逻辑属性，删除时间或条件时，该值应为“Or”，如果该值设为“All”时，则表示删除该场景下所有的条件。
<strong>注2：</strong>
CondType为条件类型，删除时间或条件时，该值应为“Time”，如果该值设为“All”时，则表示删除该场景下所有的或条件。
<strong>注3：</strong>
TimeKey为时间识别标识，具有唯一性，如果该值为“All”，则表示删除该场景下的所有时间或条件</p>
<p>删除时间或条件JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
            "Op":"DelCond",
            "Id":"000D6F000EC7B98B0003",
            "Logic":"Or",
            "CondType":"Time",
            "TimeKey":"Or_1"
                }
]
}
</code></pre></table></div><h3>2.13.4.3、获取时间或条件</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>获取条件："GetCond"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.Logic</td>
<td>或条件或与条件</td>
<td>字符串"%s"</td>
<td>或条件："Or"</td>
</tr>
<tr>
<td>Data.CondType</td>
<td>条件类型</td>
<td>字符串"%s"</td>
<td>时间条件："Time"</td>
</tr>
</tbody>
</table>
<hr />
<p>获取时间或条件JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
         "Op":"GetCond",
        "Id":"000D6F000EC7B98B0003",
        "Logic":"Or",
        "CondType":"Time"
                }
]
}
</code></pre></table></div><h3>2.13.4.4、时间或条件上报</h3><div style="margin-left:30px;"><p>该上报为获取时间或条件指令的同步返回:</p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>添加条件："GetCond"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.Logic</td>
<td>或条件或与条件</td>
<td>字符串"%s"</td>
<td>或条件："Or"</td>
</tr>
<tr>
<td>Data.CondType</td>
<td>条件类型</td>
<td>字符串"%s"</td>
<td>时间条件："Time"</td>
</tr>
<tr>
<td>Data.TriggerType</td>
<td>触发类型</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.TriggerInterval</td>
<td>触发周期</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.TimeKey</td>
<td>时间key</td>
<td>字符串"%s"</td>
<td>none表示条件列表为空</td>
</tr>
<tr>
<td>Data.StartHour</td>
<td>开始时间（小时）</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.StartMinu</td>
<td>开始时间（分钟）</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.EndHour</td>
<td>结束时间（小时）</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.EndMinu</td>
<td>结束时间（分钟）</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Week</td>
<td>周几</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Repeat</td>
<td>是否重复</td>
<td>字符串"%s"</td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>获取时间或条件JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">当或时间条件列表为空时
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"LocalScene",
    "Data":[
{
        "Op":"GetCond",
        "Id":"000D6F000EC7B98B0003",
        "Logic":"Or",
        "CondType":"Time",
        "TimeKey":"none"
                }
]
}
当或时间条件列表不为空时

{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"LocalScene",
    "Data":[
        {
         "Op":"GetCond",
        "Id":"000D6F000EC7B98B0003",
        "Logic":"Or",
        "CondType":"Time",
        "TriggerType":"InstantOnce",
        "TriggerInterval":"1",
        "TimeKey":"Or_1",
        "StartHour":"13",
        "StartMinu":"0",
        "EndHour":"13",
        "EndMinu":"0",
        "Week":"Mon",
        "Repeat":"1"
                }
]
}
</code></pre></table></div><h3>2.13.4.5、添加事件或条件</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch "；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>添加条件："AddCond"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.Logic</td>
<td>或条件或与条件</td>
<td>字符串"%s"</td>
<td>或条件："Or"</td>
</tr>
<tr>
<td>Data.CondType</td>
<td>条件类型</td>
<td>字符串"%s"</td>
<td>事件条件："Event"</td>
</tr>
<tr>
<td>Data.TriggerType</td>
<td>触发类型</td>
<td>字符串"%s"</td>
<td>InstantOnce 条件满足后立即触发，且只触发一次； InstantEvery 条件满足后立即触发，且每次收到该事件都触发； ContinueOnce 条件满足后持续指定时间触发，且只触发一次； ContinueEvery 条件满足后持续指定时间触发，且每次收到该事件都触发； 默认为InstantOnce ;StateSync 状态同步触发(详见注3)；</td>
</tr>
<tr>
<td>Data.ContinueTime</td>
<td>状态保持时间</td>
<td>字符串"%s"</td>
<td>持续时间，单位S，TriggerType为ContinueOnce或ContinueEvery时，该字段才生效。默认为0</td>
</tr>
<tr>
<td>Data.DevId</td>
<td>子设备id</td>
<td>字符串"%s"</td>
<td>详见注1</td>
</tr>
<tr>
<td>Data.Key</td>
<td>子设备键值</td>
<td>字符串"%s"</td>
<td>详见注2</td>
</tr>
<tr>
<td>Data.Value</td>
<td>子设备value</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Active</td>
<td>成立条件</td>
<td>字符串"%s"</td>
<td>Equ(=) Gtr(>) Lss(\<) Not(!=)</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>注1:</strong>
DevId与Key唯一确定一个条件，DevId与Key在一个场景里是唯一的，但是多个场景里可以有相同的DevId与Key。同样，如果该时DevId与Key已存在，则该条指令为修改，如果不存在，则为添加。
<strong>注2:</strong>
当Key为“Manual”时，表示手动触发条件。该特殊条件类型，只允许在事件或条件集合里。当某一个场景中含有手动触发条件，它被实体场景面板触发时，无需判断其他天剑是否满足，直接触发，当然前提是该场景的使能是开启的。DevId为0000000000000000, Value预留默认为0、Active=Equ
<strong>注3:</strong>
当TriggerType为“StateSync”时，实现的是本地状态同步功能。将需要同步的属性，添加到事件或集合中，触发类型设置为“StateSync”, key为需要同步的属性，DevId为要同步的设备，其他值默认 ContinueTime=0, Value=0、Active=Equ。注意适用该功能数属性一定是开关量属性。
添加事件或条件JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
    "Op":"AddCond",
    "Id":"000D6F000EC7B98B0003",
    "Logic":"Or",
    "CondType":"Event",
    "TriggerType":"InstantOnce",
    "ContinueTime":"0",
    "DevId":"1234567876543210",
    "Key":"Switch",
    "Value":"1",
    "Active":"Equ"
                }
]
}
</code></pre></table></div><h3>2.13.4.6、删除事件或条件</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>删除条件："DelCond"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.Logic</td>
<td>或条件或与条件</td>
<td>字符串"%s"</td>
<td>或条件："Or"，详见注1.</td>
</tr>
<tr>
<td>Data.CondType</td>
<td>条件类型</td>
<td>字符串"%s"</td>
<td>事件条件："Event"，详见注2</td>
</tr>
<tr>
<td>Data.DevId</td>
<td>子设备id</td>
<td>字符串"%s"</td>
<td>详见注3.</td>
</tr>
<tr>
<td>Data.Key</td>
<td>子设备键值</td>
<td>字符串"%s"</td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p><strong>注1：</strong>
Logic为条件的逻辑属性，删除事件或条件时，该值应为“Or”，如果该值设为“All”时，则表示删除该场景下所有的条件。
<strong>注2：</strong>
CondType为条件类型，删除事件或条件时，该值应为“Event”，如果该值设为“All”时，则表示删除该场景下所有的或条件。
<strong>注3：</strong>
DevId为触发事件的设备的devid，如果该值为“All”，则表示删除该场景下的所有事件或条件</p>
<p>删除事件或条件JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
     "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
        "Op":"DelCond",
        "Id":"000D6F000EC7B98B0003",
        "Logic":"Or",
        "CondType":" Event",
        "DevId":"1234567876543210",
        "Key":"Switch"
                }
]
}
</code></pre></table></div><h3>2.13.4.7、获取事件或条件</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>获取条件："GetCond"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.Logic</td>
<td>或条件或与条件</td>
<td>字符串"%s"</td>
<td>或条件："Or"</td>
</tr>
<tr>
<td>Data.Logic.CondType</td>
<td>条件类型</td>
<td>字符串"%s"</td>
<td>时间条件："Event"</td>
</tr>
</tbody>
</table>
<hr />
<p>获取事件或条件JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
         "Op":"GetCond",
        "Id":"000D6F000EC7B98B0003",
        "Logic":"Or",
        "CondType":"Event"
                }
]
}
</code></pre></table></div><h3>2.13.4.8、事件或条件上报</h3><div style="margin-left:30px;"><p>该上报为获取事件或条件指令的同步返回</p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>添加条件："GetCond"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.Logic</td>
<td>或条件或与条件</td>
<td>字符串"%s"</td>
<td>或条件："Or"</td>
</tr>
<tr>
<td>Data.CondType</td>
<td>条件类型</td>
<td>字符串"%s"</td>
<td>时间条件："Event"</td>
</tr>
<tr>
<td>Data.TriggerType</td>
<td>触发类型</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.ContinueTime</td>
<td>状态持续时间</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.DevId</td>
<td>子设备id</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Key</td>
<td>子设备键值</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Value</td>
<td>子设备value</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Active</td>
<td>成立条件</td>
<td>字符串"%s"</td>
<td>Equ(=) Gtr(>) Lss(\<) Not(!=)</td>
</tr>
</tbody>
</table>
<hr />
<p>获取事件或条件JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">当或时间条件列表为空时
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"LocalScene",
    "Data":[
{
        "Op":"GetCond",
        "Id":"000D6F000EC7B98B0003",
        "Logic":"Or",
        "CondType":"Event",
        "DevId":"none"
                }
]
}
当或事件条件列表不为空时

{
            "Command":"Report",
            "FrameNumber":"00",
            "GatewayId":"0006D12345678909",
            "Type":"LocalScene",
            "Data":[
        {
        "Op":"GetCond",
        "Id":"000D6F000EC7B98B0003",
        "Logic":"Or",
        "CondType":"Event",
        "TriggerType":"InstantOnce",
        "ContinueTime":"0",
        "DevId":"1234567876543210",
        "Key":"Switch",
        "Value":"1",
        "Active":"Equ"
                }
]
}
</code></pre></table></div></div><h2>2.13.5、2.11.5 与条件控制以及上报</h2><div style="margin-left:0px;"><h3>2.13.5.1、添加时间与条件</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>添加条件："AddCond"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.Logic</td>
<td>或条件或与条件</td>
<td>字符串"%s"</td>
<td>或条件："And"</td>
</tr>
<tr>
<td>Data.CondType</td>
<td>条件类型</td>
<td>字符串"%s"</td>
<td>时间条件："Time"</td>
</tr>
<tr>
<td>Data.TriggerType</td>
<td>触发类型</td>
<td>字符串"%s"</td>
<td>InstantOnce 条件满足后立即触发，且只触发一次； InstantEvery 条件满足后立即触发，且每隔TriggerInterval分钟触发一次； 默认为InstantOnce</td>
</tr>
<tr>
<td>Data.TriggerInterval</td>
<td>触发周期</td>
<td>字符串"%s"</td>
<td>触发间隔，单位分钟，TriggerType=InstantEvery该字段生效。默认为1</td>
</tr>
<tr>
<td>Data.TimeKey</td>
<td>时间识别标识</td>
<td>字符串"%s"</td>
<td>详见，注1</td>
</tr>
<tr>
<td>Data.StartHour</td>
<td>开始时间（小时）</td>
<td>字符串"%s"</td>
<td>开始时间与结束时间相同，则为时间段，反之则为时间段。</td>
</tr>
<tr>
<td>Data.StartMinu</td>
<td>开始时间（分钟）</td>
<td>字符串"%s"</td>
<td>开始时间与结束时间不可跨天，即结束时间要大于等于开始时间</td>
</tr>
<tr>
<td>Data.EndHour</td>
<td>结束时间（小时）</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.EndMinu</td>
<td>结束时间（分钟）</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Week</td>
<td>周几</td>
<td>字符串"%s"</td>
<td>可取下列值Mon Tue Wed Thu Fri Sat Sun，多个时用","隔开</td>
</tr>
<tr>
<td>Data.Repeat</td>
<td>是否重复</td>
<td>字符串"%s"</td>
<td>"1"表示重复，"0"表示 不重复</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>注1:</strong>
时间条识别标识，作为区分时间条件的唯一标准，由上层指定，只需保证在该场景中唯一即可。如果该时间键值已存在，则该条指令为修改，如果键值不存在，则为添加。</p>
<p>添加时间与条件JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
         "Op":"AddCond",
        "Id":"000D6F000EC7B98B0003",
        "Logic":"And",
        "CondType":"Time",
        "TriggerType":"InstantOnce",
        "TriggerInterval":"1",
        "TimeKey":"And_1",
        "StartHour":"13",
        "StartMinu":"0",
        "EndHour":"13",
        "EndMinu":"0",
        "Week":"Mon",
        "Repeat":"1"
                }
]
}
</code></pre></table></div><h3>2.13.5.2、删除时间与条件</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>删除条件："DelCond"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.Logic</td>
<td>或条件或与条件</td>
<td>字符串"%s"</td>
<td>或条件："And"，详见注1</td>
</tr>
<tr>
<td>Data.CondType</td>
<td>条件类型</td>
<td>字符串"%s"</td>
<td>时间条件："Time"，详见注2</td>
</tr>
<tr>
<td>Data.TimeKey</td>
<td>时间key</td>
<td>字符串"%s"</td>
<td>要删除的时间条件，必须存在，详见注3</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>注1：</strong>
Logic为条件的逻辑属性，删除时间与条件时，该值应为“And”，如果该值设为“All”时，则表示删除该场景下所有的条件。
<strong>注2：</strong>
CondType为条件类型，删除时间与条件时，该值应为“Time”，如果该值设为“All”时，则表示删除该场景下所有的与条件。
<strong>注3：</strong>
TimeKey为时间识别标识，具有唯一性，如果该值为“All”，则表示删除该场景下的所有时间与条件</p>
<p>删除时间或条件JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
         "Op":"DelCond",
        "Id":"000D6F000EC7B98B0003",
        "Logic":"And",
        "CondType":"Time",
        "TimeKey":"And1"
                }
]
}
</code></pre></table></div><h3>2.13.5.3、获取时间与条件</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>获取条件："GetCond"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.Logic</td>
<td>或条件或与条件</td>
<td>字符串"%s"</td>
<td>或条件："And"</td>
</tr>
<tr>
<td>Data.CondType</td>
<td>条件类型</td>
<td>字符串"%s"</td>
<td>时间条件："Time"</td>
</tr>
</tbody>
</table>
<hr />
<p>获取时间与条件JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
        "Op":"GetCond",
        "Id":"000D6F000EC7B98B0003",
        "Logic":"And",
        "CondType":"Time"
                }
]
}
</code></pre></table></div><h3>2.13.5.4、时间与条件上报</h3><div style="margin-left:30px;"><p>该上报为获取时间与条件指令的同步返回</p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>添加条件："GetCond"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.Logic</td>
<td>或条件或与条件</td>
<td>字符串"%s"</td>
<td>或条件："And"</td>
</tr>
<tr>
<td>Data.CondType</td>
<td>条件类型</td>
<td>字符串"%s"</td>
<td>时间条件："Time"</td>
</tr>
<tr>
<td>Data.TriggerType</td>
<td>触发类型</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.TriggerInterval</td>
<td>触发间隔</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.TimeKey</td>
<td>时间key</td>
<td>字符串"%s"</td>
<td>none表示条件列表为空</td>
</tr>
<tr>
<td>Data.StartHour</td>
<td>开始时间（小时）</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.StartMinu</td>
<td>开始时间（分钟）</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.EndHour</td>
<td>结束时间（小时）</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.EndMinu</td>
<td>结束时间（分钟）</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Week</td>
<td>周几</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Repeat</td>
<td>是否重复</td>
<td>字符串"%s"</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p>获取时间与条件JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">当与时间条件列表为空时
{
     "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"LocalScene",
    "Data":[
{
        "Op":"GetCond",
        "Id":"000D6F000EC7B98B0003",
        "Logic":"And",
        "CondType":"Time",
        "TimeKey":"none"
                }
]
}
当与时间条件列表不为空时

{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"LocalScene",
    "Data":[
{
        "Op":"GetCond",
        "Id":"000D6F000EC7B98B0003",
        "Logic":"And",
        "CondType":"Time",
        "TriggerType":"InstantOnce",
        "TriggerInterval":"1",
        "TimeKey":"And_1",
        "StartHour":"13",
        "StartMinu":"0",
        "EndHour":"13",
        "EndMinu":"0",
        "Week":"Mon",
        "Repeat":"1"
                }
]
}
</code></pre></table></div><h3>2.13.5.5、添加事件与条件</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch "；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>添加条件："AddCond"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.Logic</td>
<td>或条件或与条件</td>
<td>字符串"%s"</td>
<td>或条件："And"</td>
</tr>
<tr>
<td>Data.CondType</td>
<td>条件类型</td>
<td>字符串"%s"</td>
<td>事件条件："Event"</td>
</tr>
<tr>
<td>Data.TriggerType</td>
<td>触发类型</td>
<td>字符串"%s"</td>
<td>InstantOnce 条件满足后立即触发，且只触发一次； ContinueOnce 条件满足后持续指定时间触发，且只触发一次； 默认为InstantOnce。 注意作为事件与条件，触发类型不支持多次触发（InstantEvery、ContinueEvery）</td>
</tr>
<tr>
<td>Data.ContinueTime</td>
<td>状态持续时间</td>
<td>字符串"%s"</td>
<td>持续时间，单位S，TriggerType=ContinueOnce，该字段才生效</td>
</tr>
<tr>
<td>Data.DevId</td>
<td>子设备id</td>
<td>字符串"%s"</td>
<td>详见注1</td>
</tr>
<tr>
<td>Data.Key</td>
<td>子设备键值</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Value</td>
<td>子设备value</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Active</td>
<td>成立条件</td>
<td>字符串"%s"</td>
<td>Equ(=) Gtr(>) Lss(\<) Not(!=)</td>
</tr>
</tbody>
</table>
<hr />
<p><strong>注1</strong>
DevId与Key唯一确定一个条件，DevId与Key在一个场景里是唯一的，但是多个场景里可以有相同的DevId与Key。同样，如果该时DevId与Key已存在，则该条指令为修改，如果不存在，则为添加。</p>
<p>添加事件与条件JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
         "Op":"AddCond",
        "Id":"000D6F000EC7B98B0003",
        "Logic":"And",
        "CondType":" Event",
        "TriggerType":"InstantOnce",
        "ContinueTime":"0",
        "DevId":"1234567876543210",
        "Key":"Switch",
        "Value":"1",
        "Active":"Equ"
                }
]
}
</code></pre></table></div><h3>2.13.5.6、删除事件与条件</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>删除条件："DelCond"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.ogic</td>
<td>或条件或与条件</td>
<td>字符串"%s"</td>
<td>或条件："And"，详见注1</td>
</tr>
<tr>
<td>Data.ondType</td>
<td>条件类型</td>
<td>字符串"%s"</td>
<td>事件条件："Event"，详见注2</td>
</tr>
<tr>
<td>Data.DevId</td>
<td>子设备id</td>
<td>字符串"%s"</td>
<td>详见注3</td>
</tr>
<tr>
<td>Data.Key</td>
<td>子设备键值</td>
<td>字符串"%s"</td>
<td></td>
</tr>
</tbody>
</table>
<hr />
<p><strong>注1：</strong>
Logic为条件的逻辑属性，删除事件与条件时，该值应为“Or”，如果该值设为“All”时，则表示删除该场景下所有的条件。
<strong>注2：</strong>
CondType为条件类型，删除事件与条件时，该值应为“Event”，如果该值设为“All”时，则表示删除该场景下所有的或条件。
<strong>注3：</strong>
DevId为触发事件的设备的devid，如果该值为“All”，则表示删除该场景下的所有事件与条件</p>
<p>删除事件与条件JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
        "Op":"DelCond",
        "Id":"000D6F000EC7B98B0003",
        "Logic":"And",
        "CondType":" Event",
        "DevId":"1234567876543210",
        "Key":"Switch"
                }
]
}
</code></pre></table></div><h3>2.13.5.7、获取事件与条件</h3><div style="margin-left:30px;"><table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>下发："Dispatch"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>获取条件："GetCond"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.Logic</td>
<td>或条件或与条件</td>
<td>字符串"%s"</td>
<td>或条件："And"</td>
</tr>
<tr>
<td>Data.CondType</td>
<td>条件类型</td>
<td>字符串"%s"</td>
<td>时间条件："Event"</td>
</tr>
</tbody>
</table>
<hr />
<p>获取事件与条件JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"LocalScene",
    "Data":[
{
            "Op":"GetCond",
            "Id":"000D6F000EC7B98B0003",
            "Logic":"And",
            "CondType":"Event"
                }
]
}
</code></pre></table></div><h3>2.13.5.8、事件与条件上报</h3><div style="margin-left:30px;"><p><strong>该上报为获取事件与条件指令的同步返回</strong></p>
<hr />
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>数据项</th>
<th>描述</th>
<th>格式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command</td>
<td>命令类型</td>
<td>字符串"%s"</td>
<td>上报："Report"；</td>
</tr>
<tr>
<td>FrameNumber</td>
<td>帧序号</td>
<td>字符串"%s"</td>
<td>暂时设为<strong>"00"</strong></td>
</tr>
<tr>
<td>GatewayId</td>
<td>网关mac</td>
<td>字符串"%s"</td>
<td>"Report" 时生效</td>
</tr>
<tr>
<td>Type</td>
<td>数据功能</td>
<td>字符串"%s"</td>
<td>设备列表："LocalScene"；</td>
</tr>
<tr>
<td>Data</td>
<td>数据表</td>
<td>数组类型</td>
<td></td>
</tr>
<tr>
<td>Data.Op</td>
<td>场景操作类型</td>
<td>字符串"%s"</td>
<td>添加条件："GetCond"</td>
</tr>
<tr>
<td>Data.Id</td>
<td>场景id</td>
<td>字符串"%s"</td>
<td>要操作的场景Id，必须已存在</td>
</tr>
<tr>
<td>Data.Logic</td>
<td>或条件或与条件</td>
<td>字符串"%s"</td>
<td>或条件："And"</td>
</tr>
<tr>
<td>Data.CondType</td>
<td>条件类型</td>
<td>字符串"%s"</td>
<td>时间条件："Event"</td>
</tr>
<tr>
<td>Data.TriggerType</td>
<td>触发类型</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.ContinueTime</td>
<td>持续时间</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.DevId</td>
<td>子设备id</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Key</td>
<td>子设备键值</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Value</td>
<td>子设备value</td>
<td>字符串"%s"</td>
<td></td>
</tr>
<tr>
<td>Data.Active</td>
<td>成立条件</td>
<td>字符串"%s"</td>
<td>Equ(=) Gtr(>) Lss(\<) Not(!=)</td>
</tr>
</tbody>
</table>
<hr />
<p>事件与条件上报JSON示例：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">当与时间条件列表为空时
{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"LocalScene",
    "Data":[
{
        "Op":"GetCond",
        "Id":"000D6F000EC7B98B0003",
        "Logic":"And",
        "CondType":"Event",
        "DevId":"none"
                }
]
}
当与事件条件列表不为空时

{
    "Command":"Report",
    "FrameNumber":"00",
    "GatewayId":"0006D12345678909",
    "Type":"LocalScene",
    "Data":[
{
        "Op":"GetCond",
        "Id":"000D6F000EC7B98B0003",
        "Logic":"And",
        "CondType":"Event",
        "TriggerType":"InstantOnce",
        "ContinueTime":"0",
        "DevId":"1234567876543210",
        "Key":"Switch",
        "Value":"1",
        "Active":"Equ"
                }
]
}
</code></pre></table></div></div></div><h2>2.14、QA</h2><div style="margin-left:20px;"><h3>2.14.1、QA</h3><div style="margin-left:0px;"><ul>
<li>A.    如何创建ZHA标准场景以及执行
第一步，将场景中需要用到的终端设备统一加入到同一个组别GroupId。如假设一场景有两盏灯分别为三位开关(DeviceId=000D6F000D6E7C30)的第二路(EndpointId=2)和两位开关的(DeviceId=000D6F4000123456)的第一路(EndpointId=1)。使用管理分组指令分别向两个设备发送添加分组指令，具体参看5.1管理分组指令，以及5.2分组信息上报。
第二步，将场景中需要用到的终端设备的状态变为场景要求的状态。分别向设备下发控制指令或手动本地控制设备，让设备状态变为该场景下要求的状态。如控制三位开关第二路开，两位开关第一路关。
第三步，将该场景中需要用到的终端设备设为同一场景号。分别向所有下发管理场景指令（<em>管理场景指令</em>），其中组号为第一步中设置的组号。
第四步，执行场景。向网关下发执行场景指令（参看 <em>管理场景指令</em> ）</li>
</ul>
<hr />
<ul>
<li>B.    网关Reset按键的功能？</li>
</ul>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>允许子设备入网</th>
<th>3秒钟内，连续短按3次Reset按键，网关指示灯WAN、LAN、WIFI三个指示灯呈流水灯状态，此时允许子设备加入网关，持续120秒钟。</th>
</tr>
</thead>
<tbody>
<tr>
<td>恢复出厂设置</td>
<td>长按Reset按键10秒以上，设备恢复出厂设置，清除已加入网关设备，重新启动。</td>
</tr>
</tbody>
</table>
<hr />
<ul>
<li>C.    本地场景指令如何使用？
使用场景：当按下场景面板的某一个按键（比如，回家），就执行一系列的动作（比如，开灯）。
指令调用过程：
1、  首先创建一个场景，参考11.1.1节
<table width='100%' class='codestyle'><pre><code class="language-json">{
  "Command":"Dispatch",
"FrameNumber":"00",
"Type":"LocalScene",
"Data":[
{
                "Op":"AddScene",
                "Id":"000D6F000EC7B98B0001",
                "Name":"huijia",
                "Enable": "1",
"ExecDelayed":"0",
        "UpdateTime":"0", 
        "Note":"0"
            }
]
}</code></pre></table>
<p>2、向场景中添加动作，参考11.3.1节</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
  "Command":"Dispatch",
"FrameNumber":"00",
"Type":"LocalScene",
"Data":[
{
                "Op":"AddAction",
"Id":"000D6F000EC7B98B0001",
"ActionId":"0",
                "DevId":"000D6F000EC7B98B",
"KeyCoding":"Original",
"Key":"Switch",
                "Value":"1"
            }
]
}</code></pre></table>
<p>3、实体场景面板与场景绑定，参考11.2.1节</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
  "Command":"Dispatch",
"FrameNumber":"00",
"Type":"LocalScene",
"Data":[
{
                "Op":"BindScene",
"Id":"000D6F000EC7B98B0001",
                "DevId":"000D6F000EC7B98B",
"Key":"KeyFobValue",
"Value":"1"
            }
]
}</code></pre></table></li>
</ul></div></div><h2>2.15、附录</h2><div style="margin-left:20px;"><h3>2.15.1、附录1 图片版场景面板的场景图片编号（场景面板固件版本需要大于20180814）</h3><div style="margin-left:0px;"><p><strong>注：图片版场景面板的 场景图片，可通过指令 <em>管理场景指令</em> 下发修改，</strong>
例如：</p>
<table width='100%' class='codestyle'><pre><code class="language-json">{
    "Command":"Dispatch",
    "FrameNumber":"00",
    "Type":"Scene",
    "Data":[
              {
               "DeviceId":"123456787654310",   
               "Key":"S"，
               "Endpoint":"1",  //  写死
               "Value":{
                       "GroupId":"1"， // 固定为1
                       "SceneId": "1",  //  对应液晶场景面板的按键号
                       "SceneName":"5"   // 烹饪
              }
            ]
}
</code></pre></table>
<hr />
<table width='100%' class='codestyle'><pre><code>                    图片版场景面板的场景图片编号</code></pre></table>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th>编号</th>
<th>图片名称</th>
<th>编号</th>
<th>图片名称</th>
<th>编号</th>
<th>图片名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>回家</td>
<td><strong>12</strong></td>
<td>洗漱</td>
<td><strong>23</strong></td>
<td>休息</td>
</tr>
<tr>
<td>2</td>
<td>离家</td>
<td><strong>13</strong></td>
<td>顶灯</td>
<td><strong>24</strong></td>
<td>办公</td>
</tr>
<tr>
<td>3</td>
<td>起床</td>
<td><strong>14</strong></td>
<td>灯带</td>
<td><strong>25</strong></td>
<td>演讲</td>
</tr>
<tr>
<td>4</td>
<td>起夜</td>
<td><strong>15</strong></td>
<td>筒灯</td>
<td><strong>26</strong></td>
<td>电视</td>
</tr>
<tr>
<td>5</td>
<td>睡眠</td>
<td><strong>16</strong></td>
<td>开窗帘</td>
<td><strong>27</strong></td>
<td>投影</td>
</tr>
<tr>
<td>6</td>
<td>烹饪</td>
<td><strong>17</strong></td>
<td>暂停</td>
<td><strong>28</strong></td>
<td>影音</td>
</tr>
<tr>
<td>7</td>
<td>西餐</td>
<td><strong>18</strong></td>
<td>关窗帘</td>
<td><strong>29</strong></td>
<td>会客</td>
</tr>
<tr>
<td>8</td>
<td>中餐</td>
<td><strong>19</strong></td>
<td>开纱帘</td>
<td><strong>30</strong></td>
<td>全开</td>
</tr>
<tr>
<td>9</td>
<td>聚餐</td>
<td><strong>20</strong></td>
<td>关纱帘</td>
<td><strong>31</strong></td>
<td>全关</td>
</tr>
<tr>
<td>10</td>
<td>用餐</td>
<td><strong>21</strong></td>
<td>娱乐</td>
<td><strong>32</strong></td>
<td>上班</td>
</tr>
<tr>
<td>11</td>
<td>洗澡</td>
<td><strong>22</strong></td>
<td>阅读</td>
<td><strong>33</strong></td>
<td>下班</td>
</tr>
</tbody>
</table></div><h3>2.15.2、附录2 组播支持产品列表</h3><div style="margin-left:0px;"><p><img width=500 src="http://wiki.honyarcloud.com:10088/server/../Public/Uploads/2019-12-26/5e04600943904.png" alt="" /></p></div><h3>2.15.3、附录3 鸿雁智能主机快速开发SDK使用说明</h3><div style="margin-left:0px;"><p>1、  硬件基于鸿雁智能主机;
2、  鸿雁智能主机快速开发包，包括以下文件：</p>
<table>
<thead><tr style='background-color: rgb(0, 136, 204); color: rgb(255, 255, 255);'>
<th><strong>文件夹名称</strong></th>
<th><strong>包含文件</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1-协议文档</td>
<td>鸿雁网关对接开发技术说明</td>
</tr>
<tr>
<td>2-动态库</td>
<td>configure文件夹(子设备的配置文件)； hy_device_manage.h; libgpio_fun.so; librexgatewaysdk.so; libsqlite3.so.0; libhydevicemanagesdk.so</td>
</tr>
<tr>
<td>3-网关COO固件</td>
<td>4451_1_2018mmdd.ebl （mm代表月份，dd代表日期，以实际文件为准，如4451_1_20180908.ebl）</td>
</tr>
</tbody>
</table>
<p>3、开发者开发前请参看hy_device_manage.h说明;
4、开发者在程序中，应包含头文件 hy_device_manage.h;
5、编译时必须包括的动态链接库有libgpio_fun.so, librexgatewaysdk.so, libsqlite3.so.0, libhydevicemanagesdk.so，开发包中均已经提供;
6、configure文件夹必须整体放置在程序中设置的设备配置文件路径下。
例子：</p>
<table width='100%' class='codestyle'><pre><code class="language-c">#include "deviceManage.h"
#include <stdio.h>
#include <unistd.h>

/*定义上报回调函数*/
int testReport(char *buff)  
{
    printf("[Debug] testPort: %s\n\n",buff);
    return 0;
}

/*复位按键长按10s以上默认设备恢复出厂设置，COO配网信息恢复出厂、网关中设备列表清空*/

/*定义复位按键长按5~8s事件回调函数，若不使用则返回0*/
int testButten8s()
{
    return 0;
}

int main()
{

    /*设置日志级别以及日志输出路径，若不调用该函数，默认输出日志到标准输出*/
       HySetLogInit(5, "/tmp/log_hygateway.txt"); 

    /*注册复位按键长按8s事件回调函数*/
       hySetResetButen8sFunHandler(testButten8s);
    /*设置设备管理数据库路径*/
       hySetDeviceManageDataBasePath("/usr/testgateway/");
    /*设置设备配置文件路径*/
      hySetConfigurFilePath("/usr/testgateway/configure");
    /*设置COO下载升级文件路径，如当前COO固件版本与提供的版本不一致，则将COO固件复制到该路径下*/
      hySetFileDownLoadPath("/usr/ testgateway/");
    /*初始化本地场景功能，若不需要本地场景功能，则不必调用该函数*/
      hyLocalSceneInit("/usr/ testgateway/sceneInfo.db", 0);

    /*注册上报回调函数，该函数接口必须在hyLocalSceneInit 下方，hyGatewayRun()上方调用*/
      hySetReportFunHandler(testReport);
    /*启动网关*/
      hyGatewayRun();

    /*插入开发者操作*/
    while(1)
    {
     }
}
</code></pre></table></div></div></div><h1>3、三、鸿雁网关MQTT服务说明</h1><div style="margin-left:0px;"><h2>3.1、3.1 MQTT服务介绍</h2><div style="margin-left:20px;"><h3>3.1.1、MQTT服务介绍</h3><div style="margin-left:0px;"><p>鸿雁网关对外支持MQTT服务，相关协议在json协议的基础上，修改优化而来。</p></div></div><h2>3.2、3.2 MQTT服务连接</h2><div style="margin-left:20px;"></div><h2>3.3、3.3 MQTT主题介绍</h2><div style="margin-left:20px;"><h3>3.3.1、MQTT主题介绍</h3><div style="margin-left:0px;"><h1>1、topic</h1>
<p>定阅与发布必须要有主题，只有当定阅了某个主题后，才能收到相应主题的payload,才能进行通信。</p>
<h1>2、 主题层级分隔符—-“/”</h1>
<p>主题层级分隔符使得主题名结构化。如果存在分隔符，它将主题名分割为多个主题层级。</p>
<p>斜杠（‘/’ U+002F）用于分割主题的每个层级，为主题名提供一个分层结构。当客户端订阅指定的主题过滤器包含两种通配符时，主题层级分隔符就很有用了。主题层级分隔符可以出现在主题过滤器或主题名字的任何位置。相邻的主题层次分隔符表示一个零长度的主题层级。</p>
<p>如主题：</p>
<p>　　>>1　　root/light</p>
<p>　　>>2　　root/tv/contrl/sensor</p>
<p>　　>>3　　root/tv/contrl/light</p>
<p>　　>>4　　root/airconditioning/sensor</p>
<h1>3、 多层通配符—-“#”</h1>
<p>“#”是用于匹配主题中任意层级的通配符。多层通配符表示它的父级和任意数量的子层级。多层通配符必须位于它自己的层级或者跟在主题层级分隔符后面。不管哪种情况，它都必须是主题过滤器的最后一个字符 .</p>
<p>例如，如果客户端订阅主题 “china/guangzhou/#”，它会收到使用下列主题名发布的消息：</p>
<p>　　>>1　　china/guangzhou</p>
<p>　　>>2　　china/guangzhou/huangpu</p>
<p>　　>>3　　china/guangzhou/tianhe/zhongshanlu</p>
<p>　　>>4　　china/guangzhou/tianhe/zhongshanlu/num123</p>
<p>定阅主题示例</p>
<p>　　>>1　　school/# //也匹配单独的 “school” ，因为 # 包括它的父级。</p>
<p>　　>>2　　# //是有效的，会收到所有的应用消息。</p>
<p>　　>>3　　school/teacher/# //有效的。</p>
<p>　　>>4　　school/teacher# //无效的。</p>
<p>　　>>5　　school/teacher/#/lever //无效的,必须是主题过滤器的最后一个字符</p>
<h1>4、 单层通配符—-“+”</h1>
<p>加号是只能用于单个主题层级匹配的通配符。在主题过滤器的任意层级都可以使用单层通配符，包括第一个和最后一个层级。然而它必须占据过滤器的整个层级 。可以在主题过滤器中的多个层级中使用它，也可以和多层通配符一起使用。</p>
<p>　　>>1　　china/+ 只能匹配 china/guangzhou</p>
<p>　　>>2　　china/+/+/zhongshanlu 能匹配china/guangzhou/tianhe/zhongshanlu和china/shenzhen/nanshan/zhongshanlu</p>
<h1>5、 通配符 —-“$”</h1>
<p>通配符“$”表示匹配一个字符，只要不是放在主题的最开头，即：</p>
<p>　　>>1　　$xx</p>
<p>　　>>2　　/$xx</p>
<p>　　>>3　　/xx$</p>
<p>其它情况下都表示匹配一个字符。</p>
<p>如果客户端想同时接受以 “SYS/”开头主题的消息和不以SYS/”开头主题的消息和不以 开头主题的消息， 它需要同时订阅 “#” 和 ““$SYS/#”。</p>
<h1>6、 总结</h1>
<p>所有的主题名和主题过滤器必须至少包含一个字符
主题名或主题过滤器以前置或后置斜杠 “/” 区分
只包含斜杠 “/” 的主题名或主题过滤器是合法的
主题名和主题过滤器是 UTF-8 编码字符串， 它们不能超过 65535 字节
主题名和主题过滤器是区分大小写的</p></div><h3>3.3.2、鸿雁MQTT主题介绍</h3><div style="margin-left:0px;"><p>1、主题结构
honyar/网关设备id/子设备id/命令类型
说明：
网关设备id：对于zigbee设备网关ID为coo模组的IEEE地址，对于蓝牙设备网关地址为蓝牙网关模组的MAC地址，对于射频433设备网关地址为射频网关模组的ID，对于wifi设备网关地址为网关设备的eth0的mac地址。综上所述，网关设备ID为直接管理该子设备的模组的ID。
子设备id:子设备的ID，如果子设备的ID为网关ID，则该条数据为针对网关的数据。
命令类型：参照“二、鸿雁网关对接开发技术说明->2.2 控制指令和设备上报指令-> 2.2.1 基本格式->Type字段”，该类型与之含义以及内容完全相同。
举例：
1、订阅zigbee网关（0006D12345678909）下三位多控开关（000D6F00168B735D）的控制（ctrl）下发数据的主题
honyar/Dispatch/0006D12345678909/000D6F00168B735D/ctrl
2、订阅所有设备信息
honyar/#
3、订阅zigbee网关（0006D12345678909）的所有设备信息
honyar/Dispatch/0006D12345678909/#
3、订阅zigbee网关（0006D12345678909）的所有设备信息的控制（ctrl）下发数据
honyar/Dispatch/0006D12345678909/+/ctrl
4、发布zigbee网关（0006D12345678909）的设备列表信息的主题
honyar/Report/0006D12345678909/0006D12345678909/DevList
5、发布zigbee网关（0006D12345678909）下三位多控开关（000D6F00168B735D）的属性状态改变的主题
honyar/Report/0006D12345678909/000D6F00168B735D/Attribute</p></div></div><h2>3.4、3.4 MQTT数据实例</h2><div style="margin-left:20px;"><h3>3.4.1、MQTT数据实例</h3><div style="margin-left:0px;"><p>鸿雁MQTT的主题以及数据是根据“ 二、鸿雁网关对接开发技术说明”中的json协议转变而来。数据内容为json
实例：</p>
<h1>1、</h1>
<table width='100%' class='codestyle'><pre><code>{
    "Command": "Dispatch",
    "FrameNumber": "00",
    "Type": "Ctrl",
    "Data": [{
        "DeviceId": "123456787654310",
        "Key": "Luminance",
        "Value": "50"
    }]
}</code></pre></table>
<p>对应MQTT：
主题：honyar/Dispatch/0006D12345678909/123456787654310/Ctrl，数据内容{"Command":"Dispatch","FrameNumber":"00","Type":"Ctrl","Data":[{"DeviceId":"123456787654310","Key":"Luminance","Value":"50"}]}</p>
<h1>2、</h1>
<table width='100%' class='codestyle'><pre><code>{
    "Command": "Report",
    "FrameNumber": "00",
    "GatewayId": "0006D12345678909",
    "Type": "Attribute",
    "Data": [{
        "DeviceId": "123456787654310",
        "ModelId": " YG0001",
        "Key": "Luminance",
        "Value": "50"
    }]
}</code></pre></table>
<p>对应MQTT：
主题：honyar/Report/0006D12345678909/123456787654310/Attribute，数据内容{"Command":"Report","FrameNumber":"00","GatewayId":"0006D12345678909","Type":"Attribute","Data":[{"DeviceId":"123456787654310","ModelId":" YG0001","Key":"Luminance","Value":"50"}]}</p>
<h1>3、</h1>
<table width='100%' class='codestyle'><pre><code>{
    "Command": "Dispatch",
    "FrameNumber": "00",
    "Type": "Add",
    "Data": [{
        "DeviceId": "0000000000000000",
        "Key": "Time",
        "Value": "255"
    }]
}</code></pre></table>
<p>对应MQTT：
主题：honyar/Dispatch/0000000000000000/0000000000000000/Add，数据内容[{"Key":"Time","Value":"255"}]</p>
<h1>4、</h1>
<table width='100%' class='codestyle'><pre><code>{
    "Command": "Report",
    "FrameNumber": "00",
    "GatewayId": "0006D12345678909",
    "Type": "UnRegister",
    "Data": [{
        "DeviceId": "1234567876543210"
    }]
}</code></pre></table>
<p>对应MQTT：
主题：honyar/Report/0006D12345678909/1234567876543210/UnRegister，数据内容{"Command":"Report","FrameNumber":"00","GatewayId":"0006D12345678909","Type":"UnRegister","Data":[{"DeviceId":"1234567876543210"}]}</p>
<h1>5、</h1>
<table width='100%' class='codestyle'><pre><code>{
    "Command": "Report",
    "FrameNumber": "00",
    "GatewayId": "0006D12345678909",
    "Type": "DevList",
    "TotalNumber": "21",
    "AlreadyReportNumber": "21",
    "Data": [{
        "DeviceId": "1234567876543210",
        "ModelId": "0a0c3c",
        "Name": "三位开关",
        "Version": "20180201",
        "Online": "1",
        "RegisterStatus": "1"
    }]
}</code></pre></table>
<p>对应MQTT：
主题：honyar/Report/0006D12345678909/0006D12345678909/DevList，数据内容{"Command":"Report","FrameNumber":"00","GatewayId":"0006D12345678909","Type":"DevList","TotalNumber":"21","AlreadyReportNumber":"21","Data":[{"DeviceId":"1234567876543210","ModelId":"0a0c3c","Name":"三位开关","Version":"20180201","Online":"1","RegisterStatus":"1"}]}</p></div><h3>3.4.2、MQTT数据实例2</h3><div style="margin-left:0px;"><p>鸿雁DLT调光设备调节亮度MQTT的实例
数据内容为json
实例：</p>
<h1>1、下发控制</h1>
<table width='100%' class='codestyle'><pre><code>{
    "Command": "Dispatch",
    "GatewayId": "0006D12345678909",
    "FrameNumber": "00",
    "Type": "Ctrl",
    "Data": [{
        "DeviceId": "123456787654310",
        "Key": "Luminance",
        "Value": "45"
    }]
}</code></pre></table>
<p>对应MQTT：
主题：honyar/Dispatch/0006D12345678909/123456787654310/Ctrl，数据内容{"Command":"Dispatch","FrameNumber":"00","Type":"Ctrl","Data":[{"DeviceId":"123456787654310","Key":"Luminance","Value":"45"}]}</p>
<h1>2、上报属性</h1>
<table width='100%' class='codestyle'><pre><code>{
    "Command": "Report",
    "FrameNumber": "00",
    "GatewayId": "0006D12345678909",
    "Type": "Attribute",
    "Data": [{
        "DeviceId": "123456787654310",
        "ModelId": " YG0001",
        "Key": "Luminance",
        "Value": "50"
    }]
}</code></pre></table>
<p>对应MQTT：
主题：honyar/Report/0006D12345678909/123456787654310/Attribute，数据内容{"Command":"Report","FrameNumber":"00","GatewayId":"0006D12345678909","Type":"Attribute","Data":[{"DeviceId":"123456787654310","ModelId":" YG0001","Key":"Luminance","Value":"50"}]}</p></div></div></div></body></html>